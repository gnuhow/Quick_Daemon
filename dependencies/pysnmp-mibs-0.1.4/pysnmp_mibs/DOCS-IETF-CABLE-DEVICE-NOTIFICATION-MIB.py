# PySNMP SMI module. Autogenerated from smidump -f python DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:38:51 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( docsDevEvId, docsDevEvLevel, docsDevEvText, docsDevServerDhcp, docsDevServerTime, docsDevSwFilename, docsDevSwServer, ) = mibBuilder.importSymbols("DOCS-CABLE-DEVICE-MIB", "docsDevEvId", "docsDevEvLevel", "docsDevEvText", "docsDevServerDhcp", "docsDevServerTime", "docsDevSwFilename", "docsDevSwServer")
( docsIfCmCmtsAddress, docsIfCmStatusDocsisOperMode, docsIfCmStatusModulationType, docsIfCmtsCmStatusDocsisRegMode, docsIfCmtsCmStatusMacAddress, docsIfCmtsCmStatusModulationType, docsIfDocsisBaseCapability, ) = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmCmtsAddress", "docsIfCmStatusDocsisOperMode", "docsIfCmStatusModulationType", "docsIfCmtsCmStatusDocsisRegMode", "docsIfCmtsCmStatusMacAddress", "docsIfCmtsCmStatusModulationType", "docsIfDocsisBaseCapability")
( ifPhysAddress, ) = mibBuilder.importSymbols("IF-MIB", "ifPhysAddress")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "mib-2")

# Objects

docsDevNotifMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 132)).setRevisions(("2006-05-24 00:00",))
if mibBuilder.loadTexts: docsDevNotifMIB.setOrganization("IETF IP over Cable Data Network\nWorking Group")
if mibBuilder.loadTexts: docsDevNotifMIB.setContactInfo("        Azlina Ahmad\nPostal: Cisco Systems, Inc.\n        170 West Tasman Drive\n        San Jose, CA 95134, U.S.A.\nPhone:   408 853 7927\nE-mail: azlina@cisco.com\n\n        Greg Nakanishi\nPostal: Motorola\n        6450 Sequence Drive\n        San Diego, CA 92121, U.S.A.\nPhone:   858 404 2366\nE-mail: gnakanishi@motorola.com\n\nIETF IPCDN Working Group\nGeneral Discussion: ipcdn@ietf.org\n\n\n\nSubscribe: http://www.ietf.org/mailman/listinfo/ipcdn\nArchive: ftp://ftp.ietf.org/ietf-mail-archive/ipcdn\nCo-chairs: Richard Woundy,\n             richard_woundy@cable.comcast.com\n           Jean-Francois Mule, jf.mule@cablelabs.com")
if mibBuilder.loadTexts: docsDevNotifMIB.setDescription("The Event Notification MIB is an extension of the\nCABLE DEVICE MIB.  It defines various notification\nobjects for both cable modem and cable modem termination\nsystems.  Two groups of SNMP notification objects are\ndefined.  One group is for notifying cable modem events,\nand one group is for notifying cable modem termination\nsystem events.\n\nDOCSIS defines numerous events, and each event is\nassigned to a functional category.  This MIB defines\na notification object for each functional category.\nThe varbinding list of each notification includes\ninformation about the event that occurred on the\ndevice.\n\nCopyright (C) The Internet Society (2006).  This version\nof this MIB module is part of RFC 4547; see the RFC\nitself for full legal notices.")
docsDevNotifControl = MibIdentifier((1, 3, 6, 1, 2, 1, 132, 1))
docsDevCmNotifControl = MibScalar((1, 3, 6, 1, 2, 1, 132, 1, 1), Bits().subtype(namedValues=NamedValues(("cmInitTLVUnknownNotif", 0), ("cmDynServReqFailNotif", 1), ("cmSwUpgradeSuccessNotif", 10), ("cmSwUpgradeCVCNotif", 11), ("cmTODFailNotif", 12), ("cmDCCReqFailNotif", 13), ("cmDCCRspFailNotif", 14), ("cmDCCAckFailNotif", 15), ("cmDynServRspFailNotif", 2), ("cmDynServAckFailNotif", 3), ("cmBpiInitNotif", 4), ("cmBPKMNotif", 5), ("cmDynamicSANotif", 6), ("cmDHCPFailNotif", 7), ("cmSwUpgradeInitNotif", 8), ("cmSwUpgradeFailNotif", 9), )).clone(())).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevCmNotifControl.setDescription("The object is used to enable specific CM notifications.\nFor example, if the first bit is set, then\ndocsDevCmInitTLVUnknownNotif is enabled.  If it is not set,\nthe notification is disabled.  Note that notifications are\nalso under the control of the MIB modules defined in\nRFC3413.\n\nIf the device is rebooted,the value of this object SHOULD\nrevert to the default value.")
docsDevCmtsNotifControl = MibScalar((1, 3, 6, 1, 2, 1, 132, 1, 2), Bits().subtype(namedValues=NamedValues(("cmtsInitRegReqFailNotif", 0), ("cmtsInitRegRspFailNotif", 1), ("cmtsDCCRspFailNotif", 10), ("cmtsDCCAckFailNotif", 11), ("cmtsInitRegAckFailNotif", 2), ("cmtsDynServReqFailNotif", 3), ("cmtsDynServRspFailNotif", 4), ("cmtsDynServAckFailNotif", 5), ("cmtsBpiInitNotif", 6), ("cmtsBPKMNotif", 7), ("cmtsDynamicSANotif", 8), ("cmtsDCCReqFailNotif", 9), )).clone(())).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevCmtsNotifControl.setDescription("The object is used to enable specific CMTS notifications.\nFor example, if the first bit is set, then\ndocsDevCmtsInitRegRspFailNotif is enabled.  If it is not set,\nthe notification is disabled.  Note that notifications are\nalso under the control of the MIB modules defined in\nRFC3413.\n\n\n\n\nIf the device is rebooted,the value of this object SHOULD\nrevert to the default value.")
docsDevCmNotifs = MibIdentifier((1, 3, 6, 1, 2, 1, 132, 2, 0))
docsDevCmtsNotifs = MibIdentifier((1, 3, 6, 1, 2, 1, 132, 3, 0))
docsDevNotifConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 132, 4))
docsDevNotifGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 132, 4, 1))
docsDevNotifCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 132, 4, 2))

# Augmentions

# Notifications

docsDevCmInitTLVUnknownNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 1)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmInitTLVUnknownNotif.setDescription("Notification to indicate that an unknown TLV was\nencountered during the TLV parsing process.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n event.\n- docsDevEvId: the unique identifier of the event that\n occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n to which the CM is connected (if there is a cable\n card/interface in the CMTS, then it is actually the\n MAC address of the cable interface to which it is\n connected).\n- docsIfDocsisBaseCapability: the highest\n version of the DOCSIS specification (1.0, 1.1, 2.0)\n that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n methodology used by the CM.")
docsDevCmDynServReqFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 2)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmDynServReqFailNotif.setDescription("A notification to report the failure of a dynamic service\nrequest during the dynamic services process.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected to (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmDynServRspFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 3)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmDynServRspFailNotif.setDescription(" A notification to report the failure of a dynamic service\nresponse during the dynamic services process.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmDynServAckFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 4)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmDynServAckFailNotif.setDescription("A notification to report the failure of a dynamic service\nacknowledgement during the dynamic services process.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmBpiInitNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 5)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmBpiInitNotif.setDescription("A notification to report the failure of a BPI\ninitialization attempt during the registration process.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n\n\n\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmBPKMNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 6)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmBPKMNotif.setDescription("A notification to report the failure of a Baseline\nPrivacy Key Management (BPKM) operation.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n\n\n\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmDynamicSANotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 7)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmDynamicSANotif.setDescription("A notification to report the failure of a dynamic security\nassociation operation.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n\n\n\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmDHCPFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 8)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevServerDhcp"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmDHCPFailNotif.setDescription("A notification to report the failure of a DHCP operation.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsDevServerDhcp: the IP address of the DHCP server.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmSwUpgradeInitNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 9)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmSwUpgradeInitNotif.setDescription("A notification to indicate that a software upgrade\nhas been initiated on the device.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmSwUpgradeFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 10)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmSwUpgradeFailNotif.setDescription("A notification to report the failure of a software upgrade\nattempt.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsDevSwFilename: the software image file name\n- docsDevSwServer: the IP address of the server that\n  the image is retrieved from.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmSwUpgradeSuccessNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 11)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmSwUpgradeSuccessNotif.setDescription("A notification to report the software upgrade success\nstatus.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsDevSwFilename: the software image file name\n- docsDevSwServer: the IP address of the server that\n  the image is retrieved from.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmSwUpgradeCVCFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 12)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmSwUpgradeCVCFailNotif.setDescription("A notification to report that the verification of the\ncode file has failed during a secure software upgrade\nattempt.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmTODFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 13)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevServerTime"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmTODFailNotif.setDescription("A notification to report the failure of a time of day\n\n\n\noperation.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsDevServerTime: the IP address of the time server.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmDCCReqFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 14)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmDCCReqFailNotif.setDescription(" A notification to report the failure of a dynamic channel\nchange request during the dynamic channel change process\non the CM.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n\n\n\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmDCCRspFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 15)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmDCCRspFailNotif.setDescription("A notification to report the failure of a dynamic channel\nchange response during the dynamic channel\nchange process on the CM.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n\n\n\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n  connected).\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmStatusModulationType: the upstream modulation\n  methodology used by the CM.")
docsDevCmDCCAckFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 2, 0, 16)).setObjects(*(("DOCS-IF-MIB", "docsIfCmStatusModulationType"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmDCCAckFailNotif.setDescription("A notification to report the failure of a dynamic channel\nchange acknowledgement during the dynamic channel\nchange process on the CM.\n\nThis notification sends additional information about\nthe event by including the following objects in its\n\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- ifPhysAddress: the MAC address of the cable\n  interface of this cable modem.\n- docsIfCmCmtsAddress: the MAC address of the CMTS\n  to which the CM is connected (if there is a cable\n  card/interface in the CMTS, then it is actually the\n  MAC address of the cable interface to which it is\n\n\n\n  connected).\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmStatusDocsisOperMode: the QOS level (1.0, 1.1)\n  that the CM is operating in.\n- docsIfCmtsCmStatusModulationType the upstream modulation\n  methodology used by the CM.")
docsDevCmtsInitRegReqFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 3, 0, 1)).setObjects(*(("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmtsInitRegReqFailNotif.setDescription("A notification to report the failure of a registration\nrequest from a CM during the CM initialization\nprocess that was detected on the CMTS.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n  with which this notification is associated.\n- ifPhysAddress: the MAC address of the CMTS\n  (if there is a cable card/interface in the CMTS,\n  then it is actually the MAC address of the cable\n  interface that connected to the CM) cable interface\n  connected to the CM.\n- docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n  that the reporting CM is operating in.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n\n\n\n- docsIfCmtsCmStatusModulationType: the upstream\n  modulation methodology used by the CM.")
docsDevCmtsInitRegRspFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 3, 0, 2)).setObjects(*(("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmtsInitRegRspFailNotif.setDescription("A notification to report the failure of a registration\nresponse during the CM initialization\nprocess that was detected by the CMTS.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n  with which this notification is associated.\n- ifPhysAddress: the MAC address of the CMTS\n  (if there is a cable card/interface in the CMTS,\n  then it is actually the MAC address of the cable\n  interface that connected to the CM) cable interface\n  connected to the CM.\n- docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n  that the reporting CM is operating in.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmtsCmStatusModulationType: the upstream\n  modulation methodology used by the CM.")
docsDevCmtsInitRegAckFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 3, 0, 3)).setObjects(*(("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmtsInitRegAckFailNotif.setDescription("A notification to report the failure of a registration\nacknowledgement from the CM during the CM\ninitialization process that was detected by the CMTS.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n  with which this notification is associated.\n- ifPhysAddress: the MAC address of the CMTS\n  (if there is a cable card/interface in the CMTS,\n  then it is actually the MAC address of the cable\n  interface that connected to the CM) cable interface\n  connected to the CM.\n- docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n  that the reporting CM is operating in.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmtsCmStatusModulationType: the upstream\n  modulation methodology used by the CM.")
docsDevCmtsDynServReqFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 3, 0, 4)).setObjects(*(("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmtsDynServReqFailNotif.setDescription("A notification to report the failure of a dynamic service\nrequest during the dynamic services process\nthat was detected by the CMTS.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n  with which this notification is associated.\n- ifPhysAddress: the MAC address of the CMTS\n  (if there is a cable card/interface in the CMTS,\n  then it is actually the MAC address of the cable\n  interface that connected to the CM) cable interface\n  connected to the CM.\n- docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n  that the reporting CM is operating in.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmtsCmStatusModulationType: the upstream\n  modulation methodology used by the CM.")
docsDevCmtsDynServRspFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 3, 0, 5)).setObjects(*(("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmtsDynServRspFailNotif.setDescription("A notification to report the failure of a dynamic service\nresponse during the dynamic services process\nthat was detected by the CMTS.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n  with which this notification is associated.\n- ifPhysAddress: the MAC address of the CMTS\n  (if there is a cable card/interface in the CMTS,\n  then it is actually the MAC address of the cable\n  interface that connected to the CM) cable interface\n  connected to the CM.\n- docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n  that the reporting CM is operating in.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmtsCmStatusModulationType: the upstream\n  modulation methodology used by the CM.")
docsDevCmtsDynServAckFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 3, 0, 6)).setObjects(*(("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmtsDynServAckFailNotif.setDescription("A notification to report the failure of a dynamic service\nacknowledgement during the dynamic services\nprocess that was detected by the CMTS.\n\nThis notification sends additional information about\nthe event by including the following objects in its\n\n\n\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n  with which this notification is associated.\n- ifPhysAddress: the MAC address of the CMTS\n  (if there is a cable card/interface in the CMTS,\n  then it is actually the MAC address of the cable\n  interface that connected to the CM) cable interface\n  connected to the CM.\n- docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n  that the reporting CM is operating in.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmtsCmStatusModulationType: the upstream\n  modulation methodology used by the CM.")
docsDevCmtsBpiInitNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 3, 0, 7)).setObjects(*(("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmtsBpiInitNotif.setDescription("A notification to report the failure of a BPI\ninitialization attempt during the CM registration process\nthat was detected by the CMTS.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n\n\n\n- docsDevEvText: a textual description of the event.\n- docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n  with which this notification is associated.\n- ifPhysAddress: the MAC address of the CMTS\n  (if there is a cable card/interface in the CMTS,\n  then it is actually the MAC address of the cable\n  interface that connected to the CM) cable interface\n  connected to the CM.\n- docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n  that the reporting CM is operating in.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmtsCmStatusModulationType: the upstream\n  modulation methodology used by the CM.")
docsDevCmtsBPKMNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 3, 0, 8)).setObjects(*(("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmtsBPKMNotif.setDescription("A notification to report the failure of a BPKM operation\nthat is detected by the CMTS.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n  with which this notification is associated.\n- ifPhysAddress: the MAC address of the CMTS\n  (if there is a cable card/interface in the CMTS,\n  then it is actually the MAC address of the cable\n  interface that connected to the CM) cable interface\n\n\n\n  connected to the CM.\n- docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n  that the reporting CM is operating in.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmtsCmStatusModulationType: the upstream\n  modulation methodology used by the CM.")
docsDevCmtsDynamicSANotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 3, 0, 9)).setObjects(*(("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmtsDynamicSANotif.setDescription("A notification to report the failure of a dynamic security\nassociation operation that is detected by the CMTS.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n  with which this notification is associated.\n- ifPhysAddress: the MAC address of the CMTS\n  (if there is a cable card/interface in the CMTS,\n  then it is actually the MAC address of the cable\n  interface that connected to the CM) cable interface\n  connected to the CM.\n- docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n  that the reporting CM is operating in.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n\n\n\n- docsIfCmtsCmStatusModulationType: the upstream\n  modulation methodology used by the CM.")
docsDevCmtsDCCReqFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 3, 0, 10)).setObjects(*(("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmtsDCCReqFailNotif.setDescription("A notification to report the failure of a dynamic channel\nchange request during the dynamic channel\nchange process and is detected by the CMTS.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n  with which this notification is associated.\n- ifPhysAddress: the MAC address of the CMTS\n  (if there is a cable card/interface in the CMTS,\n  then it is actually the MAC address of the cable\n  interface that connected to the CM) cable interface\n  connected to the CM.\n- docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n  that the reporting CM is operating in.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmtsCmStatusModulationType: the upstream\n  modulation methodology used by the CM.")
docsDevCmtsDCCRspFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 3, 0, 11)).setObjects(*(("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmtsDCCRspFailNotif.setDescription("A notification to report the failure of a dynamic channel\nchange response during the dynamic channel\nchange process and is detected by the CMTS.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n\n- docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n  with which this notification is associated.\n- ifPhysAddress: the MAC address of the CMTS\n  (if there is a cable card/interface in the CMTS,\n  then it is actually the MAC address of the cable\n  interface that connected to the CM) cable interface\n  connected to the CM.\n- docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n  that the reporting CM is operating in.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmtsCmStatusModulationType: the upstream\n  modulation methodology used by the CM.")
docsDevCmtsDCCAckFailNotif = NotificationType((1, 3, 6, 1, 2, 1, 132, 3, 0, 12)).setObjects(*(("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ) )
if mibBuilder.loadTexts: docsDevCmtsDCCAckFailNotif.setDescription("A notification to report the failure of a dynamic channel\nchange acknowledgement during the dynamic channel\nchange process and is detected by the CMTS.\n\nThis notification sends additional information about\nthe event by including the following objects in its\nvarbinding list.\n- docsDevEvLevel: the priority level associated with the\n  event.\n- docsDevEvId: the unique identifier of the event that\n  occurred.\n- docsDevEvText: a textual description of the event.\n- docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n  with which this notification is associated.\n- ifPhysAddress: the MAC address of the CMTS\n  (if there is a cable card/interface in the CMTS,\n  then it is actually the MAC address of the cable\n  interface that connected to the CM) cable interface\n  connected to the CM.\n- docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n  that the reporting CM is operating in.\n- docsIfDocsisBaseCapability: the highest\n  version of the DOCSIS specification (1.0, 1.1, 2.0)\n  that the device is capable of supporting.\n- docsIfCmtsCmStatusModulationType: the upstream\n  modulation methodology used by the CM.")

# Groups

docsDevCmNotifControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 132, 4, 1, 1)).setObjects(*(("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmNotifControl"), ) )
if mibBuilder.loadTexts: docsDevCmNotifControlGroup.setDescription("This group represents objects that allow control\nover CM Notifications.")
docsDevCmNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 132, 4, 1, 2)).setObjects(*(("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmDynServAckFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmDCCRspFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmDHCPFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmDynamicSANotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmDynServRspFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmInitTLVUnknownNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmSwUpgradeSuccessNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmSwUpgradeInitNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmSwUpgradeCVCFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmDCCReqFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmDCCAckFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmDynServReqFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmTODFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmBPKMNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmSwUpgradeFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmBpiInitNotif"), ) )
if mibBuilder.loadTexts: docsDevCmNotificationGroup.setDescription("A collection of CM notifications providing device status\nand control.")
docsDevCmtsNotifControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 132, 4, 1, 3)).setObjects(*(("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsNotifControl"), ) )
if mibBuilder.loadTexts: docsDevCmtsNotifControlGroup.setDescription("This group represents objects that allow control\nover CMTS Notifications.")
docsDevCmtsNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 132, 4, 1, 4)).setObjects(*(("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsDynServRspFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsDynServAckFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsBPKMNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsDCCReqFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsDynServReqFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsInitRegAckFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsInitRegReqFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsBpiInitNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsInitRegRspFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsDynamicSANotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsDCCAckFailNotif"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsDCCRspFailNotif"), ) )
if mibBuilder.loadTexts: docsDevCmtsNotificationGroup.setDescription("A collection of CMTS notifications providing device\nstatus and control.")

# Compliances

docsDevCmNotifCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 132, 4, 2, 1)).setObjects(*(("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmNotificationGroup"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmNotifControlGroup"), ) )
if mibBuilder.loadTexts: docsDevCmNotifCompliance.setDescription("The compliance statement for CM Notifications and Control.")
docsDevCmtsNotifCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 132, 4, 2, 2)).setObjects(*(("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsNotifControlGroup"), ("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", "docsDevCmtsNotificationGroup"), ) )
if mibBuilder.loadTexts: docsDevCmtsNotifCompliance.setDescription("The compliance statement for DOCSIS CMTS Notification\nand Control.")

# Exports

# Module identity
mibBuilder.exportSymbols("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", PYSNMP_MODULE_ID=docsDevNotifMIB)

# Objects
mibBuilder.exportSymbols("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", docsDevNotifMIB=docsDevNotifMIB, docsDevNotifControl=docsDevNotifControl, docsDevCmNotifControl=docsDevCmNotifControl, docsDevCmtsNotifControl=docsDevCmtsNotifControl, docsDevCmNotifs=docsDevCmNotifs, docsDevCmtsNotifs=docsDevCmtsNotifs, docsDevNotifConformance=docsDevNotifConformance, docsDevNotifGroups=docsDevNotifGroups, docsDevNotifCompliances=docsDevNotifCompliances)

# Notifications
mibBuilder.exportSymbols("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", docsDevCmInitTLVUnknownNotif=docsDevCmInitTLVUnknownNotif, docsDevCmDynServReqFailNotif=docsDevCmDynServReqFailNotif, docsDevCmDynServRspFailNotif=docsDevCmDynServRspFailNotif, docsDevCmDynServAckFailNotif=docsDevCmDynServAckFailNotif, docsDevCmBpiInitNotif=docsDevCmBpiInitNotif, docsDevCmBPKMNotif=docsDevCmBPKMNotif, docsDevCmDynamicSANotif=docsDevCmDynamicSANotif, docsDevCmDHCPFailNotif=docsDevCmDHCPFailNotif, docsDevCmSwUpgradeInitNotif=docsDevCmSwUpgradeInitNotif, docsDevCmSwUpgradeFailNotif=docsDevCmSwUpgradeFailNotif, docsDevCmSwUpgradeSuccessNotif=docsDevCmSwUpgradeSuccessNotif, docsDevCmSwUpgradeCVCFailNotif=docsDevCmSwUpgradeCVCFailNotif, docsDevCmTODFailNotif=docsDevCmTODFailNotif, docsDevCmDCCReqFailNotif=docsDevCmDCCReqFailNotif, docsDevCmDCCRspFailNotif=docsDevCmDCCRspFailNotif, docsDevCmDCCAckFailNotif=docsDevCmDCCAckFailNotif, docsDevCmtsInitRegReqFailNotif=docsDevCmtsInitRegReqFailNotif, docsDevCmtsInitRegRspFailNotif=docsDevCmtsInitRegRspFailNotif, docsDevCmtsInitRegAckFailNotif=docsDevCmtsInitRegAckFailNotif, docsDevCmtsDynServReqFailNotif=docsDevCmtsDynServReqFailNotif, docsDevCmtsDynServRspFailNotif=docsDevCmtsDynServRspFailNotif, docsDevCmtsDynServAckFailNotif=docsDevCmtsDynServAckFailNotif, docsDevCmtsBpiInitNotif=docsDevCmtsBpiInitNotif, docsDevCmtsBPKMNotif=docsDevCmtsBPKMNotif, docsDevCmtsDynamicSANotif=docsDevCmtsDynamicSANotif, docsDevCmtsDCCReqFailNotif=docsDevCmtsDCCReqFailNotif, docsDevCmtsDCCRspFailNotif=docsDevCmtsDCCRspFailNotif, docsDevCmtsDCCAckFailNotif=docsDevCmtsDCCAckFailNotif)

# Groups
mibBuilder.exportSymbols("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", docsDevCmNotifControlGroup=docsDevCmNotifControlGroup, docsDevCmNotificationGroup=docsDevCmNotificationGroup, docsDevCmtsNotifControlGroup=docsDevCmtsNotifControlGroup, docsDevCmtsNotificationGroup=docsDevCmtsNotificationGroup)

# Compliances
mibBuilder.exportSymbols("DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB", docsDevCmNotifCompliance=docsDevCmNotifCompliance, docsDevCmtsNotifCompliance=docsDevCmtsNotifCompliance)
