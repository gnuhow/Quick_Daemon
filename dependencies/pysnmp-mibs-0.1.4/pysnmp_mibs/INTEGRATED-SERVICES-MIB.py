# PySNMP SMI module. Autogenerated from smidump -f python INTEGRATED-SERVICES-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:09 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "mib-2")
( RowStatus, TextualConvention, TestAndIncr, TimeInterval, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TestAndIncr", "TimeInterval", "TruthValue")

# Types

class BitRate(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,2147483647)
    
class BurstSize(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,2147483647)
    
class MessageSize(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,2147483647)
    
class Port(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(2,4)
    
class Protocol(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,255)
    
class QosService(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,5,)
    namedValues = NamedValues(("bestEffort", 1), ("guaranteedDelay", 2), ("controlledLoad", 5), )
    
class SessionNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,2147483647)
    
class SessionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,255)
    

# Objects

intSrv = ModuleIdentity((1, 3, 6, 1, 2, 1, 52)).setRevisions(("1995-11-03 05:00",))
if mibBuilder.loadTexts: intSrv.setOrganization("IETF Integrated Services Working Group")
if mibBuilder.loadTexts: intSrv.setContactInfo("       Fred Baker\nPostal: Cisco Systems\n        519 Lado Drive\n        Santa Barbara, California 93111\nTel:    +1 805 681 0115\nE-Mail: fred@cisco.com\n\n        John Krawczyk\nPostal: ArrowPoint Communications\n        235 Littleton Road\n        Westford, Massachusetts 01886\nTel:    +1 508 692 5875\nE-Mail: jjk@tiac.net")
if mibBuilder.loadTexts: intSrv.setDescription("The MIB module to describe the Integrated Services\nProtocol")
intSrvObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 52, 1))
intSrvIfAttribTable = MibTable((1, 3, 6, 1, 2, 1, 52, 1, 1))
if mibBuilder.loadTexts: intSrvIfAttribTable.setDescription("The reservable attributes of the system's  in-\nterfaces.")
intSrvIfAttribEntry = MibTableRow((1, 3, 6, 1, 2, 1, 52, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: intSrvIfAttribEntry.setDescription("The reservable attributes of  a  given  inter-\nface.")
intSrvIfAttribAllocatedBits = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 1, 1, 1), BitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSrvIfAttribAllocatedBits.setDescription("The number of bits/second currently  allocated\nto reserved sessions on the interface.")
intSrvIfAttribMaxAllocatedBits = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 1, 1, 2), BitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvIfAttribMaxAllocatedBits.setDescription("The maximum number of bits/second that may  be\nallocated  to  reserved  sessions on the inter-\nface.")
intSrvIfAttribAllocatedBuffer = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 1, 1, 3), BurstSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSrvIfAttribAllocatedBuffer.setDescription("The amount of buffer space  required  to  hold\nthe simultaneous burst of all reserved flows on\nthe interface.")
intSrvIfAttribFlows = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSrvIfAttribFlows.setDescription("The number of reserved flows currently  active\non  this  interface.  A flow can be created ei-\nther from a reservation protocol (such as  RSVP\nor ST-II) or via configuration information.")
intSrvIfAttribPropagationDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 1, 1, 5), Integer32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvIfAttribPropagationDelay.setDescription("The amount of propagation delay that this  in-\nterface  introduces  in addition to that intro-\ndiced by bit propagation delays.")
intSrvIfAttribStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvIfAttribStatus.setDescription("'active' on interfaces that are configured for\nRSVP.")
intSrvFlowTable = MibTable((1, 3, 6, 1, 2, 1, 52, 1, 2))
if mibBuilder.loadTexts: intSrvFlowTable.setDescription("Information describing the reserved flows  us-\ning the system's interfaces.")
intSrvFlowEntry = MibTableRow((1, 3, 6, 1, 2, 1, 52, 1, 2, 1)).setIndexNames((0, "INTEGRATED-SERVICES-MIB", "intSrvFlowNumber"))
if mibBuilder.loadTexts: intSrvFlowEntry.setDescription("Information describing the use of a given  in-\nterface   by   a   given   flow.   The  counter\nintSrvFlowPoliced starts counting  at  the  in-\nstallation of the flow.")
intSrvFlowNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 1), SessionNumber()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: intSrvFlowNumber.setDescription("The number of this flow.  This is for SNMP In-\ndexing purposes only and has no relation to any\nprotocol value.")
intSrvFlowType = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 2), SessionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowType.setDescription("The type of session (IP4, IP6, IP6  with  flow\ninformation, etc).")
intSrvFlowOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("other", 1), ("rsvp", 2), ("management", 3), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowOwner.setDescription("The process that installed this  flow  in  the\nqueue policy database.")
intSrvFlowDestAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowDestAddr.setDescription("The destination address used by all senders in\nthis  session.   This object may not be changed\nwhen the value of the RowStatus object is  'ac-\ntive'.")
intSrvFlowSenderAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowSenderAddr.setDescription("The source address of the sender  selected  by\nthis  reservation.  The value of all zeroes in-\ndicates 'all senders'.  This object may not  be\nchanged  when the value of the RowStatus object\nis 'active'.")
intSrvFlowDestAddrLength = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowDestAddrLength.setDescription("The length of the destination address in bits.\nThis  is  the CIDR Prefix Length, which for IP4\nhosts and multicast addresses is 32 bits.  This\nobject may not be changed when the value of the\nRowStatus object is 'active'.")
intSrvFlowSenderAddrLength = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowSenderAddrLength.setDescription("The length of the sender's  address  in  bits.\nThis  is  the CIDR Prefix Length, which for IP4\nhosts and multicast addresses is 32 bits.  This\nobject may not be changed when the value of the\nRowStatus object is 'active'.")
intSrvFlowProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 8), Protocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowProtocol.setDescription("The IP Protocol used by a session.   This  ob-\nject  may  not be changed when the value of the\nRowStatus object is 'active'.")
intSrvFlowDestPort = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 9), Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowDestPort.setDescription("The UDP or TCP port number used as a  destina-\ntion  port for all senders in this session.  If\nthe  IP   protocol   in   use,   specified   by\nintSrvResvFwdProtocol,  is 50 (ESP) or 51 (AH),\nthis  represents  a  virtual  destination  port\nnumber.   A value of zero indicates that the IP\nprotocol in use does not have ports.  This  ob-\nject  may  not be changed when the value of the\nRowStatus object is 'active'.")
intSrvFlowPort = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 10), Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowPort.setDescription("The UDP or TCP port number used  as  a  source\nport  for  this sender in this session.  If the\nIP    protocol    in    use,    specified    by\nintSrvResvFwdProtocol  is  50 (ESP) or 51 (AH),\nthis represents a generalized  port  identifier\n(GPI).   A  value of zero indicates that the IP\nprotocol in use does not have ports.  This  ob-\nject  may  not be changed when the value of the\nRowStatus object is 'active'.")
intSrvFlowFlowId = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSrvFlowFlowId.setDescription("The flow ID that  this  sender  is  using,  if\nthis  is  an IPv6 session.")
intSrvFlowInterface = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 12), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowInterface.setDescription("The ifIndex value of the  interface  on  which\nthis reservation exists.")
intSrvFlowIfAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowIfAddr.setDescription("The IP Address on the ifEntry  on  which  this\nreservation  exists.  This is present primarily\nto support those interfaces which layer  multi-\nple IP Addresses on the interface.")
intSrvFlowRate = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 14), BitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowRate.setDescription("The Reserved Rate of the sender's data stream.\nIf this is a Controlled Load service flow, this\nrate is derived from the Tspec  rate  parameter\n(r).   If  this  is  a Guaranteed service flow,\nthis rate is derived from  the  Rspec  clearing\nrate parameter (R).")
intSrvFlowBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 15), BurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowBurst.setDescription("The size of the largest  burst  expected  from\nthe sender at a time.\n\nIf this is less than  the  sender's  advertised\nburst  size, the receiver is asking the network\nto provide flow pacing  beyond  what  would  be\nprovided  under normal circumstances. Such pac-\ning is at the network's option.")
intSrvFlowWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowWeight.setDescription("The weight used  to  prioritize  the  traffic.\nNote  that the interpretation of this object is\nimplementation-specific,   as   implementations\nvary in their use of weighting procedures.")
intSrvFlowQueue = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowQueue.setDescription("The number of the queue used by this  traffic.\nNote  that the interpretation of this object is\nimplementation-specific,   as   implementations\nvary in their use of queue identifiers.")
intSrvFlowMinTU = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 18), MessageSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowMinTU.setDescription("The minimum message size for  this  flow.  The\npolicing  algorithm will treat smaller messages\nas though they are this size.")
intSrvFlowMaxTU = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 19), MessageSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowMaxTU.setDescription("The maximum datagram size for this  flow  that\nwill conform to the traffic specification. This\nvalue cannot exceed the MTU of the interface.")
intSrvFlowBestEffort = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSrvFlowBestEffort.setDescription("The number of packets that  were  remanded  to\nbest effort service.")
intSrvFlowPoliced = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSrvFlowPoliced.setDescription("The number of packets policed since the incep-\ntion of the flow's service.")
intSrvFlowDiscard = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowDiscard.setDescription("If 'true', the flow  is  to  incur  loss  when\ntraffic is policed.  If 'false', policed traff-\nic is treated as best effort traffic.")
intSrvFlowService = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 23), QosService()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intSrvFlowService.setDescription("The QoS service being applied to this flow.")
intSrvFlowOrder = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowOrder.setDescription("In the event of ambiguity, the order in  which\nthe  classifier  should  make  its comparisons.\nThe row with intSrvFlowOrder=0 is tried  first,\nand  comparisons  proceed  in  the order of in-\ncreasing value.  Non-serial implementations  of\nthe classifier should emulate this behavior.")
intSrvFlowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 1, 2, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvFlowStatus.setDescription("'active' for all active  flows.   This  object\nmay be used to install static classifier infor-\nmation, delete classifier information,  or  au-\nthorize such.")
intSrvGenObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 52, 2))
intSrvFlowNewIndex = MibScalar((1, 3, 6, 1, 2, 1, 52, 2, 1), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intSrvFlowNewIndex.setDescription("This  object  is  used  to  assign  values  to\nintSrvFlowNumber  as described in 'Textual Con-\nventions  for  SNMPv2'.   The  network  manager\nreads  the  object,  and  then writes the value\nback in the SET that creates a new instance  of\nintSrvFlowEntry.   If  the  SET  fails with the\ncode 'inconsistentValue', then the process must\nbe  repeated; If the SET succeeds, then the ob-\nject is incremented, and the  new  instance  is\ncreated according to the manager's directions.")
intSrvNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 52, 3))
intSrvConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 52, 4))
intSrvGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 52, 4, 1))
intSrvCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 52, 4, 2))

# Augmentions

# Groups

intSrvIfAttribGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 52, 4, 1, 1)).setObjects(*(("INTEGRATED-SERVICES-MIB", "intSrvIfAttribAllocatedBuffer"), ("INTEGRATED-SERVICES-MIB", "intSrvIfAttribStatus"), ("INTEGRATED-SERVICES-MIB", "intSrvIfAttribPropagationDelay"), ("INTEGRATED-SERVICES-MIB", "intSrvIfAttribAllocatedBits"), ("INTEGRATED-SERVICES-MIB", "intSrvIfAttribMaxAllocatedBits"), ("INTEGRATED-SERVICES-MIB", "intSrvIfAttribFlows"), ) )
if mibBuilder.loadTexts: intSrvIfAttribGroup.setDescription("These objects are required  for  Systems  sup-\nporting the Integrated Services Architecture.")
intSrvFlowsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 52, 4, 1, 2)).setObjects(*(("INTEGRATED-SERVICES-MIB", "intSrvFlowSenderAddr"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowPoliced"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowIfAddr"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowWeight"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowOwner"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowService"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowType"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowDestAddr"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowSenderAddrLength"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowOrder"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowProtocol"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowInterface"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowBurst"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowQueue"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowRate"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowPort"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowDestAddrLength"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowMinTU"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowDestPort"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowBestEffort"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowStatus"), ("INTEGRATED-SERVICES-MIB", "intSrvFlowDiscard"), ) )
if mibBuilder.loadTexts: intSrvFlowsGroup.setDescription("These objects are required  for  Systems  sup-\nporting the Integrated Services Architecture.")

# Compliances

intSrvCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 52, 4, 2, 1)).setObjects(*(("INTEGRATED-SERVICES-MIB", "intSrvFlowsGroup"), ("INTEGRATED-SERVICES-MIB", "intSrvIfAttribGroup"), ) )
if mibBuilder.loadTexts: intSrvCompliance.setDescription("The compliance statement ")

# Exports

# Module identity
mibBuilder.exportSymbols("INTEGRATED-SERVICES-MIB", PYSNMP_MODULE_ID=intSrv)

# Types
mibBuilder.exportSymbols("INTEGRATED-SERVICES-MIB", BitRate=BitRate, BurstSize=BurstSize, MessageSize=MessageSize, Port=Port, Protocol=Protocol, QosService=QosService, SessionNumber=SessionNumber, SessionType=SessionType)

# Objects
mibBuilder.exportSymbols("INTEGRATED-SERVICES-MIB", intSrv=intSrv, intSrvObjects=intSrvObjects, intSrvIfAttribTable=intSrvIfAttribTable, intSrvIfAttribEntry=intSrvIfAttribEntry, intSrvIfAttribAllocatedBits=intSrvIfAttribAllocatedBits, intSrvIfAttribMaxAllocatedBits=intSrvIfAttribMaxAllocatedBits, intSrvIfAttribAllocatedBuffer=intSrvIfAttribAllocatedBuffer, intSrvIfAttribFlows=intSrvIfAttribFlows, intSrvIfAttribPropagationDelay=intSrvIfAttribPropagationDelay, intSrvIfAttribStatus=intSrvIfAttribStatus, intSrvFlowTable=intSrvFlowTable, intSrvFlowEntry=intSrvFlowEntry, intSrvFlowNumber=intSrvFlowNumber, intSrvFlowType=intSrvFlowType, intSrvFlowOwner=intSrvFlowOwner, intSrvFlowDestAddr=intSrvFlowDestAddr, intSrvFlowSenderAddr=intSrvFlowSenderAddr, intSrvFlowDestAddrLength=intSrvFlowDestAddrLength, intSrvFlowSenderAddrLength=intSrvFlowSenderAddrLength, intSrvFlowProtocol=intSrvFlowProtocol, intSrvFlowDestPort=intSrvFlowDestPort, intSrvFlowPort=intSrvFlowPort, intSrvFlowFlowId=intSrvFlowFlowId, intSrvFlowInterface=intSrvFlowInterface, intSrvFlowIfAddr=intSrvFlowIfAddr, intSrvFlowRate=intSrvFlowRate, intSrvFlowBurst=intSrvFlowBurst, intSrvFlowWeight=intSrvFlowWeight, intSrvFlowQueue=intSrvFlowQueue, intSrvFlowMinTU=intSrvFlowMinTU, intSrvFlowMaxTU=intSrvFlowMaxTU, intSrvFlowBestEffort=intSrvFlowBestEffort, intSrvFlowPoliced=intSrvFlowPoliced, intSrvFlowDiscard=intSrvFlowDiscard, intSrvFlowService=intSrvFlowService, intSrvFlowOrder=intSrvFlowOrder, intSrvFlowStatus=intSrvFlowStatus, intSrvGenObjects=intSrvGenObjects, intSrvFlowNewIndex=intSrvFlowNewIndex, intSrvNotifications=intSrvNotifications, intSrvConformance=intSrvConformance, intSrvGroups=intSrvGroups, intSrvCompliances=intSrvCompliances)

# Groups
mibBuilder.exportSymbols("INTEGRATED-SERVICES-MIB", intSrvIfAttribGroup=intSrvIfAttribGroup, intSrvFlowsGroup=intSrvFlowsGroup)

# Compliances
mibBuilder.exportSymbols("INTEGRATED-SERVICES-MIB", intSrvCompliance=intSrvCompliance)
