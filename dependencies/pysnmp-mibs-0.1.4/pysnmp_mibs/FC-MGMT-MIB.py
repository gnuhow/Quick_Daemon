# PySNMP SMI module. Autogenerated from smidump -f python FC-MGMT-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:38:58 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Counter64, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, transmission, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "transmission")
( TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue")

# Types

class FcAddressIdOrZero(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(3,3),)
    
class FcBbCredit(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,32767)
    
class FcBbCreditModel(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("regular", 1), ("alternate", 2), )
    
class FcClasses(Bits):
    namedValues = NamedValues(("classF", 0), ("class1", 1), ("class2", 2), ("class3", 3), ("class4", 4), ("class5", 5), ("class6", 6), )
    
class FcDataFieldSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(128,2112)
    
class FcDomainIdOrZero(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,239)
    
class FcNameIdOrZero(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(8,8),ValueSizeConstraint(16,16),)
    
class FcPortType(Unsigned32):
    pass

class FcUnitFunctions(Bits):
    namedValues = NamedValues(("other", 0), ("hub", 1), ("storageDevice", 10), ("switch", 2), ("bridge", 3), ("gateway", 4), ("host", 5), ("storageSubsys", 6), ("storageAccessDev", 7), ("nas", 8), ("wdmux", 9), )
    

# Objects

fcMgmtMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 56)).setRevisions(("2005-04-26 00:00",))
if mibBuilder.loadTexts: fcMgmtMIB.setOrganization("IETF IPS (IP-Storage) Working Group")
if mibBuilder.loadTexts: fcMgmtMIB.setContactInfo("        Keith McCloghrie\nCisco Systems, Inc.\nTel: +1 408 526-5260\nE-mail: kzm@cisco.com\nPostal: 170 West Tasman Drive\nSan Jose, CA USA 95134")
if mibBuilder.loadTexts: fcMgmtMIB.setDescription("This module defines management information specific to\nFibre Channel-attached devices.\n\n\n\n\nCopyright (C) The Internet Society (2005).  This version\nof this MIB module is part of RFC 4044;  see the RFC\nitself for full legal notices.")
fcmgmtObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 56, 1))
fcmInstanceTable = MibTable((1, 3, 6, 1, 2, 1, 10, 56, 1, 1))
if mibBuilder.loadTexts: fcmInstanceTable.setDescription("Information about the local Fibre Channel management\ninstances.")
fcmInstanceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 56, 1, 1, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"))
if mibBuilder.loadTexts: fcmInstanceEntry.setDescription("A list of attributes for a particular local Fibre Channel\nmanagement instance.")
fcmInstanceIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: fcmInstanceIndex.setDescription("An arbitrary integer value that uniquely identifies this\ninstance amongst all local Fibre Channel management\ninstances.\n\nIt is mandatory to keep this value constant between restarts\nof the agent, and to make every possible effort to keep it\nconstant across restarts (but note, it is unrealistic to\nexpect it to remain constant across all re-configurations of\nthe local system, e.g., across the replacement of all non-\nvolatile storage).")
fcmInstanceWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 1, 1, 2), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmInstanceWwn.setDescription("If the instance has one (or more) WWN(s), then this object\ncontains that (or one of those) WWN(s).\n\nIf the instance does not have a WWN associated with it, then\nthis object contains the zero-length string.")
fcmInstanceFunctions = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 1, 1, 3), FcUnitFunctions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmInstanceFunctions.setDescription("One (or more) Fibre Channel unit functions being performed\nby this instance.")
fcmInstancePhysicalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmInstancePhysicalIndex.setDescription("If this management instance corresponds to a physical\ncomponent (or to a hierarchy of physical components)\nidentified by the Entity-MIB, then this object's value is\nthe value of the entPhysicalIndex of that component (or of\nthe component at the root of that hierarchy).  If there is\n\n\n\nno correspondence to a physical component (or no component\nthat has an entPhysicalIndex value), then the value of this\nobject is zero.")
fcmInstanceSoftwareIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmInstanceSoftwareIndex.setDescription("If this management instance corresponds to an installed\nsoftware module identified in the Host Resources MIB, then\nthis object's value is the value of the hrSWInstalledIndex\nof that module.  If there is no correspondence to an\ninstalled software module (or no module that has a\nhrSWInstalledIndex value), then the value of this object is\nzero.")
fcmInstanceStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("failed", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmInstanceStatus.setDescription("Overall status of the Fibre Channel entity/entities managed\nby this management instance.  The value should reflect the\nmost serious status of such entities.")
fcmInstanceTextName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmInstanceTextName.setDescription("A textual name for this management instance and the Fibre\nChannel entity/entities that it is managing.")
fcmInstanceDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 1, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmInstanceDescr.setDescription("A textual description of this management instance and the\nFibre Channel entity/entities that it is managing.")
fcmInstanceFabricId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 1, 1, 9), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmInstanceFabricId.setDescription("The globally unique Fabric Identifier that identifies the\nfabric to which the Fibre Channel entity/entities managed by\nthis management instance are connected, or, of which they\nare a part.  This is typically the Node WWN of the principal\nswitch of a Fibre Channel fabric.  The zero-length string\nindicates that the fabric identifier is unknown (or not\napplicable).\n\nIn the event that the Fibre Channel entity/entities managed\nby this management instance is/are connected to multiple\nfabrics, then this object records the first (known) one.")
fcmSwitchTable = MibTable((1, 3, 6, 1, 2, 1, 10, 56, 1, 2))
if mibBuilder.loadTexts: fcmSwitchTable.setDescription("A table of information about Fibre Channel switches that\nare managed by Fibre Channel management instances.  Each\nFibre Channel management instance can manage one or more\nFibre Channel switches.")
fcmSwitchEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 56, 1, 2, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"))
if mibBuilder.loadTexts: fcmSwitchEntry.setDescription("Information about a particular Fibre Channel switch that is\n\n\n\nmanaged by the management instance given by\nfcmInstanceIndex.")
fcmSwitchIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: fcmSwitchIndex.setDescription("An arbitrary integer that uniquely identifies a Fibre\nChannel switch amongst those managed by one Fibre Channel\nmanagement instance.\n\nIt is mandatory to keep this value constant between restarts\nof the agent, and to make every possible effort to keep it\nconstant across restarts.")
fcmSwitchDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 2, 1, 2), FcDomainIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmSwitchDomainId.setDescription("The Domain Id of this switch.  A value of zero indicates\nthat a switch has not (yet) been assigned a Domain Id.")
fcmSwitchPrincipal = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmSwitchPrincipal.setDescription("An indication of whether this switch is the principal\nswitch within its fabric.")
fcmSwitchWWN = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 2, 1, 4), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmSwitchWWN.setDescription("The World Wide Name of this switch.")
fcmPortTable = MibTable((1, 3, 6, 1, 2, 1, 10, 56, 1, 3))
if mibBuilder.loadTexts: fcmPortTable.setDescription("Information about Fibre Channel ports.  Each Fibre Channel\nport is represented by one entry in the IF-MIB's ifTable.")
fcmPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcmPortEntry.setDescription("Each entry contains information about a specific port.")
fcmPortInstanceIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortInstanceIndex.setDescription("The value of fcmInstanceIndex by which the Fibre Channel\nmanagement instance, which manages this port, is identified\nin the fcmInstanceTable.")
fcmPortWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 2), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortWwn.setDescription("The World Wide Name of the port, or the zero-length string\nif the port does not have a WWN.")
fcmPortNodeWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 3), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortNodeWwn.setDescription("The World Wide Name of the Node that contains this port, or\nthe zero-length string if the port does not have a node\nWWN.")
fcmPortAdminType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 4), FcPortType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmPortAdminType.setDescription("The administratively desired type of this port.")
fcmPortOperType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 5), FcPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortOperType.setDescription("The current operational type of this port.")
fcmPortFcCapClass = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 6), FcClasses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortFcCapClass.setDescription("The classes of service capability of this port.")
fcmPortFcOperClass = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 7), FcClasses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortFcOperClass.setDescription("The classes of service that are currently operational on\nthis port.  For an FL_Port, this is the union of the classes\nbeing supported across all attached NL_Ports.")
fcmPortTransmitterType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(5,1,2,6,4,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("other", 2), ("shortwave850nm", 3), ("longwave1550nm", 4), ("longwave1310nm", 5), ("electrical", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortTransmitterType.setDescription("The technology of the port transceiver.")
fcmPortConnectorType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(3,9,2,5,4,6,1,8,7,)).subtype(namedValues=NamedValues(("unknown", 1), ("other", 2), ("gbic", 3), ("embedded", 4), ("glm", 5), ("gbicSerialId", 6), ("gbicNoSerialId", 7), ("sfpSerialId", 8), ("sfpNoSerialId", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortConnectorType.setDescription("The module type of the port connector.  This object refers\nto the hardware implementation of the port.  It will be\n'embedded' if the hardware equivalent to Gigabit interface\ncard (GBIC) is part of the line card and is unremovable.  It\nwill be 'glm' if it's a gigabit link module (GLM).  It will\nbe 'gbicSerialId' if the GBIC serial id can be read, else it\nwill be 'gbicNoSerialId'.  It will be 'sfpSerialId' if the\nsmall form factor (SFP) pluggable GBICs serial id can be\nread, else it will be 'sfpNoSerialId'.")
fcmPortSerialNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortSerialNumber.setDescription("The serial number associated with the port (e.g., for a\nGBIC).  If not applicable, the object's value is a zero-\nlength string.")
fcmPortPhysicalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortPhysicalNumber.setDescription("This is the port's 'Physical Port Number' as defined by\nGS-3.")
fcmPortAdminSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,1,2,8,4,6,7,)).subtype(namedValues=NamedValues(("auto", 1), ("eighthGbs", 2), ("quarterGbs", 3), ("halfGbs", 4), ("oneGbs", 5), ("twoGbs", 6), ("fourGbs", 7), ("tenGbs", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmPortAdminSpeed.setDescription("The speed of the interface:\n\n'auto'        - auto-negotiation\n'tenGbs'      - 10Gbs\n'fourGbs'     -  4Gbs\n'twoGbs'      -  2Gbs\n'oneGbs'      -  1Gbs\n'halfGbs'     - 500Mbs\n'quarterGbs'  - 250Mbs\n'eighthGbs'   - 125Mbs")
fcmPortCapProtocols = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 13), Bits().subtype(namedValues=NamedValues(("unknown", 0), ("loop", 1), ("fabric", 2), ("scsi", 3), ("tcpIp", 4), ("vi", 5), ("ficon", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortCapProtocols.setDescription("A bit mask specifying the higher level protocols that are\ncapable of running over this port.  Note that for generic\nFx_Ports, E_Ports, and B_Ports, this object will indicate\nall protocols.")
fcmPortOperProtocols = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 3, 1, 14), Bits().subtype(namedValues=NamedValues(("unknown", 0), ("loop", 1), ("fabric", 2), ("scsi", 3), ("tcpIp", 4), ("vi", 5), ("ficon", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortOperProtocols.setDescription("A bit mask specifying the higher level protocols that are\ncurrently operational on this port.  For Fx_Ports, E_Ports,\nand B_Ports, this object will typically have the value\n'unknown'.")
fcmPortStatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 56, 1, 4))
if mibBuilder.loadTexts: fcmPortStatsTable.setDescription("A list of statistics for Fibre Channel ports.")
fcmPortStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1))
if mibBuilder.loadTexts: fcmPortStatsEntry.setDescription("An entry containing statistics for a Fibre Channel port.\nIf any counter in this table suffers a discontinuity, the\nvalue of ifCounterDiscontinuityTime (defined in the IF-MIB)\nmust be updated.")
fcmPortBBCreditZeros = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortBBCreditZeros.setDescription("The number of transitions in/out of the buffer-to-buffer\ncredit zero state.  The other side is not providing any\ncredit.")
fcmPortFullInputBuffers = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortFullInputBuffers.setDescription("The number of occurrences when all input buffers of a port\nwere full and outbound buffer-to-buffer credit transitioned\nto zero, i.e., there became no credit to provide to other\nside.")
fcmPortClass2RxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2RxFrames.setDescription("The number of Class 2 frames received at this port.")
fcmPortClass2RxOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2RxOctets.setDescription("The number of octets contained in Class 2 frames received\nat this port.")
fcmPortClass2TxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2TxFrames.setDescription("The number of Class 2 frames transmitted out of this port.")
fcmPortClass2TxOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2TxOctets.setDescription("The number of octets contained in Class 2 frames\ntransmitted out of this port.")
fcmPortClass2Discards = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2Discards.setDescription("The number of Class 2 frames that were discarded upon\nreception at this port.")
fcmPortClass2RxFbsyFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2RxFbsyFrames.setDescription("The number of times that F_BSY was returned to this port as\na result of a Class 2 frame that could not be delivered to\nthe other end of the link.  This can occur when either the\nfabric or the destination port is temporarily busy.  Note\nthat this counter will never increment for an F_Port.")
fcmPortClass2RxPbsyFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2RxPbsyFrames.setDescription("The number of times that P_BSY was returned to this port as\na result of a Class 2 frame that could not be delivered to\nthe other end of the link.  This can occur when the\n\n\n\ndestination port is temporarily busy.")
fcmPortClass2RxFrjtFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2RxFrjtFrames.setDescription("The number of times that F_RJT was returned to this port as\na result of a Class 2 frame that was rejected by the fabric.\nNote that this counter will never increment for an F_Port.")
fcmPortClass2RxPrjtFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2RxPrjtFrames.setDescription("The number of times that P_RJT was returned to this port as\na result of a Class 2 frame that was rejected at the\ndestination N_Port.")
fcmPortClass2TxFbsyFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2TxFbsyFrames.setDescription("The number of times that F_BSY was generated by this port\nas a result of a Class 2 frame that could not be delivered\nbecause either the Fabric or the destination port was\ntemporarily busy.  Note that this counter will never\nincrement for an N_Port.")
fcmPortClass2TxPbsyFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2TxPbsyFrames.setDescription("The number of times that P_BSY was generated by this port\nas a result of a Class 2 frame that could not be delivered\nbecause the destination port was temporarily busy.  Note\nthat this counter will never increment for an F_Port.")
fcmPortClass2TxFrjtFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2TxFrjtFrames.setDescription("The number of times that F_RJT was generated by this port\nas a result of a Class 2 frame being rejected by the fabric.\nNote that this counter will never increment for an N_Port.")
fcmPortClass2TxPrjtFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass2TxPrjtFrames.setDescription("The number of times that P_RJT was generated by this port\nas a result of a Class 2 frame being rejected at the\ndestination N_Port.  Note that this counter will never\nincrement for an F_Port.")
fcmPortClass3RxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass3RxFrames.setDescription("The number of Class 3 frames received at this port.")
fcmPortClass3RxOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass3RxOctets.setDescription("The number of octets contained in Class 3 frames received\nat this port.")
fcmPortClass3TxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass3TxFrames.setDescription("The number of Class 3 frames transmitted out of this port.")
fcmPortClass3TxOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass3TxOctets.setDescription("The number of octets contained in Class 3 frames\ntransmitted out of this port.")
fcmPortClass3Discards = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClass3Discards.setDescription("The number of Class 3 frames that were discarded upon\nreception at this port.")
fcmPortClassFRxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClassFRxFrames.setDescription("The number of Class F frames received at this port.")
fcmPortClassFRxOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClassFRxOctets.setDescription("The number of octets contained in Class F frames received\nat this port.")
fcmPortClassFTxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClassFTxFrames.setDescription("The number of Class F frames transmitted out of this port.")
fcmPortClassFTxOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClassFTxOctets.setDescription("The number of octets contained in Class F frames\ntransmitted out of this port.")
fcmPortClassFDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortClassFDiscards.setDescription("The number of Class F frames that were discarded upon\nreception at this port.")
fcmPortLcStatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 56, 1, 5))
if mibBuilder.loadTexts: fcmPortLcStatsTable.setDescription("A list of Counter32-based statistics for systems that do\nnot support Counter64.")
fcmPortLcStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1))
if mibBuilder.loadTexts: fcmPortLcStatsEntry.setDescription("An entry containing low-capacity (i.e., based on Counter32)\nstatistics for a Fibre Channel port.  If any counter in this\ntable suffers a discontinuity, the value of\nifCounterDiscontinuityTime (defined in the IF-MIB) must be\nupdated.")
fcmPortLcBBCreditZeros = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcBBCreditZeros.setDescription("The number of transitions in/out of the buffer-to-buffer\ncredit zero state.  The other side is not providing any\ncredit.")
fcmPortLcFullInputBuffers = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcFullInputBuffers.setDescription("The number of occurrences when all input buffers of a port\nwere full and outbound buffer-to-buffer credit transitioned\nto zero, i.e., there became no credit to provide to other\nside.")
fcmPortLcClass2RxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2RxFrames.setDescription("The number of Class 2 frames received at this port.")
fcmPortLcClass2RxOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2RxOctets.setDescription("The number of octets contained in Class 2 frames received\nat this port.")
fcmPortLcClass2TxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2TxFrames.setDescription("The number of Class 2 frames transmitted out of this port.")
fcmPortLcClass2TxOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2TxOctets.setDescription("The number of octets contained in Class 2 frames\ntransmitted out of this port.")
fcmPortLcClass2Discards = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2Discards.setDescription("The number of Class 2 frames that were discarded upon\nreception at this port.")
fcmPortLcClass2RxFbsyFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2RxFbsyFrames.setDescription("The number of times that F_BSY was returned to this port as\na result of a Class 2 frame that could not be delivered to\nthe other end of the link.  This can occur when either the\nfabric or the destination port is temporarily busy.  Note\nthat this counter will never increment for an F_Port.")
fcmPortLcClass2RxPbsyFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2RxPbsyFrames.setDescription("The number of times that P_BSY was returned to this port as\na result of a Class 2 frame that could not be delivered to\nthe other end of the link.  This can occur when the\ndestination port is temporarily busy.")
fcmPortLcClass2RxFrjtFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2RxFrjtFrames.setDescription("The number of times that F_RJT was returned to this port as\na result of a Class 2 frame that was rejected by the fabric.\nNote that this counter will never increment for an F_Port.")
fcmPortLcClass2RxPrjtFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2RxPrjtFrames.setDescription("The number of times that P_RJT was returned to this port as\na result of a Class 2 frame that was rejected at the\ndestination N_Port.")
fcmPortLcClass2TxFbsyFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2TxFbsyFrames.setDescription("The number of times that F_BSY was generated by this port\nas a result of a Class 2 frame that could not be delivered\nbecause either the Fabric or the destination port was\ntemporarily busy.  Note that this counter will never\nincrement for an N_Port.")
fcmPortLcClass2TxPbsyFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2TxPbsyFrames.setDescription("The number of times that P_BSY was generated by this port\nas a result of a Class 2 frame that could not be delivered\nbecause the destination port was temporarily busy.  Note\nthat this counter will never increment for an F_Port.")
fcmPortLcClass2TxFrjtFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2TxFrjtFrames.setDescription("The number of times that F_RJT was generated by this port\nas a result of a Class 2 frame being rejected by the fabric.\nNote that this counter will never increment for an N_Port.")
fcmPortLcClass2TxPrjtFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass2TxPrjtFrames.setDescription("The number of times that P_RJT was generated by this port\nas a result of a Class 2 frame being rejected at the\ndestination N_Port.  Note that this counter will never\nincrement for an F_Port.")
fcmPortLcClass3RxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass3RxFrames.setDescription("The number of Class 3 frames received at this port.")
fcmPortLcClass3RxOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass3RxOctets.setDescription("The number of octets contained in Class 3 frames received\nat this port.")
fcmPortLcClass3TxFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass3TxFrames.setDescription("The number of Class 3 frames transmitted out of this port.")
fcmPortLcClass3TxOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass3TxOctets.setDescription("The number of octets contained in Class 3 frames\ntransmitted out of this port.")
fcmPortLcClass3Discards = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLcClass3Discards.setDescription("The number of Class 3 frames that were discarded upon\nreception at this port.")
fcmPortErrorsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 56, 1, 6))
if mibBuilder.loadTexts: fcmPortErrorsTable.setDescription("Error counters for Fibre Channel ports.")
fcmPortErrorsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1))
if mibBuilder.loadTexts: fcmPortErrorsEntry.setDescription("Error counters for a Fibre Channel port.  If any counter in\nthis table suffers a discontinuity, the value of\nifCounterDiscontinuityTime (defined in the IF-MIB) must be\nupdated.")
fcmPortRxLinkResets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortRxLinkResets.setDescription("The number of Link Reset (LR) Primitive Sequences\nreceived.")
fcmPortTxLinkResets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortTxLinkResets.setDescription("The number of Link Reset (LR) Primitive Sequences\ntransmitted.")
fcmPortLinkResets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLinkResets.setDescription("The number of times the reset link protocol was initiated\non this port.  This includes the number of Loop\nInitialization Primitive (LIP) events on an arbitrated loop\nport.")
fcmPortRxOfflineSequences = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortRxOfflineSequences.setDescription("The number of Offline (OLS) Primitive Sequences received at\nthis port.")
fcmPortTxOfflineSequences = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortTxOfflineSequences.setDescription("The number of Offline (OLS) Primitive Sequences transmitted\nby this port.")
fcmPortLinkFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLinkFailures.setDescription("The number of link failures.  This count is part of FC-PH's\nLink Error Status Block (LESB).")
fcmPortLossofSynchs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLossofSynchs.setDescription("The number of instances of synchronization loss detected at\nthis port.  This count is part of FC-PH's Link Error Status\nBlock (LESB).")
fcmPortLossofSignals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortLossofSignals.setDescription("The number of instances of signal loss detected at this\nport.  This count is part of FC-PH's Link Error Status Block\n(LESB).")
fcmPortPrimSeqProtocolErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortPrimSeqProtocolErrors.setDescription("The number of primitive sequence protocol errors detected\nat this port.  This count is part of FC-PH's Link Error\nStatus Block (LESB).")
fcmPortInvalidTxWords = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortInvalidTxWords.setDescription("The number of invalid transmission words received at this\nport.  This count is part of FC-PH's Link Error Status Block\n(LESB).")
fcmPortInvalidCRCs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortInvalidCRCs.setDescription("The number of frames received with an invalid CRC.  This\ncount is part of FC-PH's Link Error Status Block (LESB).")
fcmPortInvalidOrderedSets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortInvalidOrderedSets.setDescription("The number of invalid ordered sets received at this port.")
fcmPortFrameTooLongs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortFrameTooLongs.setDescription("The number of frames received at this port for which the\nframe length was greater than what was agreed to in\nFLOGI/PLOGI.  This could be caused by losing the end of\nframe delimiter.")
fcmPortTruncatedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortTruncatedFrames.setDescription("The number of frames received at this port for which the\n\n\n\nframe length was less than the minimum indicated by the\nframe header - normally 24 bytes, but it could be more if\nthe DFCTL field indicates an optional header should have\nbeen present.")
fcmPortAddressErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortAddressErrors.setDescription("The number of frames received with unknown addressing; for\nexample, an unknown SID or DID.")
fcmPortDelimiterErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortDelimiterErrors.setDescription("The number of invalid frame delimiters received at this\nport.  An example is a frame with a class 2 start and a\nclass 3 at the end.")
fcmPortEncodingDisparityErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortEncodingDisparityErrors.setDescription("The number of encoding disparity errors received at this\nport.")
fcmPortOtherErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmPortOtherErrors.setDescription("The number of errors that were detected on this port but\nnot counted by any other error counter in this row.")
fcmFxPortTable = MibTable((1, 3, 6, 1, 2, 1, 10, 56, 1, 7))
if mibBuilder.loadTexts: fcmFxPortTable.setDescription("Additional information about Fibre Channel ports that is\nspecific to Fx_Ports.  This table will contain one entry for\neach fcmPortTable entry that represents an Fx_Port.")
fcmFxPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcmFxPortEntry.setDescription("Each entry contains information about a specific Fx_Port.")
fcmFxPortRatov = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFxPortRatov.setDescription("The Resource_Allocation_Timeout Value configured for this\nFx_Port.  This is used as the timeout value for determining\nwhen to reuse an Nx_Port resource such as a\n\n\n\nRecovery_Qualifier.  It represents the Error_Detect_Timeout\nvalue (see fcmFxPortEdtov) plus twice the maximum time that\na frame may be delayed within the Fabric and still be\ndelivered.")
fcmFxPortEdtov = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFxPortEdtov.setDescription("The Error_Detect_Timeout value configured for this Fx_Port.\nThis is used as the timeout value for detecting an error\ncondition.")
fcmFxPortRttov = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFxPortRttov.setDescription("The Receiver_Transmitter_Timeout value of this Fx_Port.\nThis is used by the receiver logic to detect a Loss of\nSynchronization.")
fcmFxPortHoldTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFxPortHoldTime.setDescription("The maximum time that this Fx_Port shall hold a frame\nbefore discarding the frame if it is unable to deliver the\nframe.  The value 0 means that this Fx_Port does not support\nthis parameter.")
fcmFxPortCapBbCreditMax = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1, 5), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFxPortCapBbCreditMax.setDescription("The maximum number of receive buffers that this port is\ncapable of making available for holding frames from attached\n\n\n\nNx_Port(s).")
fcmFxPortCapBbCreditMin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1, 6), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFxPortCapBbCreditMin.setDescription("The minimum number of receive buffers that this port is\ncapable of making available for holding frames from attached\nNx_Port(s).")
fcmFxPortCapDataFieldSizeMax = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1, 7), FcDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFxPortCapDataFieldSizeMax.setDescription("The maximum size in bytes of the Data Field in a frame that\nthis Fx_Port is capable of receiving from an attached\nNx_Port.")
fcmFxPortCapDataFieldSizeMin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1, 8), FcDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFxPortCapDataFieldSizeMin.setDescription("The minimum size in bytes of the Data Field in a frame that\nthis Fx_Port is capable of receiving from an attached\nNx_Port.")
fcmFxPortCapClass2SeqDeliv = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFxPortCapClass2SeqDeliv.setDescription("An indication of whether this Fx_Port is capable of\nsupporting Class 2 Sequential Delivery.")
fcmFxPortCapClass3SeqDeliv = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFxPortCapClass3SeqDeliv.setDescription("An indication of whether this Fx_Port is capable of\nsupporting Class 3 Sequential Delivery.")
fcmFxPortCapHoldTimeMax = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFxPortCapHoldTimeMax.setDescription("The maximum holding time that this Fx_Port is capable of\nsupporting.")
fcmFxPortCapHoldTimeMin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFxPortCapHoldTimeMin.setDescription("The minimum holding time that this Fx_Port is capable of\nsupporting.")
fcmISPortTable = MibTable((1, 3, 6, 1, 2, 1, 10, 56, 1, 8))
if mibBuilder.loadTexts: fcmISPortTable.setDescription("Additional information about E_Ports, B_Ports, and any\nother type of Fibre Channel port to which inter-switch links\ncan be connected.  This table will contain one entry for\neach fcmPortTable entry that represents such a port.")
fcmISPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 56, 1, 8, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcmISPortEntry.setDescription("Each entry contains information about a specific port\nconnected to an inter-switch link.")
fcmISPortClassFCredit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 8, 1, 1), FcBbCredit()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmISPortClassFCredit.setDescription("The maximum number of Class F data frames that can be\ntransmitted by the inter-switch port without receipt of ACK\nor Link_Response frames.")
fcmISPortClassFDataFieldSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 8, 1, 2), FcDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmISPortClassFDataFieldSize.setDescription("The Receive Data Field Size that the inter-switch port has\nagreed to support for Class F frames to/from this port.  The\nsize specifies the largest Data Field Size for an FT_1\nframe.")
fcmFLoginTable = MibTable((1, 3, 6, 1, 2, 1, 10, 56, 1, 9))
if mibBuilder.loadTexts: fcmFLoginTable.setDescription("A table that contains one entry for each Nx_Port logged-\nin/attached to a particular Fx_Port in the switch.  Each\nentry contains the services parameters established during\nthe most recent Fabric Login, explicit or implicit.  Note\nthat an Fx_Port may have one or more Nx_Ports attached to\nit.")
fcmFLoginEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 56, 1, 9, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FC-MGMT-MIB", "fcmFLoginNxPortIndex"))
if mibBuilder.loadTexts: fcmFLoginEntry.setDescription("An entry containing service parameters established from a\nsuccessful Fabric Login.")
fcmFLoginNxPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: fcmFLoginNxPortIndex.setDescription("An arbitrary integer that uniquely identifies an Nx_Port\namongst all those attached to the Fx_Port indicated by\nifIndex.\n\nAfter a value of this object is assigned to a particular\nNx_Port, that value can be re-used when and only when it is\nassigned to the same Nx_Port, or, after a reset of the value\nof the relevant instance of ifCounterDiscontinuityTime.")
fcmFLoginPortWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 9, 1, 2), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFLoginPortWwn.setDescription("The port name of the attached Nx_Port, or the zero-length\nstring if unknown.")
fcmFLoginNodeWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 9, 1, 3), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFLoginNodeWwn.setDescription("The node name of the attached Nx_Port, or the zero-length\nstring if unknown.")
fcmFLoginBbCreditModel = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 9, 1, 4), FcBbCreditModel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFLoginBbCreditModel.setDescription("The buffer-to-buffer credit model in use by the Fx_Port.")
fcmFLoginBbCredit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 9, 1, 5), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFLoginBbCredit.setDescription("The number of buffers available for holding frames to be\n\n\n\ntransmitted to the attached Nx_Port.  These buffers are for\nbuffer-to-buffer flow control in the direction from Fx_Port\nto Nx_Port.")
fcmFLoginClassesAgreed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 9, 1, 6), FcClasses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFLoginClassesAgreed.setDescription("The Classes of Service that the Fx_Port has agreed to\nsupport for this Nx_Port.")
fcmFLoginClass2SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 9, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFLoginClass2SeqDelivAgreed.setDescription("An indication of whether the Fx_Port has agreed to support\nClass 2 sequential delivery for this Nx_Port.  This is only\nmeaningful if Class 2 service has been agreed upon.")
fcmFLoginClass2DataFieldSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 9, 1, 8), FcDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFLoginClass2DataFieldSize.setDescription("The Receive Data Field Size that the Fx_Port has agreed to\nsupport for Class 2 frames to/from this Nx_Port.  The size\nspecifies the largest Data Field Size for an FT_1 frame.\nThis is only meaningful if Class 2 service has been agreed\nupon.")
fcmFLoginClass3SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 9, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFLoginClass3SeqDelivAgreed.setDescription("An indication of whether the Fx_Port has agreed to support\nClass 3 sequential delivery for this Nx_Port.  This is only\nmeaningful if Class 3 service has been agreed upon.")
fcmFLoginClass3DataFieldSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 9, 1, 10), FcDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmFLoginClass3DataFieldSize.setDescription("The Receive Data Field Size that the Fx_Port has agreed to\nsupport for Class 3 frames to/from this Nx_Port.  The size\nspecifies the largest Data Field Size for an FT_1 frame.\nThis is only meaningful if Class 3 service has been agreed\nupon.")
fcmLinkTable = MibTable((1, 3, 6, 1, 2, 1, 10, 56, 1, 10))
if mibBuilder.loadTexts: fcmLinkTable.setDescription("A table containing any Fibre Channel link information that\nis known to local Fibre Channel managed instances.  One end\nof such a link is typically at a local port, but the table\ncan also contain information on links for which neither end\nis a local port.\n\nIf one end of a link terminates locally, then that end is\ntermed 'end1'; the other end is termed 'end2'.")
fcmLinkEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 56, 1, 10, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmLinkIndex"))
if mibBuilder.loadTexts: fcmLinkEntry.setDescription("An entry containing information that a particular Fibre\nChannel managed instance has about a Fibre Channel link.\n\nThe two ends of the link are called 'end1' and 'end2'.")
fcmLinkIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: fcmLinkIndex.setDescription("An arbitrary integer that uniquely identifies one link\nwithin the set of links about which a particular managed\ninstance has information.")
fcmLinkEnd1NodeWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 10, 1, 2), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmLinkEnd1NodeWwn.setDescription("The node name of end1, or the zero-length string if\nunknown.")
fcmLinkEnd1PhysPortNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmLinkEnd1PhysPortNumber.setDescription("The physical port number of end1, or zero if unknown.")
fcmLinkEnd1PortWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 10, 1, 4), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmLinkEnd1PortWwn.setDescription("The port WWN of end1, or the zero-length string if unknown.\n('end1' is local if this value is equal to the value of\nfcmPortWwn in one of the rows of the fcmPortTable.)")
fcmLinkEnd2NodeWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 10, 1, 5), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmLinkEnd2NodeWwn.setDescription("The node name of end2, or the zero-length string if\nunknown.")
fcmLinkEnd2PhysPortNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmLinkEnd2PhysPortNumber.setDescription("The physical port number of end2, or zero if unknown.")
fcmLinkEnd2PortWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 10, 1, 7), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmLinkEnd2PortWwn.setDescription("The port WWN of end2, or the zero-length string if\nunknown.")
fcmLinkEnd2AgentAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 10, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmLinkEnd2AgentAddress.setDescription("The address of the management agent for the Fibre Channel\nInterconnect Element or Platform of which end2 is a part.\nThe GS-4 specification provides some information about\nmanagement agents.  If the address is unknown, the value of\nthis object is the zero-length string.")
fcmLinkEnd2PortType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 10, 1, 9), FcPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmLinkEnd2PortType.setDescription("The port type of end2.")
fcmLinkEnd2UnitType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 10, 1, 10), FcUnitFunctions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmLinkEnd2UnitType.setDescription("The type of/function(s) performed by the Fibre Channel\nInterconnect Element or Platform of which end2 is a part.")
fcmLinkEnd2FcAddressId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 56, 1, 10, 1, 11), FcAddressIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmLinkEnd2FcAddressId.setDescription("The Fibre Channel Address ID of end2, or the zero-length\nstring if unknown.")
fcmgmtNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 56, 2))
fcmgmtNotifPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 56, 2, 0))
fcmgmtConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 56, 3))
fcmgmtCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 56, 3, 1))
fcmgmtGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 56, 3, 2))

# Augmentions
fcmPortEntry.registerAugmentions(("FC-MGMT-MIB", "fcmPortStatsEntry"))
fcmPortStatsEntry.setIndexNames(*fcmPortEntry.getIndexNames())
fcmPortEntry.registerAugmentions(("FC-MGMT-MIB", "fcmPortErrorsEntry"))
fcmPortErrorsEntry.setIndexNames(*fcmPortEntry.getIndexNames())
fcmPortEntry.registerAugmentions(("FC-MGMT-MIB", "fcmPortLcStatsEntry"))
fcmPortLcStatsEntry.setIndexNames(*fcmPortEntry.getIndexNames())

# Groups

fcmInstanceBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 56, 3, 2, 1)).setObjects(*(("FC-MGMT-MIB", "fcmInstanceDescr"), ("FC-MGMT-MIB", "fcmInstanceWwn"), ("FC-MGMT-MIB", "fcmInstanceStatus"), ("FC-MGMT-MIB", "fcmInstanceFabricId"), ("FC-MGMT-MIB", "fcmInstanceSoftwareIndex"), ("FC-MGMT-MIB", "fcmInstanceTextName"), ("FC-MGMT-MIB", "fcmInstancePhysicalIndex"), ("FC-MGMT-MIB", "fcmInstanceFunctions"), ) )
if mibBuilder.loadTexts: fcmInstanceBasicGroup.setDescription("Basic information about Fibre Channel managed instances.")
fcmSwitchBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 56, 3, 2, 2)).setObjects(*(("FC-MGMT-MIB", "fcmSwitchDomainId"), ("FC-MGMT-MIB", "fcmSwitchWWN"), ("FC-MGMT-MIB", "fcmSwitchPrincipal"), ) )
if mibBuilder.loadTexts: fcmSwitchBasicGroup.setDescription("Basic information about Fibre Channel switches.")
fcmPortBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 56, 3, 2, 3)).setObjects(*(("FC-MGMT-MIB", "fcmPortFcOperClass"), ("FC-MGMT-MIB", "fcmPortOperType"), ("FC-MGMT-MIB", "fcmPortConnectorType"), ("FC-MGMT-MIB", "fcmPortSerialNumber"), ("FC-MGMT-MIB", "fcmPortFcCapClass"), ("FC-MGMT-MIB", "fcmPortAdminSpeed"), ("FC-MGMT-MIB", "fcmPortCapProtocols"), ("FC-MGMT-MIB", "fcmPortWwn"), ("FC-MGMT-MIB", "fcmPortTransmitterType"), ("FC-MGMT-MIB", "fcmPortNodeWwn"), ("FC-MGMT-MIB", "fcmPortAdminType"), ("FC-MGMT-MIB", "fcmPortInstanceIndex"), ("FC-MGMT-MIB", "fcmPortOperProtocols"), ("FC-MGMT-MIB", "fcmPortPhysicalNumber"), ) )
if mibBuilder.loadTexts: fcmPortBasicGroup.setDescription("Basic information about Fibre Channel ports.")
fcmPortStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 56, 3, 2, 4)).setObjects(*(("FC-MGMT-MIB", "fcmPortBBCreditZeros"), ("FC-MGMT-MIB", "fcmPortFullInputBuffers"), ) )
if mibBuilder.loadTexts: fcmPortStatsGroup.setDescription("Traffic statistics, which are not specific to any one class\nof service, for Fibre Channel ports.")
fcmPortClass23StatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 56, 3, 2, 5)).setObjects(*(("FC-MGMT-MIB", "fcmPortClass2RxFrames"), ("FC-MGMT-MIB", "fcmPortClass2RxPrjtFrames"), ("FC-MGMT-MIB", "fcmPortClass3TxFrames"), ("FC-MGMT-MIB", "fcmPortClass2RxFbsyFrames"), ("FC-MGMT-MIB", "fcmPortClass2TxFrjtFrames"), ("FC-MGMT-MIB", "fcmPortClass2RxOctets"), ("FC-MGMT-MIB", "fcmPortClass2TxFbsyFrames"), ("FC-MGMT-MIB", "fcmPortClass2TxPrjtFrames"), ("FC-MGMT-MIB", "fcmPortClass2Discards"), ("FC-MGMT-MIB", "fcmPortClass2RxPbsyFrames"), ("FC-MGMT-MIB", "fcmPortClass2TxOctets"), ("FC-MGMT-MIB", "fcmPortClass2RxFrjtFrames"), ("FC-MGMT-MIB", "fcmPortClass3RxFrames"), ("FC-MGMT-MIB", "fcmPortClass2TxPbsyFrames"), ("FC-MGMT-MIB", "fcmPortClass3Discards"), ("FC-MGMT-MIB", "fcmPortClass3RxOctets"), ("FC-MGMT-MIB", "fcmPortClass2TxFrames"), ("FC-MGMT-MIB", "fcmPortClass3TxOctets"), ) )
if mibBuilder.loadTexts: fcmPortClass23StatsGroup.setDescription("Traffic statistics for Class 2 and Class 3 traffic on Fibre\nChannel ports.")
fcmPortClassFStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 56, 3, 2, 6)).setObjects(*(("FC-MGMT-MIB", "fcmPortClassFTxOctets"), ("FC-MGMT-MIB", "fcmPortClassFDiscards"), ("FC-MGMT-MIB", "fcmPortClassFRxOctets"), ("FC-MGMT-MIB", "fcmPortClassFRxFrames"), ("FC-MGMT-MIB", "fcmPortClassFTxFrames"), ) )
if mibBuilder.loadTexts: fcmPortClassFStatsGroup.setDescription("Traffic statistics for Class F traffic on Fibre Channel\nports.")
fcmPortLcStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 56, 3, 2, 7)).setObjects(*(("FC-MGMT-MIB", "fcmPortLcFullInputBuffers"), ("FC-MGMT-MIB", "fcmPortLcClass2Discards"), ("FC-MGMT-MIB", "fcmPortLcClass2TxOctets"), ("FC-MGMT-MIB", "fcmPortLcClass2RxPbsyFrames"), ("FC-MGMT-MIB", "fcmPortLcClass3Discards"), ("FC-MGMT-MIB", "fcmPortLcClass2RxOctets"), ("FC-MGMT-MIB", "fcmPortLcClass2RxFrames"), ("FC-MGMT-MIB", "fcmPortLcClass3RxOctets"), ("FC-MGMT-MIB", "fcmPortLcClass2TxFbsyFrames"), ("FC-MGMT-MIB", "fcmPortLcClass2TxPrjtFrames"), ("FC-MGMT-MIB", "fcmPortLcClass2RxFrjtFrames"), ("FC-MGMT-MIB", "fcmPortLcClass3RxFrames"), ("FC-MGMT-MIB", "fcmPortLcClass2RxFbsyFrames"), ("FC-MGMT-MIB", "fcmPortLcClass2TxFrjtFrames"), ("FC-MGMT-MIB", "fcmPortLcClass2RxPrjtFrames"), ("FC-MGMT-MIB", "fcmPortLcBBCreditZeros"), ("FC-MGMT-MIB", "fcmPortLcClass3TxOctets"), ("FC-MGMT-MIB", "fcmPortLcClass3TxFrames"), ("FC-MGMT-MIB", "fcmPortLcClass2TxPbsyFrames"), ("FC-MGMT-MIB", "fcmPortLcClass2TxFrames"), ) )
if mibBuilder.loadTexts: fcmPortLcStatsGroup.setDescription("Low-capacity (32-bit) statistics for Fibre Channel ports.")
fcmPortErrorsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 56, 3, 2, 8)).setObjects(*(("FC-MGMT-MIB", "fcmPortOtherErrors"), ("FC-MGMT-MIB", "fcmPortPrimSeqProtocolErrors"), ("FC-MGMT-MIB", "fcmPortInvalidTxWords"), ("FC-MGMT-MIB", "fcmPortInvalidOrderedSets"), ("FC-MGMT-MIB", "fcmPortLinkResets"), ("FC-MGMT-MIB", "fcmPortInvalidCRCs"), ("FC-MGMT-MIB", "fcmPortAddressErrors"), ("FC-MGMT-MIB", "fcmPortTxOfflineSequences"), ("FC-MGMT-MIB", "fcmPortLossofSignals"), ("FC-MGMT-MIB", "fcmPortRxOfflineSequences"), ("FC-MGMT-MIB", "fcmPortLinkFailures"), ("FC-MGMT-MIB", "fcmPortTxLinkResets"), ("FC-MGMT-MIB", "fcmPortDelimiterErrors"), ("FC-MGMT-MIB", "fcmPortEncodingDisparityErrors"), ("FC-MGMT-MIB", "fcmPortRxLinkResets"), ("FC-MGMT-MIB", "fcmPortLossofSynchs"), ("FC-MGMT-MIB", "fcmPortFrameTooLongs"), ("FC-MGMT-MIB", "fcmPortTruncatedFrames"), ) )
if mibBuilder.loadTexts: fcmPortErrorsGroup.setDescription("Error statistics for Fibre Channel ports.")
fcmSwitchPortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 56, 3, 2, 9)).setObjects(*(("FC-MGMT-MIB", "fcmFxPortRttov"), ("FC-MGMT-MIB", "fcmFxPortCapHoldTimeMin"), ("FC-MGMT-MIB", "fcmFxPortEdtov"), ("FC-MGMT-MIB", "fcmFxPortRatov"), ("FC-MGMT-MIB", "fcmFxPortHoldTime"), ("FC-MGMT-MIB", "fcmFxPortCapBbCreditMax"), ("FC-MGMT-MIB", "fcmFxPortCapClass3SeqDeliv"), ("FC-MGMT-MIB", "fcmISPortClassFDataFieldSize"), ("FC-MGMT-MIB", "fcmFxPortCapClass2SeqDeliv"), ("FC-MGMT-MIB", "fcmFxPortCapBbCreditMin"), ("FC-MGMT-MIB", "fcmFxPortCapHoldTimeMax"), ("FC-MGMT-MIB", "fcmFxPortCapDataFieldSizeMax"), ("FC-MGMT-MIB", "fcmFxPortCapDataFieldSizeMin"), ("FC-MGMT-MIB", "fcmISPortClassFCredit"), ) )
if mibBuilder.loadTexts: fcmSwitchPortGroup.setDescription("Information about ports on a Fibre Channel switch.")
fcmSwitchLoginGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 56, 3, 2, 10)).setObjects(*(("FC-MGMT-MIB", "fcmFLoginClass3SeqDelivAgreed"), ("FC-MGMT-MIB", "fcmFLoginNodeWwn"), ("FC-MGMT-MIB", "fcmFLoginClass3DataFieldSize"), ("FC-MGMT-MIB", "fcmFLoginClass2SeqDelivAgreed"), ("FC-MGMT-MIB", "fcmFLoginBbCredit"), ("FC-MGMT-MIB", "fcmFLoginClass2DataFieldSize"), ("FC-MGMT-MIB", "fcmFLoginBbCreditModel"), ("FC-MGMT-MIB", "fcmFLoginClassesAgreed"), ("FC-MGMT-MIB", "fcmFLoginPortWwn"), ) )
if mibBuilder.loadTexts: fcmSwitchLoginGroup.setDescription("Information known to a Fibre Channel switch about\nattached/logged-in Nx_Ports.")
fcmLinkBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 56, 3, 2, 11)).setObjects(*(("FC-MGMT-MIB", "fcmLinkEnd1NodeWwn"), ("FC-MGMT-MIB", "fcmLinkEnd2AgentAddress"), ("FC-MGMT-MIB", "fcmLinkEnd2FcAddressId"), ("FC-MGMT-MIB", "fcmLinkEnd2NodeWwn"), ("FC-MGMT-MIB", "fcmLinkEnd2PortWwn"), ("FC-MGMT-MIB", "fcmLinkEnd2PortType"), ("FC-MGMT-MIB", "fcmLinkEnd2UnitType"), ("FC-MGMT-MIB", "fcmLinkEnd1PhysPortNumber"), ("FC-MGMT-MIB", "fcmLinkEnd2PhysPortNumber"), ("FC-MGMT-MIB", "fcmLinkEnd1PortWwn"), ) )
if mibBuilder.loadTexts: fcmLinkBasicGroup.setDescription("Information about Fibre Channel links.")

# Compliances

fcmgmtCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 56, 3, 1, 1)).setObjects(*(("FC-MGMT-MIB", "fcmPortStatsGroup"), ("FC-MGMT-MIB", "fcmPortLcStatsGroup"), ("FC-MGMT-MIB", "fcmSwitchBasicGroup"), ("FC-MGMT-MIB", "fcmPortClass23StatsGroup"), ("FC-MGMT-MIB", "fcmPortBasicGroup"), ("FC-MGMT-MIB", "fcmPortErrorsGroup"), ("FC-MGMT-MIB", "fcmLinkBasicGroup"), ("FC-MGMT-MIB", "fcmInstanceBasicGroup"), ("FC-MGMT-MIB", "fcmPortClassFStatsGroup"), ("FC-MGMT-MIB", "fcmSwitchLoginGroup"), ("FC-MGMT-MIB", "fcmSwitchPortGroup"), ) )
if mibBuilder.loadTexts: fcmgmtCompliance.setDescription("Describes the requirements for compliance to this Fibre\nChannel Management MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("FC-MGMT-MIB", PYSNMP_MODULE_ID=fcMgmtMIB)

# Types
mibBuilder.exportSymbols("FC-MGMT-MIB", FcAddressIdOrZero=FcAddressIdOrZero, FcBbCredit=FcBbCredit, FcBbCreditModel=FcBbCreditModel, FcClasses=FcClasses, FcDataFieldSize=FcDataFieldSize, FcDomainIdOrZero=FcDomainIdOrZero, FcNameIdOrZero=FcNameIdOrZero, FcPortType=FcPortType, FcUnitFunctions=FcUnitFunctions)

# Objects
mibBuilder.exportSymbols("FC-MGMT-MIB", fcMgmtMIB=fcMgmtMIB, fcmgmtObjects=fcmgmtObjects, fcmInstanceTable=fcmInstanceTable, fcmInstanceEntry=fcmInstanceEntry, fcmInstanceIndex=fcmInstanceIndex, fcmInstanceWwn=fcmInstanceWwn, fcmInstanceFunctions=fcmInstanceFunctions, fcmInstancePhysicalIndex=fcmInstancePhysicalIndex, fcmInstanceSoftwareIndex=fcmInstanceSoftwareIndex, fcmInstanceStatus=fcmInstanceStatus, fcmInstanceTextName=fcmInstanceTextName, fcmInstanceDescr=fcmInstanceDescr, fcmInstanceFabricId=fcmInstanceFabricId, fcmSwitchTable=fcmSwitchTable, fcmSwitchEntry=fcmSwitchEntry, fcmSwitchIndex=fcmSwitchIndex, fcmSwitchDomainId=fcmSwitchDomainId, fcmSwitchPrincipal=fcmSwitchPrincipal, fcmSwitchWWN=fcmSwitchWWN, fcmPortTable=fcmPortTable, fcmPortEntry=fcmPortEntry, fcmPortInstanceIndex=fcmPortInstanceIndex, fcmPortWwn=fcmPortWwn, fcmPortNodeWwn=fcmPortNodeWwn, fcmPortAdminType=fcmPortAdminType, fcmPortOperType=fcmPortOperType, fcmPortFcCapClass=fcmPortFcCapClass, fcmPortFcOperClass=fcmPortFcOperClass, fcmPortTransmitterType=fcmPortTransmitterType, fcmPortConnectorType=fcmPortConnectorType, fcmPortSerialNumber=fcmPortSerialNumber, fcmPortPhysicalNumber=fcmPortPhysicalNumber, fcmPortAdminSpeed=fcmPortAdminSpeed, fcmPortCapProtocols=fcmPortCapProtocols, fcmPortOperProtocols=fcmPortOperProtocols, fcmPortStatsTable=fcmPortStatsTable, fcmPortStatsEntry=fcmPortStatsEntry, fcmPortBBCreditZeros=fcmPortBBCreditZeros, fcmPortFullInputBuffers=fcmPortFullInputBuffers, fcmPortClass2RxFrames=fcmPortClass2RxFrames, fcmPortClass2RxOctets=fcmPortClass2RxOctets, fcmPortClass2TxFrames=fcmPortClass2TxFrames, fcmPortClass2TxOctets=fcmPortClass2TxOctets, fcmPortClass2Discards=fcmPortClass2Discards, fcmPortClass2RxFbsyFrames=fcmPortClass2RxFbsyFrames, fcmPortClass2RxPbsyFrames=fcmPortClass2RxPbsyFrames, fcmPortClass2RxFrjtFrames=fcmPortClass2RxFrjtFrames, fcmPortClass2RxPrjtFrames=fcmPortClass2RxPrjtFrames, fcmPortClass2TxFbsyFrames=fcmPortClass2TxFbsyFrames, fcmPortClass2TxPbsyFrames=fcmPortClass2TxPbsyFrames, fcmPortClass2TxFrjtFrames=fcmPortClass2TxFrjtFrames, fcmPortClass2TxPrjtFrames=fcmPortClass2TxPrjtFrames, fcmPortClass3RxFrames=fcmPortClass3RxFrames, fcmPortClass3RxOctets=fcmPortClass3RxOctets, fcmPortClass3TxFrames=fcmPortClass3TxFrames, fcmPortClass3TxOctets=fcmPortClass3TxOctets, fcmPortClass3Discards=fcmPortClass3Discards, fcmPortClassFRxFrames=fcmPortClassFRxFrames, fcmPortClassFRxOctets=fcmPortClassFRxOctets, fcmPortClassFTxFrames=fcmPortClassFTxFrames, fcmPortClassFTxOctets=fcmPortClassFTxOctets, fcmPortClassFDiscards=fcmPortClassFDiscards, fcmPortLcStatsTable=fcmPortLcStatsTable, fcmPortLcStatsEntry=fcmPortLcStatsEntry, fcmPortLcBBCreditZeros=fcmPortLcBBCreditZeros, fcmPortLcFullInputBuffers=fcmPortLcFullInputBuffers, fcmPortLcClass2RxFrames=fcmPortLcClass2RxFrames, fcmPortLcClass2RxOctets=fcmPortLcClass2RxOctets, fcmPortLcClass2TxFrames=fcmPortLcClass2TxFrames, fcmPortLcClass2TxOctets=fcmPortLcClass2TxOctets, fcmPortLcClass2Discards=fcmPortLcClass2Discards, fcmPortLcClass2RxFbsyFrames=fcmPortLcClass2RxFbsyFrames, fcmPortLcClass2RxPbsyFrames=fcmPortLcClass2RxPbsyFrames, fcmPortLcClass2RxFrjtFrames=fcmPortLcClass2RxFrjtFrames, fcmPortLcClass2RxPrjtFrames=fcmPortLcClass2RxPrjtFrames, fcmPortLcClass2TxFbsyFrames=fcmPortLcClass2TxFbsyFrames, fcmPortLcClass2TxPbsyFrames=fcmPortLcClass2TxPbsyFrames, fcmPortLcClass2TxFrjtFrames=fcmPortLcClass2TxFrjtFrames, fcmPortLcClass2TxPrjtFrames=fcmPortLcClass2TxPrjtFrames, fcmPortLcClass3RxFrames=fcmPortLcClass3RxFrames, fcmPortLcClass3RxOctets=fcmPortLcClass3RxOctets, fcmPortLcClass3TxFrames=fcmPortLcClass3TxFrames, fcmPortLcClass3TxOctets=fcmPortLcClass3TxOctets, fcmPortLcClass3Discards=fcmPortLcClass3Discards, fcmPortErrorsTable=fcmPortErrorsTable, fcmPortErrorsEntry=fcmPortErrorsEntry, fcmPortRxLinkResets=fcmPortRxLinkResets, fcmPortTxLinkResets=fcmPortTxLinkResets, fcmPortLinkResets=fcmPortLinkResets, fcmPortRxOfflineSequences=fcmPortRxOfflineSequences, fcmPortTxOfflineSequences=fcmPortTxOfflineSequences, fcmPortLinkFailures=fcmPortLinkFailures, fcmPortLossofSynchs=fcmPortLossofSynchs, fcmPortLossofSignals=fcmPortLossofSignals, fcmPortPrimSeqProtocolErrors=fcmPortPrimSeqProtocolErrors, fcmPortInvalidTxWords=fcmPortInvalidTxWords, fcmPortInvalidCRCs=fcmPortInvalidCRCs, fcmPortInvalidOrderedSets=fcmPortInvalidOrderedSets, fcmPortFrameTooLongs=fcmPortFrameTooLongs, fcmPortTruncatedFrames=fcmPortTruncatedFrames, fcmPortAddressErrors=fcmPortAddressErrors, fcmPortDelimiterErrors=fcmPortDelimiterErrors, fcmPortEncodingDisparityErrors=fcmPortEncodingDisparityErrors, fcmPortOtherErrors=fcmPortOtherErrors, fcmFxPortTable=fcmFxPortTable, fcmFxPortEntry=fcmFxPortEntry, fcmFxPortRatov=fcmFxPortRatov, fcmFxPortEdtov=fcmFxPortEdtov, fcmFxPortRttov=fcmFxPortRttov, fcmFxPortHoldTime=fcmFxPortHoldTime, fcmFxPortCapBbCreditMax=fcmFxPortCapBbCreditMax, fcmFxPortCapBbCreditMin=fcmFxPortCapBbCreditMin, fcmFxPortCapDataFieldSizeMax=fcmFxPortCapDataFieldSizeMax, fcmFxPortCapDataFieldSizeMin=fcmFxPortCapDataFieldSizeMin, fcmFxPortCapClass2SeqDeliv=fcmFxPortCapClass2SeqDeliv, fcmFxPortCapClass3SeqDeliv=fcmFxPortCapClass3SeqDeliv, fcmFxPortCapHoldTimeMax=fcmFxPortCapHoldTimeMax, fcmFxPortCapHoldTimeMin=fcmFxPortCapHoldTimeMin, fcmISPortTable=fcmISPortTable, fcmISPortEntry=fcmISPortEntry, fcmISPortClassFCredit=fcmISPortClassFCredit, fcmISPortClassFDataFieldSize=fcmISPortClassFDataFieldSize, fcmFLoginTable=fcmFLoginTable, fcmFLoginEntry=fcmFLoginEntry, fcmFLoginNxPortIndex=fcmFLoginNxPortIndex, fcmFLoginPortWwn=fcmFLoginPortWwn)
mibBuilder.exportSymbols("FC-MGMT-MIB", fcmFLoginNodeWwn=fcmFLoginNodeWwn, fcmFLoginBbCreditModel=fcmFLoginBbCreditModel, fcmFLoginBbCredit=fcmFLoginBbCredit, fcmFLoginClassesAgreed=fcmFLoginClassesAgreed, fcmFLoginClass2SeqDelivAgreed=fcmFLoginClass2SeqDelivAgreed, fcmFLoginClass2DataFieldSize=fcmFLoginClass2DataFieldSize, fcmFLoginClass3SeqDelivAgreed=fcmFLoginClass3SeqDelivAgreed, fcmFLoginClass3DataFieldSize=fcmFLoginClass3DataFieldSize, fcmLinkTable=fcmLinkTable, fcmLinkEntry=fcmLinkEntry, fcmLinkIndex=fcmLinkIndex, fcmLinkEnd1NodeWwn=fcmLinkEnd1NodeWwn, fcmLinkEnd1PhysPortNumber=fcmLinkEnd1PhysPortNumber, fcmLinkEnd1PortWwn=fcmLinkEnd1PortWwn, fcmLinkEnd2NodeWwn=fcmLinkEnd2NodeWwn, fcmLinkEnd2PhysPortNumber=fcmLinkEnd2PhysPortNumber, fcmLinkEnd2PortWwn=fcmLinkEnd2PortWwn, fcmLinkEnd2AgentAddress=fcmLinkEnd2AgentAddress, fcmLinkEnd2PortType=fcmLinkEnd2PortType, fcmLinkEnd2UnitType=fcmLinkEnd2UnitType, fcmLinkEnd2FcAddressId=fcmLinkEnd2FcAddressId, fcmgmtNotifications=fcmgmtNotifications, fcmgmtNotifPrefix=fcmgmtNotifPrefix, fcmgmtConformance=fcmgmtConformance, fcmgmtCompliances=fcmgmtCompliances, fcmgmtGroups=fcmgmtGroups)

# Groups
mibBuilder.exportSymbols("FC-MGMT-MIB", fcmInstanceBasicGroup=fcmInstanceBasicGroup, fcmSwitchBasicGroup=fcmSwitchBasicGroup, fcmPortBasicGroup=fcmPortBasicGroup, fcmPortStatsGroup=fcmPortStatsGroup, fcmPortClass23StatsGroup=fcmPortClass23StatsGroup, fcmPortClassFStatsGroup=fcmPortClassFStatsGroup, fcmPortLcStatsGroup=fcmPortLcStatsGroup, fcmPortErrorsGroup=fcmPortErrorsGroup, fcmSwitchPortGroup=fcmSwitchPortGroup, fcmSwitchLoginGroup=fcmSwitchLoginGroup, fcmLinkBasicGroup=fcmLinkBasicGroup)

# Compliances
mibBuilder.exportSymbols("FC-MGMT-MIB", fcmgmtCompliance=fcmgmtCompliance)
