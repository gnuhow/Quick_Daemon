# PySNMP SMI module. Autogenerated from smidump -f python MPLS-LDP-FRAME-RELAY-STD-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:20 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( DLCI, ) = mibBuilder.importSymbols("FRAME-RELAY-DTE-MIB", "DLCI")
( InterfaceIndexOrZero, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
( mplsLdpEntityIndex, mplsLdpEntityLdpId, mplsLdpPeerLdpId, ) = mibBuilder.importSymbols("MPLS-LDP-STD-MIB", "mplsLdpEntityIndex", "mplsLdpEntityLdpId", "mplsLdpPeerLdpId")
( mplsStdMIB, ) = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "mplsStdMIB")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( RowStatus, StorageType, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "StorageType")

# Objects

mplsLdpFrameRelayStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 166, 6)).setRevisions(("2004-06-03 00:00",))
if mibBuilder.loadTexts: mplsLdpFrameRelayStdMIB.setOrganization("Multiprotocol Label Switching (mpls)\nWorking Group")
if mibBuilder.loadTexts: mplsLdpFrameRelayStdMIB.setContactInfo("Joan Cucchiara (jcucchiara@mindspring.com)\nMarconi Communications, Inc.\n\nHans Sjostrand (hans@ipunplugged.com)\nipUnplugged\n\nJames V. Luciani (james_luciani@mindspring.com)\nMarconi Communications, Inc.\n\nWorking Group Chairs:\nGeorge Swallow,   email: swallow@cisco.com\nLoa Andersson,    email: loa@pi.se\n\nMPLS Working Group, email: mpls@uu.net")
if mibBuilder.loadTexts: mplsLdpFrameRelayStdMIB.setDescription("Copyright (C) The Internet Society (year). The\ninitial version of this MIB module was published\nin RFC 3815. For full legal notices see the RFC\nitself or see:\nhttp://www.ietf.org/copyrights/ianamib.html\n\nThis MIB contains managed object definitions for\nconfiguring and monitoring the Multiprotocol Label\nSwitching (MPLS), Label Distribution Protocol (LDP),\nutilizing Frame Relay as the Layer 2 media.")
mplsLdpFrameRelayObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 6, 1))
mplsLdpEntityFrameRelayObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1))
mplsLdpEntityFrameRelayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 1))
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayTable.setDescription("This table contains Frame Relay specific\ninformation which could be used in the\n'Optional Parameters' and other Frame Relay\nspecific information.\n\nThis table 'sparse augments' the mplsLdpEntityTable\nwhen Frame Relay is the Layer 2 medium.")
mplsLdpEntityFrameRelayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 1, 1)).setIndexNames((0, "MPLS-LDP-STD-MIB", "mplsLdpEntityLdpId"), (0, "MPLS-LDP-STD-MIB", "mplsLdpEntityIndex"))
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayEntry.setDescription("An entry in this table represents the Frame Relay\noptional parameters associated with the LDP entity.")
mplsLdpEntityFrameRelayIfIndexOrZero = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 1, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayIfIndexOrZero.setDescription("This value represents either the InterfaceIndex of\nthe 'ifLayer' where the Frame Relay Labels 'owned' by this\nentry were created, or 0 (zero).  The value of zero\nmeans that the InterfaceIndex is not known.  For example,\nif the InterfaceIndex is created subsequent to the\nFrame Relay Label's creation, then it would not be known.\nHowever, if the InterfaceIndex is known, then it must\nbe represented by this value.\n\nIf an InterfaceIndex becomes known, then the\nnetwork management entity (e.g., SNMP agent) responsible\nfor this object MUST change the value from 0 (zero) to the\nvalue of the InterfaceIndex.  If an Frame Relay Label is\nbeing used in forwarding data, then the value of this\nobject MUST be the InterfaceIndex.")
mplsLdpEntityFrameRelayMergeCap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("notSupported", 0), ("supported", 1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayMergeCap.setDescription("This represents whether or not the Frame Relay merge\ncapability is supported.  This is the EXACT value for the\nFrame Relay Session Parameter, field M (for Frame Relay\nMerge Capabilities).  The Frame Relay Session Parameter\nis an optional parameter in the Initialization Message.\n\n\n\n\nThe description from rfc3036.txt is:\n'M, Frame Relay Merge Capabilities\n   Specifies the merge capabilities of a Frame\n   Relay switch.  The following values are\n   supported in this version of the\n   specification:\n\n          Value          Meaning\n\n            0            Merge not supported\n            1            Merge supported\n\n   Non-merge and merge Frame Relay LSRs may\n   freely interoperate.'\n\n   Please refer to the following reference for a\n   complete description of this feature.")
mplsLdpEntityFrameRelayLRComponents = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayLRComponents.setDescription("Number of Label Range Components in the Initialization\nmessage.  This also represents the number of entries\nin the mplsLdpEntityFrameRelayLRTable which correspond\nto this entry.\n\nThis is the EXACT value for the Frame Relay Session\nParameter, field N (for Number of label range\ncomponents).  The Frame Relay Session Parameter\nis an optional parameter in the Initialization\nMessage.\n\nThe description from rfc3036.txt is:\n\n'N, Number of label range components\n    Specifies the number of Frame Relay Label\n    Range Components included in the TLV.'\n\n Please refer to the following reference for a\n complete description of this feature.")
mplsLdpEntityFrameRelayVcDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("bidirectional", 0), ("unidirection", 1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayVcDirectionality.setDescription("If the value of this object is 'bidirectional(0)', then\nthe LSR supports the use of a given DLCI as a label for\nboth directions independently.  If the value of\nthis object is 'unidirectional(1)', then the LSR\nuses the given DLCI as a label in only one direction.\n\nThis is the EXACT value for the Frame Relay Session\nParameter, field D (for VC Directionality).  The\nFrame Relay Session Parameter is an optional\nparameter in the Initialization Message.\n\nThe description from rfc3036.txt is:\n\n'D, VC Directionality\n   A value of 0 specifies bidirectional VC capability,\n   meaning the LSR can support the use of a given\n   DLCI as a label for both link directions\n   independently.  A value of 1 specifies\n   unidirectional VC capability, meaning a given\n   DLCI may appear in a label mapping for one\n   direction on the link only.  When either or both\n   of the peers specifies unidirectional VC\n   capability, both LSRs use unidirectional VC\n   label assignment for the link as follows.  The\n   LSRs compare their LDP Identifiers as unsigned\n   integers.  The LSR with the larger LDP\n   Identifier may assign only odd-numbered DLCIs\n   in the range as labels.  The system with the\n   smaller LDP Identifier may assign only\n   even-numbered DLCIs in the range as labels.'\n\n   Please refer to the following reference for a\n   complete description of this feature.")
mplsLdpEntityFrameRelayStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 1, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayStorageType.setDescription("The storage type for this conceptual row.\nConceptual rows having the value 'permanent(4)'\nneed not allow write-access to any columnar\nobjects in the row.")
mplsLdpEntityFrameRelayRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayRowStatus.setDescription("The status of this conceptual row.  All writable\nobjects in this row may be modified at any time,\nhowever, as described in detail in the section\nentitled, 'Changing Values After Session\nEstablishment', and again described in the\nDESCRIPTION clause of the\nmplsLdpEntityAdminStatus object,\nif a session has been initiated with a Peer,\nchanging objects in this table will\nwreak havoc with the session and interrupt\ntraffic.  To repeat again:\nthe recommended procedure is to set the\nmplsLdpEntityAdminStatus to\ndown, thereby explicitly causing a\nsession to be torn down. Then,\nchange objects in this entry, then set\nthe mplsLdpEntityAdminStatus\nto enable which enables a new session\nto be initiated.")
mplsLdpEntityFrameRelayLRTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 2))
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayLRTable.setDescription("This table contains information about the\n\n\nOptional Parameters for the Frame Relay Session\nin the LDP Initialization Message, specifically\nit contains information about the Frame Relay\nLabel Range Components.\n\nIf the value of the object\n'mplsLdpEntityOptionalParameters' contains the\nvalue of 'frameRelaySessionParameters(3)' then\nthere must be at least one corresponding entry\nin this table.")
mplsLdpEntityFrameRelayLREntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 2, 1)).setIndexNames((0, "MPLS-LDP-STD-MIB", "mplsLdpEntityLdpId"), (0, "MPLS-LDP-STD-MIB", "mplsLdpEntityIndex"), (0, "MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpEntityFrameRelayLRMinDlci"))
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayLREntry.setDescription("An entry in this table represents the Frame Relay\nLabel Range Component associated with the LDP entity.")
mplsLdpEntityFrameRelayLRMinDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 2, 1, 1), DLCI()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayLRMinDlci.setDescription("The lower bound which is supported.  This value\nshould be the same as that in the Frame Relay Label\nRange Component's Minimum DLCI field.  The value\nof zero is valid for the minimum DLCI field of\nthe label.")
mplsLdpEntityFrameRelayLRMaxDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 2, 1, 2), DLCI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayLRMaxDlci.setDescription("The upper bound which is supported.  This value\nshould be the same as that in the Frame Relay Label\nRange Component's Maximum DLCI field.")
mplsLdpEntityFrameRelayLRLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,)).subtype(namedValues=NamedValues(("tenDlciBits", 0), ("twentyThreeDlciBits", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayLRLen.setDescription("This object specifies the length of the DLCI bits.\n\nThis is the EXACT value for the Len field of the\nFrame Relay Label Range Component.\n\nThe description from rfc3036.txt is:\n\n'Len\n    This field specifies the number of bits of the DLCI.\n    The following values are supported:\n\n         Len    DLCI bits\n\n         0       10\n         2       23\n\n    Len values 1 and 3 are reserved.'\n\n Please refer to the following reference for a complete\n description of this feature.")
mplsLdpEntityFrameRelayLRStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 2, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayLRStorageType.setDescription("The storage type for this conceptual row.\nConceptual rows having the value 'permanent(4)'\nneed not allow write-access to any columnar\nobjects in the row.")
mplsLdpEntityFrameRelayLRRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityFrameRelayLRRowStatus.setDescription("The status of this conceptual row.  All writable\nobjects in this row may be modified at any time,\nhowever, as described in detail in the section\nentitled, 'Changing Values After Session\nEstablishment', and again described in the\nDESCRIPTION clause of the\nmplsLdpEntityAdminStatus object,\nif a session has been initiated with a Peer,\nchanging objects in this table will\nwreak havoc with the session and interrupt\ntraffic.  To repeat again:\nthe recommended procedure is to set the\nmplsLdpEntityAdminStatus to down, thereby\nexplicitly causing a session to be torn down. Then,\nchange objects in this entry, then set the\nmplsLdpEntityAdminStatus to enable which enables\na new session to be initiated.")
mplsLdpFrameRelaySessionObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 2))
mplsLdpFrameRelaySessionTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 2, 1))
if mibBuilder.loadTexts: mplsLdpFrameRelaySessionTable.setDescription("A table of Frame Relay label range intersections\nbetween the LDP Entities and LDP Peers.\nEach row represents a single label range intersection.\n\nNOTE:  this table cannot use the 'AUGMENTS'\n\n\nclause because there is not necessarily a one-to-one\nmapping between this table and the\nmplsLdpSessionTable.")
mplsLdpFrameRelaySessionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 2, 1, 1)).setIndexNames((0, "MPLS-LDP-STD-MIB", "mplsLdpEntityLdpId"), (0, "MPLS-LDP-STD-MIB", "mplsLdpEntityIndex"), (0, "MPLS-LDP-STD-MIB", "mplsLdpPeerLdpId"), (0, "MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpFrameRelaySessionMinDlci"))
if mibBuilder.loadTexts: mplsLdpFrameRelaySessionEntry.setDescription("An entry in this table represents information on a\nsingle label range intersection between an\nLDP Entity and LDP Peer.\n\nThe information contained in a row is read-only.")
mplsLdpFrameRelaySessionMinDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 2, 1, 1, 1), DLCI()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: mplsLdpFrameRelaySessionMinDlci.setDescription("The lower bound of DLCIs which are supported.\nThe value of zero is a valid value for the\nminimum DLCI field of the label.")
mplsLdpFrameRelaySessionMaxDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 2, 1, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLdpFrameRelaySessionMaxDlci.setDescription("The upper bound of DLCIs which are supported.")
mplsLdpFrameRelaySessionLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 6, 1, 2, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,)).subtype(namedValues=NamedValues(("tenDlciBits", 0), ("twentyThreeDlciBits", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLdpFrameRelaySessionLen.setDescription("This object specifies the DLCI bits.")
mplsLdpFrameRelayConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 6, 2))
mplsLdpFrameRelayGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 6, 2, 1))
mplsLdpFrameRelayCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 6, 2, 2))

# Augmentions

# Groups

mplsLdpFrameRelayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 6, 2, 1, 1)).setObjects(*(("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpEntityFrameRelayLRStorageType"), ("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpEntityFrameRelayIfIndexOrZero"), ("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpEntityFrameRelayMergeCap"), ("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpEntityFrameRelayLRLen"), ("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpFrameRelaySessionLen"), ("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpEntityFrameRelayLRRowStatus"), ("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpEntityFrameRelayRowStatus"), ("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpEntityFrameRelayVcDirectionality"), ("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpEntityFrameRelayStorageType"), ("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpEntityFrameRelayLRMaxDlci"), ("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpFrameRelaySessionMaxDlci"), ("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpEntityFrameRelayLRComponents"), ) )
if mibBuilder.loadTexts: mplsLdpFrameRelayGroup.setDescription("Objects that apply to all MPLS LDP implementations\nusing Frame Relay as the Layer 2.")

# Compliances

mplsLdpFrameRelayModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 6, 2, 2, 1)).setObjects(*(("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpFrameRelayGroup"), ) )
if mibBuilder.loadTexts: mplsLdpFrameRelayModuleFullCompliance.setDescription("The Module is implemented with support for\nread-create and read-write.  In other words,\nboth monitoring and configuration\nare available when using this MODULE-COMPLIANCE.")
mplsLdpFrameRelayModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 6, 2, 2, 2)).setObjects(*(("MPLS-LDP-FRAME-RELAY-STD-MIB", "mplsLdpFrameRelayGroup"), ) )
if mibBuilder.loadTexts: mplsLdpFrameRelayModuleReadOnlyCompliance.setDescription("The Module is implemented with support for\nread-only.  In other words, only monitoring\nis available by implementing this MODULE-COMPLIANCE.")

# Exports

# Module identity
mibBuilder.exportSymbols("MPLS-LDP-FRAME-RELAY-STD-MIB", PYSNMP_MODULE_ID=mplsLdpFrameRelayStdMIB)

# Objects
mibBuilder.exportSymbols("MPLS-LDP-FRAME-RELAY-STD-MIB", mplsLdpFrameRelayStdMIB=mplsLdpFrameRelayStdMIB, mplsLdpFrameRelayObjects=mplsLdpFrameRelayObjects, mplsLdpEntityFrameRelayObjects=mplsLdpEntityFrameRelayObjects, mplsLdpEntityFrameRelayTable=mplsLdpEntityFrameRelayTable, mplsLdpEntityFrameRelayEntry=mplsLdpEntityFrameRelayEntry, mplsLdpEntityFrameRelayIfIndexOrZero=mplsLdpEntityFrameRelayIfIndexOrZero, mplsLdpEntityFrameRelayMergeCap=mplsLdpEntityFrameRelayMergeCap, mplsLdpEntityFrameRelayLRComponents=mplsLdpEntityFrameRelayLRComponents, mplsLdpEntityFrameRelayVcDirectionality=mplsLdpEntityFrameRelayVcDirectionality, mplsLdpEntityFrameRelayStorageType=mplsLdpEntityFrameRelayStorageType, mplsLdpEntityFrameRelayRowStatus=mplsLdpEntityFrameRelayRowStatus, mplsLdpEntityFrameRelayLRTable=mplsLdpEntityFrameRelayLRTable, mplsLdpEntityFrameRelayLREntry=mplsLdpEntityFrameRelayLREntry, mplsLdpEntityFrameRelayLRMinDlci=mplsLdpEntityFrameRelayLRMinDlci, mplsLdpEntityFrameRelayLRMaxDlci=mplsLdpEntityFrameRelayLRMaxDlci, mplsLdpEntityFrameRelayLRLen=mplsLdpEntityFrameRelayLRLen, mplsLdpEntityFrameRelayLRStorageType=mplsLdpEntityFrameRelayLRStorageType, mplsLdpEntityFrameRelayLRRowStatus=mplsLdpEntityFrameRelayLRRowStatus, mplsLdpFrameRelaySessionObjects=mplsLdpFrameRelaySessionObjects, mplsLdpFrameRelaySessionTable=mplsLdpFrameRelaySessionTable, mplsLdpFrameRelaySessionEntry=mplsLdpFrameRelaySessionEntry, mplsLdpFrameRelaySessionMinDlci=mplsLdpFrameRelaySessionMinDlci, mplsLdpFrameRelaySessionMaxDlci=mplsLdpFrameRelaySessionMaxDlci, mplsLdpFrameRelaySessionLen=mplsLdpFrameRelaySessionLen, mplsLdpFrameRelayConformance=mplsLdpFrameRelayConformance, mplsLdpFrameRelayGroups=mplsLdpFrameRelayGroups, mplsLdpFrameRelayCompliances=mplsLdpFrameRelayCompliances)

# Groups
mibBuilder.exportSymbols("MPLS-LDP-FRAME-RELAY-STD-MIB", mplsLdpFrameRelayGroup=mplsLdpFrameRelayGroup)

# Compliances
mibBuilder.exportSymbols("MPLS-LDP-FRAME-RELAY-STD-MIB", mplsLdpFrameRelayModuleFullCompliance=mplsLdpFrameRelayModuleFullCompliance, mplsLdpFrameRelayModuleReadOnlyCompliance=mplsLdpFrameRelayModuleReadOnlyCompliance)
