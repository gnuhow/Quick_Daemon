# PySNMP SMI module. Autogenerated from smidump -f python ADSL2-LINE-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:38:37 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Adsl2ChAtmStatus, Adsl2ChPtmStatus, Adsl2ConfPmsForce, Adsl2Direction, Adsl2InitResult, Adsl2LConfProfPmMode, Adsl2LastTransmittedState, Adsl2LdsfResult, Adsl2LineLdsf, Adsl2LineStatus, Adsl2MaxBer, Adsl2OperationModes, Adsl2PowerMngState, Adsl2PsdMaskDs, Adsl2PsdMaskUs, Adsl2RaMode, Adsl2RfiDs, Adsl2ScMaskDs, Adsl2ScMaskUs, Adsl2SymbolProtection, Adsl2TransmissionModeType, Adsl2Tssi, Adsl2Unit, ) = mibBuilder.importSymbols("ADSL2-LINE-TC-MIB", "Adsl2ChAtmStatus", "Adsl2ChPtmStatus", "Adsl2ConfPmsForce", "Adsl2Direction", "Adsl2InitResult", "Adsl2LConfProfPmMode", "Adsl2LastTransmittedState", "Adsl2LdsfResult", "Adsl2LineLdsf", "Adsl2LineStatus", "Adsl2MaxBer", "Adsl2OperationModes", "Adsl2PowerMngState", "Adsl2PsdMaskDs", "Adsl2PsdMaskUs", "Adsl2RaMode", "Adsl2RfiDs", "Adsl2ScMaskDs", "Adsl2ScMaskUs", "Adsl2SymbolProtection", "Adsl2TransmissionModeType", "Adsl2Tssi", "Adsl2Unit")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( HCPerfIntervalThreshold, HCPerfTimeElapsed, ) = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfIntervalThreshold", "HCPerfTimeElapsed")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, transmission, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "transmission")
( RowStatus, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue")

# Objects

adsl2MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 238)).setRevisions(("2006-10-04 00:00",))
if mibBuilder.loadTexts: adsl2MIB.setOrganization("ADSLMIB Working Group")
if mibBuilder.loadTexts: adsl2MIB.setContactInfo("WG-email:  adslmib@ietf.org\nInfo:      https://www1.ietf.org/mailman/listinfo/adslmib\n\n\n          Chair:     Mike Sneed\n                     Sand Channel Systems\n          Postal:    P.O. Box 37324\n                     Raleigh NC 27627-732\n          Email:     sneedmike@hotmail.com\n          Phone:     +1 206 600 7022\n\n          Co-Chair & Co-editor:\n                     Menachem Dodge\n                     ECI Telecom Ltd.\n          Postal:    30 Hasivim St.\n                     Petach Tikva 49517,\n                     Israel.\n          Email:     mbdodge@ieee.org\n          Phone:     +972 3 926 8421\n\n          Co-editor: Moti Morgenstern\n                     ECI Telecom Ltd.\n          Postal:    30 Hasivim St.\n                     Petach Tikva 49517,\n                     Israel.\n          Email:     moti.morgenstern@ecitele.com\n          Phone:     +972 3 926 6258\n\n          Co-editor: Scott Baillie\n                     NEC Australia\n          Postal:    649-655 Springvale Road,\n                     Mulgrave, Victoria 3170,\n                     Australia.\n          Email:     scott.baillie@nec.com.au\n          Phone:     +61 3 9264 3986\n\n          Co-editor: Umberto Bonollo\n\n\n                     NEC Australia\n          Postal:    649-655 Springvale Road,\n                     Mulgrave, Victoria 3170,\n                     Australia.\n          Email:     umberto.bonollo@nec.com.au\n          Phone:     +61 3 9264 3385\n         ")
if mibBuilder.loadTexts: adsl2MIB.setDescription("\nThis document defines a Management Information Base (MIB)\nmodule for use with network management protocols in the\nInternet community for the purpose of managing ADSL, ADSL2,\nand ADSL2+ lines.  The MIB module described in RFC 2662\n[RFC2662] describes objects used for managing Asymmetric\nBit-Rate DSL (ADSL) interfaces per [T1E1.413], [G.992.1],\nand [G.992.2].  These object descriptions are based upon the\nspecifications for the ADSL Embedded Operations Channel\n(EOC) as defined in American National Standards Institute\n(ANSI) T1E1.413/1995 [T1E1.413] and International\nTelecommunication Union (ITU-T) G.992.1  [G.992.1] and\nG.992.2 [G.992.2].\n\nThis document does not obsolete RFC 2662 [RFC2662], but\nrather provides a more comprehensive management model that\nincludes the ADSL2 and ADSL2+ technologies per G.992.3,\nG.992.4, and G.992.5 ([G.992.3], [G.992.4], and [G.992.5],\nrespectively).  In addition, objects have been added to\nimprove the management of ADSL, ADSL2, and ADSL2+ lines.\n\nAdditionally, the management framework for New Generation\nADSL lines specified by the Digital Subscriber Line Forum\n(DSLF) has been taken into consideration [TR-90].  That\nframework is based on ITU-T G.997.1 standard [G.997.1] as\nwell as two amendments: [G.997.1am1] and [G.997.1am2].\n\nNote that the revised ITU-T G.997.1 standard also refers to\nthe next generation of VDSL technology, known as VDSL2, per\nITU-T G.993.2 [G.993.2].  However, managing VDSL2 lines is\ncurrently beyond the scope of this document.\n\nThe MIB module is located in the MIB tree under MIB 2\ntransmission, as discussed in the IANA Considerations section\nof this document.\n\nCopyright (C) The Internet Society (2006).  This version of\nthis MIB module is part of RFC 4706: see the RFC itself for\nfull legal notices.")
adsl2 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1))
adsl2Notifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 0))
adsl2Line = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 1))
adsl2LineTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1))
if mibBuilder.loadTexts: adsl2LineTable.setDescription("The table adsl2LineTable contains configuration,\ncommand, and status parameters of the ADSL2 line.\nThe index of this table is an interface index where the\ninterface has an ifType of adsl2plus(238).\n\nSeveral objects in this table MUST be maintained in a\npersistent manner.")
adsl2LineEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adsl2LineEntry.setDescription("The table adsl2LineTable contains configuration,\ncommands, and status parameters of the ADSL2 line")
adsl2LineCnfgTemplate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adsl2LineCnfgTemplate.setDescription("The value of this object identifies the row in the ADSL2 Line\nConfiguration Templates Table, (adsl2LineConfTemplateTable),\nwhich applies for this ADSL2 line.\n\nThis object MUST be maintained in a persistent manner.")
adsl2LineAlarmCnfgTemplate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adsl2LineAlarmCnfgTemplate.setDescription("The value of this object identifies the row in the ADSL2 Line\nAlarm Configuration Template Table,\n(adsl2LineAlarmConfTemplateTable), which applies to this ADSL2\nline.\n\nThis object MUST be maintained in a persistent manner.")
adsl2LineCmndConfPmsf = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 3), Adsl2ConfPmsForce().clone('l3toL0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adsl2LineCmndConfPmsf.setDescription("Power management state forced.  Defines the line states to be\nforced by the near-end ATU on this line.  The various possible\nvalues are:\n   l3toL0(0),\n   l0toL2(2), or\n   l0orL2toL3(3).\n\nThis object MUST be maintained in a persistent manner.")
adsl2LineCmndConfLdsf = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 4), Adsl2LineLdsf().clone('inhibit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adsl2LineCmndConfLdsf.setDescription("Loop diagnostics mode forced (LDSF).  Defines whether the line\nshould be forced into the loop diagnostics mode by the\nnear-end ATU on this line or only be responsive to loop\ndiagnostics initiated by the far-end ATU.\n\nThis object MUST be maintained in a persistent manner.\nHowever, in case the operator forces loop diagnostics mode\nthen the access node should reset the object (inhibit) when\nloop diagnostics mode procedures are completed.")
adsl2LineCmndConfLdsfFailReason = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 5), Adsl2LdsfResult().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineCmndConfLdsfFailReason.setDescription("The status of the recent occasion the Loop diagnostics mode\nforced (LDSF) was issued for the associated line.  Possible\nvalues are:\n   none(1)         - The default value in case LDSF was never\n                     requested for the associated line.\n   success(2)      - The recent command completed\n                     successfully.\n   inProgress(3)   - The Loop Diagnostics process is in\n                     progress.\n   unsupported(4)  - The NE or the line card doesn't support\n                     LDSF.\n   cannotRun(5)    - The NE cannot initiate the command, due\n                     to a nonspecific reason.\n   aborted(6)      - The Loop Diagnostics process aborted.\n   failed(7)       - The Loop Diagnostics process failed.\n   illegalMode(8)  - The NE cannot initiate the command, due\n                     to the specific mode of the relevant\n                     line.\n   adminUp(9)      - The NE cannot initiate the command, as\n                     the relevant line is administratively\n                     'Up'.\n   tableFull(10)   - The NE cannot initiate the command, due\n                     to reaching the maximum number of rows\n                     in the results table.\n   noResources(11) - The NE cannot initiate the command, due\n                     to lack of internal memory resources.")
adsl2LineCmndAutomodeColdStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adsl2LineCmndAutomodeColdStart.setDescription("Automode cold start forced.  This parameter is defined\nin order to improve testing of the performance of ATUs\nsupporting automode when it is enabled in the MIB.\nChange the value of this parameter to 'true' indicates\na change in loop conditions applied to the devices under\ntest.  The ATUs shall reset any historical information\nused for automode and for shortening G.994.1 handshake\n\n\nand initialization.\n\nAutomode is the case where multiple operation-modes are\nenabled through the adsl2LConfProfAtuTransSysEna object\nin the line configuration profile being used for the\nADSL line, and where the selection of the actual\noperation-mode depends not only on the common\ncapabilities of both ATUs (as exchanged in G.994.1), but\nalso on achievable data rates under given loop\nconditions.\n\nThis object MUST be maintained in a persistent manner.")
adsl2LineStatusAtuTransSys = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 7), Adsl2TransmissionModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusAtuTransSys.setDescription("The ATU Transmission System (ATS) in use.\nIt is coded in a bit-map representation with only a single bit\nset to '1' (the selected coding for the ADSL line).  This\nparameter may be derived from the handshaking procedures\ndefined in Recommendation G.994.1.  A set of ADSL2 line\ntransmission modes, with one bit per mode.")
adsl2LineStatusPwrMngState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 8), Adsl2PowerMngState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusPwrMngState.setDescription("The current power management state.  One of four possible\npower management states:\n   L0 - Synchronized and full transmission (i.e., Showtime).\n   L1 - Low Power with reduced net data rate (G.992.2 only).\n   L2 - Low Power with reduced net data rate (G.992.3 and\n        G.992.4 only).\n   L3 - No power.\nThe various possible values are: l0(1), l1(2), l2(3), or\nl3(4).")
adsl2LineStatusInitResult = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 9), Adsl2InitResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusInitResult.setDescription("Indicates the result of the last full initialization performed\non the line.  It is an enumeration type with the following\nvalues: noFail(0), configError(1), configNotFeasible(2),\ncommFail(3), noPeerAtu(4), or otherCause(5).")
adsl2LineStatusLastStateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 10), Adsl2LastTransmittedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusLastStateDs.setDescription("The last successful transmitted initialization state in\nthe downstream direction in the last full initialization\nperformed on the line.")
adsl2LineStatusLastStateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 11), Adsl2LastTransmittedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusLastStateUs.setDescription("The last successful transmitted initialization state in the\nupstream direction in the last full initialization performed\non the line.")
adsl2LineStatusAtur = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 12), Adsl2LineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusAtur.setDescription("Indicates current state (existing failures) of the ATU-R.\nThis is a bit-map of possible conditions.")
adsl2LineStatusAtuc = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 13), Adsl2LineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusAtuc.setDescription("Indicates current state (existing failures) of the ATU-C.\nThis is a bit-map of possible conditions.")
adsl2LineStatusLnAttenDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,1270),ValueRangeConstraint(2147483646,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusLnAttenDs.setDescription("The measured difference in the total power transmitted by the\nATU-C and the total power received by the ATU-R over all sub-\ncarriers during diagnostics mode and initialization.  It\nranges from 0 to 1270 units of 0.1 dB (physical values\nare 0 to 127 dB).\nA special value of 0x7FFFFFFF (2147483647) indicates the line\nattenuation is out of range to be represented.\nA special value of 0x7FFFFFFE (2147483646) indicates the line\nattenuation measurement is currently unavailable.")
adsl2LineStatusLnAttenUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,1270),ValueRangeConstraint(2147483646,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusLnAttenUs.setDescription("The measured difference in the total power transmitted by the\nATU-R and the total power received by the ATU-C over all sub-\ncarriers during diagnostics mode and initialization.\nIt ranges from 0 to 1270 units of 0.1 dB (physical values are\n0 to 127 dB).\nA special value of 0x7FFFFFFF (2147483647) indicates the line\nattenuation is out of range to be represented.\nA special value of 0x7FFFFFFE (2147483646) indicates the line\nattenuation measurement is currently unavailable.")
adsl2LineStatusSigAttenDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,1270),ValueRangeConstraint(2147483646,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusSigAttenDs.setDescription("The measured difference in the total power transmitted by the\nATU-C and the total power received by the ATU-R over all sub-\ncarriers during Showtime.  It ranges from 0 to 1270 units of\n0.1 dB (physical values are 0 to 127 dB).\nA special value of 0x7FFFFFFF (2147483647) indicates the\nsignal attenuation is out of range to be represented.\nA special value of 0x7FFFFFFE (2147483646) indicates the\nsignal attenuation measurement is currently unavailable.")
adsl2LineStatusSigAttenUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,1270),ValueRangeConstraint(2147483646,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusSigAttenUs.setDescription("The measured difference in the total power transmitted by the\nATU-R and the total power received by the ATU-C over all sub-\ncarriers during Showtime.  It ranges from 0 to 1270 units of\n0.1 dB (physical values are 0 to 127 dB).\nA special value of 0x7FFFFFFF (2147483647) indicates the\nsignal attenuation is out of range to be represented.\nA special value of 0x7FFFFFFE (2147483646) indicates the\nsignal attenuation measurement is currently unavailable.")
adsl2LineStatusSnrMarginDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-640,630),ValueRangeConstraint(2147483646,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusSnrMarginDs.setDescription("Downstream SNR Margin is the maximum increase in dB of the\nnoise power received at the ATU-R, such that the BER\nrequirements are met for all downstream bearer channels.  It\nranges from -640 to 630 units of 0.1 dB (physical values are\n-64 to 63 dB).\nA special value of 0x7FFFFFFF (2147483647) indicates the\nSNR Margin is out of range to be represented.\nA special value of 0x7FFFFFFE (2147483646) indicates the\nSNR Margin measurement is currently unavailable.")
adsl2LineStatusSnrMarginUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-640,630),ValueRangeConstraint(2147483646,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusSnrMarginUs.setDescription("Upstream SNR Margin is the maximum increase in dB of the noise\npower received at the ATU-C, such that the BER requirements\nare met for all downstream bearer channels.  It ranges from\n-640 to 630 units of 0.1 dB (physical values are -64 to\n63 dB).\nA special value of 0x7FFFFFFF (2147483647) indicates the\nSNR Margin is out of range to be represented.\nA special value of 0x7FFFFFFE (2147483646) indicates the\nSNR Margin measurement is currently unavailable.")
adsl2LineStatusAttainableRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusAttainableRateDs.setDescription("Maximum Attainable Data Rate Downstream.\nThe maximum downstream net data rate currently attainable by\nthe ATU-C transmitter and the ATU-R receiver, coded in\nbits/second.")
adsl2LineStatusAttainableRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusAttainableRateUs.setDescription("Maximum Attainable Data Rate Upstream.\nThe maximum upstream net data rate currently attainable by the\nATU-R transmitter and the ATU-C receiver, coded in\nbits/second.")
adsl2LineStatusActPsdDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-900,0),ValueRangeConstraint(2147483647,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusActPsdDs.setDescription("Actual Power Spectrum Density (PSD) Downstream.  The average\ndownstream transmit PSD over the sub-carriers used for\ndownstream.  It ranges from -900 to 0 units of 0.1 dB\n(physical values are -90 to 0 dBm/Hz).\nA value of 0x7FFFFFFF (2147483647) indicates the measurement\nis out of range to be represented.")
adsl2LineStatusActPsdUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-900,0),ValueRangeConstraint(2147483647,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusActPsdUs.setDescription("Actual Power Spectrum Density (PSD) Upstream.  The average\nupstream transmit PSD over the sub-carriers used for upstream.\nIt ranges from -900 to 0 units of 0.1 dB (physical values\nare -90 to 0 dBm/Hz).\nA value of 0x7FFFFFFF (2147483647) indicates the measurement\nis out of range to be represented.")
adsl2LineStatusActAtpDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-310,310),ValueRangeConstraint(2147483647,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusActAtpDs.setDescription("Actual Aggregate Transmit Power Downstream.  The total amount\nof transmit power delivered by the ATU-C at the U-C reference\npoint, at the instant of measurement.  It ranges from -310 to\n310 units of 0.1 dB (physical values are -31 to 31 dBm).\nA value of 0x7FFFFFFF (2147483647) indicates the measurement\nis out of range to be represented.")
adsl2LineStatusActAtpUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-310,310),ValueRangeConstraint(2147483647,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LineStatusActAtpUs.setDescription("Actual Aggregate Transmit Power Upstream.  The total amount of\ntransmit power delivered by the ATU-R at the U-R\nreference point, at the instant of measurement.  It ranges\n\n\nfrom -310 to 310 units of 0.1 dB (physical values are -31\nto 31 dBm).\nA value of 0x7FFFFFFF (2147483647) indicates the measurement\nis out of range to be represented.")
adsl2Status = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 2))
adsl2ChannelStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1))
if mibBuilder.loadTexts: adsl2ChannelStatusTable.setDescription("The table adsl2ChannelStatusTable contains status\nparameters of the ADSL2 channel.  This table contains live\ndata from equipment.")
adsl2ChannelStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2ChStatusUnit"))
if mibBuilder.loadTexts: adsl2ChannelStatusEntry.setDescription("The table adsl2ChannelStatusTable contains status\nparameters of the ADSL2 channel.\nThe index of this table consists of an interface index, where\nthe interface has an ifType value that is applicable\nfor a DSL channel, along with a termination unit.")
adsl2ChStatusUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 1), Adsl2Unit()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2ChStatusUnit.setDescription("The termination unit atuc(1) or atur(2).")
adsl2ChStatusChannelNum = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ChStatusChannelNum.setDescription("Provides the bearer channel number associated with this\nrow (i.e., the channel ifIndex).\nThis enables determining the channel configuration profile\nand the channel thresholds profile applicable for this\nbearer channel.")
adsl2ChStatusActDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ChStatusActDataRate.setDescription("The actual net data rate that the bearer channel is operating\nat, if in L0 power management state.  In L1 or L2 states, it\nrelates to the previous L0 state.  The data rate is coded in\nbits/second.")
adsl2ChStatusPrevDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ChStatusPrevDataRate.setDescription("The previous net data rate that the bearer channel was\noperating at just before the latest rate change event.  This\ncould be a full or short initialization, fast retrain, DRA or\npower management transitions, excluding transitions between L0\nstate and L1 or L2 states.  The data rate is coded in\nbits/second.")
adsl2ChStatusActDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8176))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ChStatusActDelay.setDescription("The actual one-way interleaving delay introduced by the\nPMS-TC in the direction of the bearer channel, if in L0\npower management state.  In L1 or L2 states, it relates to\nthe previous L0 state.  It is coded in ms (rounded to the\nnearest ms).")
adsl2ChStatusAtmStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 6), Adsl2ChAtmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ChStatusAtmStatus.setDescription("Indicates the current state (existing failures) of the ADSL\nchannel in case its Data Path is ATM.  This is a bit-map of\npossible conditions.  The various bit positions are:\n   noDefect(0),\n   noCellDelineation(1), or\n   lossOfCellDelineation(2).\nIn the case where the channel is not an ATM Data Path, the\nobject is set to '0'.")
adsl2ChStatusPtmStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 1, 1, 7), Adsl2ChPtmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ChStatusPtmStatus.setDescription("Indicates the current state (existing failures) of the ADSL\nchannel in case its Data Path is PTM.  This is a bit-map of\npossible conditions.  The various bit positions are:\n   noDefect(0), or\n   outOfSync(1).\nIn the case where the channel is not a PTM Data Path, the\nobject is set to '0'.")
adsl2SCStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2))
if mibBuilder.loadTexts: adsl2SCStatusTable.setDescription("The table adsl2SCStatusTable contains status parameters\nof the ADSL2 sub-carriers.  The following points apply to this\ntable:\n1.  The main purpose of this table is to hold the results\n    of a DELT.\n2.  This table also holds parameters obtained at line\n    initialization time.\n3.  The rows in this table are volatile; that is, they are\n    lost if the SNMP agent is rebooted.\n4.  Due to the large OCTET STRING attributes in this table,\n    the worst case memory requirements for this table are\n    very high.  The manager may use the row status attribute\n    of this table to delete rows in order to reclaim memory.\n5.  The manager may create rows in this table.  The SNMP\n    agent may create rows in this table.  Only the manager\n    may delete rows in this table.\n6.  The maximum number of rows allowable in this table is\n    indicated by the scalar attribute\n    adsl2ScalarSCMaxInterfaces.\n\n\n\n    The number of rows available in this table is indicated\n    by the scalar attribute adsl2ScalarSCAvailInterfaces.\n7.  The SNMP agent is permitted to create rows in this table\n    when a DELT completes successfully or when line\n    initialization occurs.  It is not mandatory for the SNMP\n    agent to create rows in this table; hence, it may be\n    necessary for the manager to create rows in this table\n    before any results can be stored.\n8.  If the manager attempts to create a row in this table\n    and there are no more rows available, the creation\n    attempt will fail, and the response to the SNMP SET PDU\n    will contain the error noCreation(11).\n9.  If the SNMP agent attempts to create a row in this table\n    and there are no more rows available, the creation\n    attempt will fail, and the attribute\n    adsl2LineCmndConfLdsfFailReason will indicate the\n    reason for the failure.  The failure reason will be either\n    tableFull(10) or noResources(11).\n10. An example of use of this table is as follows:\n    Step 1. : The DELT is started by setting the\n            : adsl2LineCmndConfLdsf from inhibit to force.\n    Step 2. : The DELT completes, and valid data is\n            : available.\n    Step 3. : The row in the adsl2SCStatusTable where the\n            : results will be stored does not yet exist so\n            : the SNMP agent attempts to create the row.\n    Step 4. : Due to a low memory condition, a row in the\n            : adsl2SCStatusTable table cannot be created at\n            : this time.\n    Step 5. : The reason for the failure, tableFull(10), is\n            : indicated in the adsl2LineCmndConfLdsfFailReason\n            : attribute.\n11. Another example of use of this table is as follows :\n    Step 1. : The DELT is started by setting the\n            : adsl2LineCmndConfLdsf from inhibit to force.\n    Step 2. : The DELT completes and valid data is\n            : available.\n    Step 3. : The row in the adsl2SCStatusTable where the\n            : results will be stored does not yet exist so\n            : the SNMP agent attempts to create the row.\n    Step 4. : The row creation is successful.\n    Step 5. : The value of the attribute\n            : adsl2LineCmndConfLdsfFailReasonreason is set\n            : to success(2).\n12. Another example of use of this table is as follows:\n    Step 1. : The manager creates a row in adsl2SCStatusTable\n            : for a particular ADSL2 line.\n    Step 2. : The DELT is started on the above-mentioned\n\n\n\n            : line by setting the adsl2LineCmndConfLdsf from\n            : inhibit to force.\n    Step 3. : The DELT completes, and valid data is\n            : available.\n    Step 4. : The value of the attribute\n            : adsl2LineCmndConfLdsfFailReasonreason is set\n            : to success(2).")
adsl2SCStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2SCStatusDirection"))
if mibBuilder.loadTexts: adsl2SCStatusEntry.setDescription("The table Adsl2SCStatusEntry contains status parameters\nof the ADSL2 sub-carriers.\nThe index of this table is an interface index where the\ninterface has an ifType of adsl2plus(238).")
adsl2SCStatusDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 1), Adsl2Direction()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2SCStatusDirection.setDescription("The direction of the sub-carrier is either\nupstream or downstream.")
adsl2SCStatusMtime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusMtime.setDescription("SNR Measurement Time.  The number of symbols used to\nmeasure the SNR values on the respective transmission\ndirection.  It should correspond to the value specified in the\nrecommendation (e.g., the number of symbols in 1 second\ntime interval for G.992.3).  This parameter corresponds to\n1 second in loop diagnostic procedure and should be updated\notherwise.")
adsl2SCStatusSnr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusSnr.setDescription("The SNR Margin per sub-carrier, expressing the ratio between\nthe received signal power and received noise power per\nsubscriber.  It is an array of 512 octets, designed for\nsupporting up to 512 (downstream) sub-carriers.\nThe number of utilized octets on downstream direction depends\non NSCds, and on upstream direction it depends on NSCus.  This\nvalue is referred to here as NSC.\nOctet i (0 <= i < NSC) is set to a value in the range 0 to\n254 to indicate that the respective downstream or upstream sub-\ncarrier i has SNR of: (-32 + Adsl2SubcarrierSnr(i)/2) in dB\n(i.e., -32 to 95dB).\nThe special value 255 means that no measurement could be done\nfor the subcarrier because it is out of the PSD mask passband\nor that the noise PSD is out of range to be represented.\nEach value in this array is 8 bits wide.")
adsl2SCStatusBitsAlloc = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusBitsAlloc.setDescription("The bits allocation per sub-carrier.  An array of 256 octets\n(512 nibbles), designed for supporting up to 512 (downstream)\nsub-carriers.\nThe number of utilized nibbles on downstream direction depends\non NSCds, and on upstream direction it depends on NSCus.  This\nvalue is referred to here as NSC.\nNibble i (0 <= i < NSC) is set to a value in the range 0\nto 15 to indicate that the respective downstream or upstream\nsub-carrier i has the same amount of bits allocation.")
adsl2SCStatusGainAlloc = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusGainAlloc.setDescription("The gain allocation per sub-carrier.  An array of 512 16-bits\nvalues, designed for supporting up to 512 (downstream) sub-\ncarriers.\nThe number of utilized octets on downstream direction depends\non NSCds, and on upstream direction it depends on NSCus.  This\nvalue is referred to here as NSC.\nValue i (0 <= i < NSC) is in the range 0 to 4093 to indicate\nthat the respective downstream or upstream sub-carrier i has the\nsame amount of gain value.\nThe gain value is represented as a multiple of 1/512 on a\nlinear scale.  Each value in this array is 16 bits wide and is\nstored in big endian format.")
adsl2SCStatusTssi = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 6), Adsl2Tssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusTssi.setDescription("The transmit spectrum shaping (TSSi) breakpoints expressed\nas the set of breakpoints exchanged during G.994.1.\nEach breakpoint is a pair of values occupying 3 octets with the\nfollowing structure:\nFirst 2 octets - Index of the subcarrier used in the context of\n\n\n\n                 the breakpoint.\nThird octet    - The shaping parameter at the breakpoint.\nSubcarrier index is an unsigned number in the range 1 to either\nNSCds (downstream direction) or NSCus (upstream direction).\nThe shaping parameter value is in the range 0 to 127 (units of\n-0.5dB).  The special value 127 indicates that the subcarrier\nis not transmitted.")
adsl2SCStatusLinScale = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusLinScale.setDescription("The scale factor to be applied to the H(f) linear\nrepresentation values for the respective transmission direction.\nThis parameter is only available after a loop diagnostic\nprocedure.")
adsl2SCStatusLinReal = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusLinReal.setDescription("An array of up to 512 complex H(f) linear representation\nvalues in linear scale for the respective transmission\ndirection.  It is designed to support up to 512 (downstream)\nsub-carriers.\nThe number of utilized values on downstream direction depends\non NSCds, and on upstream direction it depends on NSCus.  This\nvalue is referred to here as NSC.\nEach array entry represents the real component [referred to here\nas a(i)] of Hlin(f = i*Df) value for a particular sub-carrier\nindex i (0 <= i < NSC).\nHlin(f) is represented as ((scale/2^15)*((a(i)+j*b(i))/2^15)),\nwhere scale is Adsl2SubcarrierLinScale and a(i) and b(i)\n[provided by the Adsl2SubcarrierLinImg object] are in the range\n(-2^15+1) to (+2^15-1).\nA special value a(i)=b(i)= -2^15 indicates that no measurement\ncould be done for the subcarrier because it is out of the\npassband or that the attenuation is out of range to be\nrepresented.  This parameter is only available after a loop\ndiagnostic procedure.\n\n\n\nEach value in this array is 16 bits wide and is stored in big\nendian format.")
adsl2SCStatusLinImg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusLinImg.setDescription("An array of up to 512 complex H(f) linear representation\nvalues in linear scale for the respective transmission\ndirection.  It is designed to support up to 512 (downstream)\nsub-carriers.\nThe number of utilized values on downstream direction depends\non NSCds, and on upstream direction it depends on NSCus.  This\nvalue is referred to here as NSC.\nEach array entry represents the imaginary component [referred\nto here as b(i)] of Hlin(f = i*Df) value for a particular sub-\ncarrier index i (0 <= i < NSC).\nHlin(f) is represented as ((scale/2^15)*((a(i)+j*b(i))/2^15)),\nwhere scale is Adsl2SubcarrierLinScale and a(i) [provided by\nthe Adsl2SubcarrierLinReal object] and b(i) are in the range\n(-2^15+1) to (+2^15-1).\nA special value a(i)=b(i)= -2^15 indicates that no measurement\ncould be done for the subcarrier because it is out of the\npassband or that the attenuation is out of range to be\nrepresented.  This parameter is only available after a loop\ndiagnostic procedure.\nEach value in this array is 16 bits wide and is stored in big\nendian format.")
adsl2SCStatusLogMt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusLogMt.setDescription("The number of symbols used to measure the H(f) logarithmic\nmeasurement values for the respective transmission direction.\nThis parameter should correspond to the value specified in the\nrecommendation (e.g., the number of symbols in 1 second\ntime interval for G.992.3).  This parameter corresponds to 1\nsecond in loop diagnostic procedure and should be updated in\ninitialization")
adsl2SCStatusLog = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusLog.setDescription("An array of up to 512 real H(f) logarithmic representation\nvalues in dB for the respective transmission direction.  It is\ndesigned to support up to 512 (downstream) sub-carriers.\nThe number of utilized values on downstream direction depends\non NSCds, and on upstream direction it depends on NSCus.  This\nvalue is referred to here as NSC.\nEach array entry represents the real Hlog(f = i*Df) value for a\nparticular sub-carrier index i, (0 <= i < NSC).\nThe real Hlog(f) value is represented as (6-m(i)/10), with m(i)\nin the range 0 to 1022.  A special value m=1023 indicates that\nno measurement could be done for the subcarrier because it is\nout of the passband or that the attenuation is out of range to\nbe represented.  This parameter is applicable in loop\ndiagnostic procedure and initialization.\nEach value in this array is 16 bits wide and is stored\nin big endian format.")
adsl2SCStatusQlnMt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusQlnMt.setDescription("The number of symbols used to measure the Quiet Line Noise\nvalues on the respective transmission direction.  This\nparameter should correspond to the value specified in the\nrecommendation (e.g., the number of symbols in 1 second time\ninterval for G.992.3).  This parameter corresponds to 1 second\nin loop diagnostic procedure and should be updated in\ninitialization ")
adsl2SCStatusQln = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusQln.setDescription("An array of up to 512 real Quiet Line Noise values in dBm/Hz\nfor the respective transmission direction.  It is designed for\nup to 512 (downstream) sub-carriers.\nThe number of utilized values on downstream direction depends\non NSCds, and on upstream direction it depends on NSCus.  This\nvalue is referred to here as NSC.\nEach array entry represents the QLN(f = i*Df) value for a\nparticular sub-carrier index i, (0 <= i < NSC).\nThe QLN(f) is represented as ( -23-n(i)/2), with n(i) in the\nrange 0 to 254.  A special value n(i)=255 indicates that no\nmeasurement could be done for the subcarrier because it is out\nof the passband or that the noise PSD is out of range to be\nrepresented.\nThis parameter is applicable in loop diagnostic procedure and\ninitialization.  Each value in this array is 8 bits wide.")
adsl2SCStatusLnAtten = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,1270),ValueRangeConstraint(2147483646,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusLnAtten.setDescription("When referring to the downstream direction, it is the measured\ndifference in the total power transmitted by the ATU-C and the\ntotal power received by the ATU-R over all sub-carriers during\ndiagnostics mode.\nWhen referring to the upstream direction, it is the measured\ndifference in the total power transmitted by the ATU-R and the\ntotal power received by the ATU-C over all sub-carriers during\ndiagnostics mode.\nIt ranges from 0 to 1270 units of 0.1 dB (physical values are\n0 to 127 dB).\nA special value of 0x7FFFFFFF (2147483647) indicates the line\nattenuation is out of range to be represented.\nA special value of 0x7FFFFFFE (2147483646) indicates the line\nattenuation measurement is unavailable.\nThis object reflects the value of the parameter following the\nmost recent DELT performed on the associated line.  Once\nthe DELT process is over, the parameter no longer changes\nuntil the row is deleted or a new DELT process is initiated.")
adsl2SCStatusSigAtten = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,1270),ValueRangeConstraint(2147483646,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusSigAtten.setDescription("When referring to the downstream direction, it is the measured\ndifference in the total power transmitted by the\nATU-C and the total power received by the ATU-R over all sub-\ncarriers during Showtime after the diagnostics mode.\nWhen referring to the upstream direction, it is the measured\ndifference in the total power transmitted by the\nATU-R and the total power received by the ATU-C over all sub-\ncarriers during Showtime after the diagnostics mode.\nIt ranges from 0 to 1270 units of 0.1 dB (physical values\nare 0 to 127 dB).\nA special value of 0x7FFFFFFF (2147483647) indicates the\nsignal attenuation is out of range to be represented.\nA special value of 0x7FFFFFFE (2147483646) indicates the\nsignal attenuation measurement is unavailable.\nThis object reflects the value of the parameter following the\nmost recent DELT performed on the associated line.  Once\nthe DELT process is over, the parameter no longer changes\nuntil the row is deleted or a new DELT process is initiated.")
adsl2SCStatusSnrMargin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-640,630),ValueRangeConstraint(2147483646,2147483647),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusSnrMargin.setDescription("SNR Margin is the maximum increase in dB of the noise power\nreceived at the ATU (ATU-R on downstream direction and ATU-C\non upstream direction), such that the BER requirements are met\nfor all bearer channels received at the ATU.  It ranges from\n-640 to 630 units of 0.1 dB (physical values are -64 to\n63 dB).\nA special value of 0x7FFFFFFF (2147483647) indicates the\nSNR Margin is out of range to be represented.\nA special value of 0x7FFFFFFE (2147483646) indicates the\nSNR Margin measurement is currently unavailable.\nThis object reflects the value of the parameter following the\nmost recent DELT performed on the associated line.  Once\n\n\n\nthe DELT process is over, the parameter no longer changes\nuntil the row is deleted or a new DELT process is initiated.")
adsl2SCStatusAttainableRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusAttainableRate.setDescription("Maximum Attainable Data Rate.  The maximum net data rate\ncurrently attainable by the ATU-C transmitter and ATU-R\nreceiver (when referring to downstream direction) or by the\nATU-R transmitter and ATU-C receiver (when referring to\nupstream direction).  Value is coded in bits/second.\nThis object reflects the value of the parameter following the\nmost recent DELT performed on the associated line.  Once\nthe DELT process is over, the parameter no longer changes\nuntil the row is deleted or a new DELT process is initiated.")
adsl2SCStatusActAtp = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2SCStatusActAtp.setDescription("Actual Aggregate Transmit Power from the ATU (ATU-R on\ndownstream direction and ATU-C on upstream direction), at the\ninstant of measurement.  It ranges from -310 to 310 units of\n0.1 dB (physical values are -31 to 31 dBm).  A value of all\n1's indicates the measurement is out of range to be\nrepresented.\nThis object reflects the value of the parameter following the\nmost recent DELT performed on the associated line.  Once\nthe DELT process is over, the parameter no longer changes\nuntil the row is deleted or a new DELT process is initiated.")
adsl2SCStatusRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 2, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2SCStatusRowStatus.setDescription("Row Status.  The manager may create and delete rows\nof this table.  Please see the description of\nadsl2SCStatusTable above for more details.")
adsl2Inventory = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 3))
adsl2LineInventoryTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1))
if mibBuilder.loadTexts: adsl2LineInventoryTable.setDescription("The table adsl2LineInventoryTable contains inventory of the\nADSL2 units.")
adsl2LineInventoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2LInvUnit"))
if mibBuilder.loadTexts: adsl2LineInventoryEntry.setDescription("The table adsl2LineInventoryTable contains inventory of the\nADSL2 units.\nThe index of this table is an interface index where the\ninterface has an ifType of adsl2plus(238).")
adsl2LInvUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 1), Adsl2Unit()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2LInvUnit.setDescription("The termination unit atuc(1) or atur(2).")
adsl2LInvG994VendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LInvG994VendorId.setDescription("The ATU G.994.1 Vendor ID as inserted in the G.994.1 CL/CLR\nmessage.  It consists of 8 binary octets, including a country\ncode followed by a (regionally allocated) provider code, as\ndefined in Recommendation T.35.")
adsl2LInvSystemVendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LInvSystemVendorId.setDescription("The ATU System Vendor ID (identifies the ATU system\nintegrator) as inserted in the Overhead Messages (both ATUs\nfor G.992.3 and G.992.4) or in the Embedded Operations\nChannel (only ATU-R in G.992.1 and G.992.2).  It consists of\n8 binary octets, with the same format as used for\nAdsl2InvG994VendorId.")
adsl2LInvVersionNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LInvVersionNumber.setDescription("The ATU version number (vendor-specific information) as\ninserted in the Overhead Messages (both ATUs for G.992.3 and\nG.992.4) or in the Embedded Operations Channel (only ATU-R in\nG.992.1 and G.992.2).  It consists of up to 16 binary octets.")
adsl2LInvSerialNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LInvSerialNumber.setDescription("The ATU serial number (vendor-specific information) as\ninserted in the Overhead Messages (both ATUs for G.992.3 and\nG.992.4) or in the Embedded Operations Channel (only ATU-R in\n\n\n\nG.992.1 and G.992.2).  It is vendor-specific information.  It\nconsists of up to 32 ASCII characters.")
adsl2LInvSelfTestResult = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LInvSelfTestResult.setDescription("The ATU self-test result, coded as a 32-bit value.  The\nmost significant octet of the result is '0' if the self-test\npassed, and '1' if the self-test failed.  The interpretation\nof the other octets is vendor discretionary.")
adsl2LInvTransmissionCapabilities = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 3, 1, 1, 7), Adsl2TransmissionModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2LInvTransmissionCapabilities.setDescription("The ATU transmission system capability list of the different\ncoding types.  It is coded in a bit-map representation with 1\nor more bits set.  A bit set to '1' means that the ATU\nsupports the respective coding.  The value may be derived\nfrom the handshaking procedures defined in G.994.1.  A set\nof ADSL2 line transmission modes, with one bit per mode.")
adsl2PM = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 4))
adsl2PMLine = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1))
adsl2PMLineCurrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1))
if mibBuilder.loadTexts: adsl2PMLineCurrTable.setDescription("The table adsl2PMLineCurrTable contains current Performance\nMonitoring results of ADSL2 lines.")
adsl2PMLineCurrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMLCurrUnit"))
if mibBuilder.loadTexts: adsl2PMLineCurrEntry.setDescription("The table adsl2PMLineCurrTable contains current Performance\nMonitoring results of ADSL2 lines.\nThe index of this table consists of an interface index, where\nthe interface has an ifType of adsl2plus(238), along with a\ntermination unit.\nThe PM counters in the table are not reset even when the XTU\nis reinitialized.  They are reinitialized only when the\nagent itself is reset or reinitialized.")
adsl2PMLCurrUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 1), Adsl2Unit()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2PMLCurrUnit.setDescription("The termination unit atuc(1) or atur(2).")
adsl2PMLCurrValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrValidIntervals.setDescription("Valid intervals.")
adsl2PMLCurrInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInvalidIntervals.setDescription("Invalid intervals.")
adsl2PMLCurr15MTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 4), HCPerfTimeElapsed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr15MTimeElapsed.setDescription("Total elapsed seconds since this PM interval began.\nNote that the PM counters are not reset even when the XTU\nis reinitialized.  They are reinitialized only when the\nagent itself is reset or reinitialized.")
adsl2PMLCurr15MFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr15MFecs.setDescription("Count of seconds during this interval where there was at least\none FEC correction event for one or more bearer channels in\nthis line.  This parameter is inhibited during UAS or SES.")
adsl2PMLCurr15MEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr15MEs.setDescription("Count of seconds during this interval where there was:\nATU-C: CRC-8 >= 1 for one or more bearer channels OR\n       LOS >= 1 OR SEF >=1 OR LPR >= 1\nATU-R: FEBE >= 1 for one or more bearer channels OR\n       LOS-FE >=1 OR RDI >=1 OR LPR-FE >=1 .\nThis parameter is inhibited during UAS.")
adsl2PMLCurr15MSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr15MSes.setDescription("Count of seconds during this interval where there was:\nATU-C: (CRC-8 summed over all bearer channels) >= 18 OR\n       LOS >= 1 OR SEF >= 1 OR LPR >= 1\nATU-R: (FEBE summed over all bearer channels) >= 18 OR\n       LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1 .\nThis parameter is inhibited during UAS.")
adsl2PMLCurr15MLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr15MLoss.setDescription("Count of seconds during this interval where there was LOS (or\nLOS-FE for ATU-R).")
adsl2PMLCurr15MUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr15MUas.setDescription("Count of seconds in Unavailability State during this\ninterval.  Unavailability begins at the onset of 10\ncontiguous severely-errored seconds, and ends at the\nonset of 10 contiguous seconds with no severely-errored\nseconds.")
adsl2PMLCurr1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayValidIntervals.setDescription("Valid intervals.")
adsl2PMLCurr1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayInvalidIntervals.setDescription("Invalid intervals.")
adsl2PMLCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 12), HCPerfTimeElapsed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayTimeElapsed.setDescription("Total elapsed seconds since this PM interval began.\nNote that the PM counters are not reset even when the XTU\nis reinitialized.  They are reinitialized only when the\nagent itself is reset or reinitialized.")
adsl2PMLCurr1DayFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayFecs.setDescription("Count of seconds during this interval where there was at least\none FEC correction event for one or more bearer channels in\nthis line.  This parameter is inhibited during UAS or SES.")
adsl2PMLCurr1DayEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayEs.setDescription("Count of seconds during this interval where there was:\nATU-C: CRC-8 >= 1 for one or more bearer channels OR\n       LOS >= 1 OR SEF >= 1 OR LPR >= 1\nATU-R: FEBE >= 1 for one or more bearer channels OR\n       LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1.\nThis parameter is inhibited during UAS.")
adsl2PMLCurr1DaySes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DaySes.setDescription("Count of seconds during this interval where there was:\nATU-C: (CRC-8 summed over all bearer channels) >= 18 OR\n        LOS >= 1 OR SEF >= 1 OR LPR >= 1\nATU-R: (FEBE summed over all bearer channels) >= 18 OR\n       LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1\nThis parameter is inhibited during UAS.")
adsl2PMLCurr1DayLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayLoss.setDescription("Count of seconds during this interval where there was LOS (or\nLOS-FE for ATU-R).")
adsl2PMLCurr1DayUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurr1DayUas.setDescription("Count of seconds in Unavailability State during this interval.\nUnavailability begins at the onset of 10 contiguous severely-\nerrored seconds, and ends at the onset of 10 contiguous\nseconds with no severely-errored seconds.")
adsl2PMLineCurrInitTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2))
if mibBuilder.loadTexts: adsl2PMLineCurrInitTable.setDescription("The table adsl2PMLineCurrInitTable contains current\ninitialization counters of the ADSL2 line.\nThe PM counters in the table are not reset even when the XTU\nis reinitialized.  They are reinitialized only when the\nagent itself is reset or reinitialized.")
adsl2PMLineCurrInitEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adsl2PMLineCurrInitEntry.setDescription("The table adsl2PMLineCurrInitTable contains current\ninitialization counters of the ADSL2 line.\nThe index of this table consists of an interface index, where\nthe interface has an ifType of adsl2plus(238), and a\ntermination unit.")
adsl2PMLCurrInit15MTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit15MTimeElapsed.setDescription("Total elapsed seconds since this PM interval began.\nNote that the PM counters are not reset even when the XTU\nis reinitialized.  They are reinitialized only when the\nagent itself is reset or reinitialized.")
adsl2PMLCurrInit15MFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit15MFullInits.setDescription("Count of full initializations attempted on the line\n(successful and failed) during this interval.")
adsl2PMLCurrInit15MFailedFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit15MFailedFullInits.setDescription("Count of failed full initializations on the line during this\ninterval.")
adsl2PMLCurrInit15MShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit15MShortInits.setDescription("Count of short initializations attempted on the line\n(successful and failed) during this interval.")
adsl2PMLCurrInit15MFailedShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit15MFailedShortInits.setDescription("Count of failed short initializations on the line during this\ninterval.")
adsl2PMLCurrInit1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayTimeElapsed.setDescription("Total elapsed seconds since this PM interval began.\nNote that the PM counters are not reset even when the XTU\nis reinitialized.  They are reinitialized only when the\nagent itself is reset or reinitialized.")
adsl2PMLCurrInit1DayFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayFullInits.setDescription("Count of full initializations attempted on the line\n(successful and failed) during this interval.")
adsl2PMLCurrInit1DayFailedFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayFailedFullInits.setDescription("Count of failed full initializations on the line during this\ninterval.")
adsl2PMLCurrInit1DayShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayShortInits.setDescription("Count of short initializations attempted on the line\n(successful and failed) during this interval.")
adsl2PMLCurrInit1DayFailedShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLCurrInit1DayFailedShortInits.setDescription("Count of failed short initializations on the line during this\ninterval.")
adsl2PMLineHist15MinTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3))
if mibBuilder.loadTexts: adsl2PMLineHist15MinTable.setDescription("The table adsl2PMLineHist15MinTable contains PM line history\nfor 15min intervals of the ADSL2 line.")
adsl2PMLineHist15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMLHist15MUnit"), (0, "ADSL2-LINE-MIB", "adsl2PMLHist15MInterval"))
if mibBuilder.loadTexts: adsl2PMLineHist15MinEntry.setDescription("The table adsl2PMLineHist15MinTable contains PM line history\nfor 15min intervals of the ADSL2 line.\nThe index of this table consists of an interface index, where\nthe interface has an ifType of adsl2plus(238), along with a\ntermination unit, and an interval number.")
adsl2PMLHist15MUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 1), Adsl2Unit()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2PMLHist15MUnit.setDescription("The termination unit atuc(1) or atur(2).")
adsl2PMLHist15MInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2PMLHist15MInterval.setDescription("The interval number.")
adsl2PMLHist15MMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MMonitoredTime.setDescription("Total seconds monitored in this interval.")
adsl2PMLHist15MFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MFecs.setDescription("Count of seconds during this interval where there was at least\none FEC correction event for one or more bearer channels in\nthis line.  This parameter is inhibited during UAS or SES.")
adsl2PMLHist15MEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MEs.setDescription("Count of seconds during this interval where there was:\nATU-C: CRC-8 >= 1 for one or more bearer channels OR\n       LOS >= 1 OR SEF >= 1 OR LPR >= 1\nATU-R: FEBE >= 1 for one or more bearer channels OR\n       LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1.\nThis parameter is inhibited during UAS.")
adsl2PMLHist15MSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MSes.setDescription("Count of seconds during this interval where there was:\nATU-C: (CRC-8 summed over all bearer channels) >= 18 OR\n       LOS >= 1 OR SEF >= 1 OR LPR >= 1\nATU-R: (FEBE summed over all bearer channels) >= 18 OR\n       LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1.\nThis parameter is inhibited during UAS.")
adsl2PMLHist15MLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MLoss.setDescription("Count of seconds during this interval where there was LOS (or\nLOS-FE for ATU-R).")
adsl2PMLHist15MUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MUas.setDescription("Count of seconds in Unavailability State during this interval.\nUnavailability begins at the onset of 10 contiguous severely-\nerrored seconds, and ends at the onset of 10 contiguous\nseconds with no severely-errored seconds.")
adsl2PMLHist15MValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist15MValidInterval.setDescription("This variable indicates if the data for this interval is\nvalid.")
adsl2PMLineHist1DayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4))
if mibBuilder.loadTexts: adsl2PMLineHist1DayTable.setDescription("The table adsl2PMLineHist1DayTable contains PM line history\nfor 24-hour intervals of the ADSL2 line.")
adsl2PMLineHist1DayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMLHist1DUnit"), (0, "ADSL2-LINE-MIB", "adsl2PMLHist1DInterval"))
if mibBuilder.loadTexts: adsl2PMLineHist1DayEntry.setDescription("The table adsl2PMLineHist1DayTable contains PM line history\nfor 24-hour intervals of the ADSL2 line.\n\n\n\nThe index of this table consists of an interface index, where\nthe interface has an ifType of adsl2plus(238), along with a\ntermination unit, and an interval number.")
adsl2PMLHist1DUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 1), Adsl2Unit()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2PMLHist1DUnit.setDescription("The termination unit.")
adsl2PMLHist1DInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2PMLHist1DInterval.setDescription("The interval number.")
adsl2PMLHist1DMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DMonitoredTime.setDescription("Total seconds monitored in this interval.")
adsl2PMLHist1DFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DFecs.setDescription("Count of seconds during this interval where there was at least\none FEC correction event for one or more bearer channels in\nthis line.  This parameter is inhibited during UAS or SES.")
adsl2PMLHist1DEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DEs.setDescription("Count of seconds during this interval where there was:\nATU-C: CRC-8 >= 1 for one or more bearer channels OR\n       LOS >= 1 OR SEF >= 1 OR LPR >= 1\nATU-R: FEBE >= 1 for one or more bearer channels OR\n       LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1.\nThis parameter is inhibited during UAS.")
adsl2PMLHist1DSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DSes.setDescription("Count of seconds during this interval where there was:\nATU-C: (CRC-8 summed over all bearer channels) >= 18 OR\n        LOS >= 1 OR SEF >> 1 OR LPR >= 1\nATU-R: (FEBE summed over all bearer channels) >= 18 OR\n        LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1.\nThis parameter is inhibited during UAS.")
adsl2PMLHist1DLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DLoss.setDescription("Count of seconds during this interval where there was LOS (or\nLOS-FE for ATU-R).")
adsl2PMLHist1DUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DUas.setDescription("Count of seconds in Unavailability State during this interval.\nUnavailability begins at the onset of 10 contiguous severely-\nerrored seconds, and ends at the onset of 10 contiguous\nseconds with no severely-errored seconds.")
adsl2PMLHist1DValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHist1DValidInterval.setDescription("This variable indicates if the data for this interval is\nvalid.")
adsl2PMLineInitHist15MinTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5))
if mibBuilder.loadTexts: adsl2PMLineInitHist15MinTable.setDescription("The table adsl2PMLineInitHist15MinTable contains PM line\ninitialization history for 15-minute intervals of the ADSL2\nline.")
adsl2PMLineInitHist15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMLHistInit15MInterval"))
if mibBuilder.loadTexts: adsl2PMLineInitHist15MinEntry.setDescription("The table adsl2PMLineInitHist15MinTable contains PM line\n\n\n\ninitialization history for 15 minutes intervals of the ADSL2\nline.\nThe index of this table consists of an interface index, where\nthe interface has an ifType of adsl2plus(238), and an interval\nnumber.")
adsl2PMLHistInit15MInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2PMLHistInit15MInterval.setDescription("The interval number.")
adsl2PMLHistInit15MMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistInit15MMonitoredTime.setDescription("Total seconds monitored in this interval.")
adsl2PMLHistInit15MFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistInit15MFullInits.setDescription("Count of full initializations attempted on the line\n(successful and failed) during this interval.")
adsl2PMLHistInit15MFailedFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistInit15MFailedFullInits.setDescription("Count of failed full initializations on the line during this\ninterval.")
adsl2PMLHistInit15MShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistInit15MShortInits.setDescription("Count of short initializations attempted on the line\n(successful and failed) during this interval.")
adsl2PMLHistInit15MFailedShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistInit15MFailedShortInits.setDescription("Count of failed short initializations on the line during this\ninterval.")
adsl2PMLHistInit15MValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistInit15MValidInterval.setDescription("This variable indicates if the data for this interval is\nvalid.")
adsl2PMLineInitHist1DayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6))
if mibBuilder.loadTexts: adsl2PMLineInitHist1DayTable.setDescription("The table adsl2PMLineInitHist1DayTable contains PM line\ninitialization history for 24-hour intervals of the ADSL2\nline.")
adsl2PMLineInitHist1DayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMLHistinit1DInterval"))
if mibBuilder.loadTexts: adsl2PMLineInitHist1DayEntry.setDescription("The table adsl2PMLineInitHist1DayTable contains PM line\ninitialization history for 24-hour intervals of the ADSL2\nline.\nThe index of this table consists of an interface index, where\nthe interface has an ifType of adsl2plus(238), and an interval\nnumber.")
adsl2PMLHistinit1DInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2PMLHistinit1DInterval.setDescription("The interval number.")
adsl2PMLHistinit1DMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistinit1DMonitoredTime.setDescription("Total seconds monitored in this interval.")
adsl2PMLHistinit1DFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistinit1DFullInits.setDescription("Count of full initializations attempted on the line\n(successful and failed) during this interval.")
adsl2PMLHistinit1DFailedFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistinit1DFailedFullInits.setDescription("Count of failed full initializations on the line during this\ninterval.")
adsl2PMLHistinit1DShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistinit1DShortInits.setDescription("Count of short initializations attempted on the line\n(successful and failed) during this interval.")
adsl2PMLHistinit1DFailedShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistinit1DFailedShortInits.setDescription("Count of failed short initializations on the line during this\ninterval.")
adsl2PMLHistinit1DValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 1, 6, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMLHistinit1DValidInterval.setDescription("This variable indicates if the data for this interval is\nvalid.")
adsl2PMChannel = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2))
adsl2PMChCurrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1))
if mibBuilder.loadTexts: adsl2PMChCurrTable.setDescription("The table adsl2PMChCurrTable contains current Performance\nMonitoring results of the ADSL2 channel.\nThe PM counters in the table are not reset even when the XTU\nis reinitialized. They are reinitialized only when the\nagent itself is reset or reinitialized.")
adsl2PMChCurrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMChCurrUnit"))
if mibBuilder.loadTexts: adsl2PMChCurrEntry.setDescription("The table adsl2PMChCurrTable contains current Performance\nMonitoring results of the ADSL2 channel.\nThe index of this table consists of an interface index, where\nthe interface has an ifType value that is applicable\nfor a DSL channel, along with a termination unit.")
adsl2PMChCurrUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 1), Adsl2Unit()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2PMChCurrUnit.setDescription("The termination unit.")
adsl2PMChCurrValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurrValidIntervals.setDescription("Valid intervals.")
adsl2PMChCurrInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurrInvalidIntervals.setDescription("Invalid intervals.")
adsl2PMChCurr15MTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 4), HCPerfTimeElapsed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr15MTimeElapsed.setDescription("Total elapsed seconds since this PM interval began.\nNote that the PM counters are not reset even when the XTU\nis reinitialized. They are reinitialized only when the\nagent itself is reset or reinitialized.")
adsl2PMChCurr15MCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr15MCodingViolations.setDescription("Count of CRC-8 (FEBE for ATU-R) anomalies occurring in the\nchannel during the interval.  This parameter is inhibited\nduring UAS or SES.  If the CRC is applied over multiple\nchannels, then each related CRC-8 (or FEBE) anomaly should\nincrement each of the counters related to the individual\nchannels.")
adsl2PMChCurr15MCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr15MCorrectedBlocks.setDescription("Count of FEC (FFEC for ATU-R) anomalies (corrected code words)\noccurring in the channel during the interval.  This parameter\nis inhibited during UAS or SES.  If the FEC is applied over\nmultiple channels, then each related FEC (or FFEC) anomaly\nshould increment each of the counters related to the\nindividual channels.")
adsl2PMChCurr1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr1DayValidIntervals.setDescription("Valid intervals.")
adsl2PMChCurr1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr1DayInvalidIntervals.setDescription("Invalid intervals.")
adsl2PMChCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 9), HCPerfTimeElapsed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr1DayTimeElapsed.setDescription("Total elapsed seconds since this PM interval began.\nNote that the PM counters are not reset even when the XTU\nis reinitialized. They are reinitialized only when the\nagent itself is reset or reinitialized.")
adsl2PMChCurr1DayCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr1DayCodingViolations.setDescription("Count of CRC-8 (FEBE for ATU-R) anomalies occurring in the\nchannel during the interval.  This parameter is inhibited\nduring UAS or SES.  If the CRC is applied over multiple\nchannels, then each related CRC-8 (or FEBE) anomaly should\n\n\n\nincrement each of the counters related to the individual\nchannels.")
adsl2PMChCurr1DayCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChCurr1DayCorrectedBlocks.setDescription("Count of FEC (FFEC for ATU-R) anomalies (corrected code words)\noccurring in the channel during the interval.  This parameter\nis inhibited during UAS or SES.  If the FEC is applied over\nmultiple channels, then each related FEC (or FFEC) anomaly\nshould increment each of the counters related to the\nindividual channels.")
adsl2PMChHist15MinTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2))
if mibBuilder.loadTexts: adsl2PMChHist15MinTable.setDescription("The table adsl2PMChCurrTable contains current Performance\nMonitoring results of the ADSL2 channel.")
adsl2PMChHist15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMChHist15MUnit"), (0, "ADSL2-LINE-MIB", "adsl2PMChHist15MInterval"))
if mibBuilder.loadTexts: adsl2PMChHist15MinEntry.setDescription("The table adsl2PMChCurrTable contains current Performance\nMonitoring results of the ADSL2 channel.\nThe index of this table consists of an interface index, where\nthe interface has an ifType value that is applicable\nfor a DSL channel, along with a termination unit, and the\ninterval number.")
adsl2PMChHist15MUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1, 1), Adsl2Unit()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2PMChHist15MUnit.setDescription("The termination unit.")
adsl2PMChHist15MInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2PMChHist15MInterval.setDescription("The interval number.")
adsl2PMChHist15MMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist15MMonitoredTime.setDescription("Total seconds monitored in this interval.")
adsl2PMChHist15MCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist15MCodingViolations.setDescription("Count of CRC-8 (FEBE for ATU-R) anomalies occurring in the\nchannel during the interval.  This parameter is inhibited\nduring UAS or SES.  If the CRC is applied over multiple\nchannels, then each related CRC-8 (or FEBE) anomaly should\nincrement each of the counters related to the individual\nchannels.")
adsl2PMChHist15MCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist15MCorrectedBlocks.setDescription("Count of FEC (FFEC for ATU-R) anomalies (corrected code words)\noccurring in the channel during the interval.  This parameter\nis inhibited during UAS or SES.  If the FEC is applied over\nmultiple channels, then each related FEC (or FFEC) anomaly\nshould increment each of the counters related to the\nindividual channels.")
adsl2PMChHist15MValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist15MValidInterval.setDescription("This variable indicates if the data for this interval is\nvalid.")
adsl2PMChHist1DTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3))
if mibBuilder.loadTexts: adsl2PMChHist1DTable.setDescription("The table adsl2PMChHist1DayTable contains PM channel history\nfor 1-day intervals of ADSL2.")
adsl2PMChHist1DEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADSL2-LINE-MIB", "adsl2PMChHist1DUnit"), (0, "ADSL2-LINE-MIB", "adsl2PMChHist1DInterval"))
if mibBuilder.loadTexts: adsl2PMChHist1DEntry.setDescription("The table adsl2PMChHist1DayTable contains PM channel history\nfor 1-day intervals of ADSL2.\nThe index of this table consists of an interface index, where\nthe interface has an ifType value that is applicable\nfor a DSL channel, along with a termination unit, and the\ninterval number.")
adsl2PMChHist1DUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1, 1), Adsl2Unit()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2PMChHist1DUnit.setDescription("The termination unit.")
adsl2PMChHist1DInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2PMChHist1DInterval.setDescription("The interval number.")
adsl2PMChHist1DMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist1DMonitoredTime.setDescription("Total seconds monitored in this interval.")
adsl2PMChHist1DCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist1DCodingViolations.setDescription("Count of CRC-8 (FEBE for ATU-R) anomalies occurring in the\nchannel during the interval.  This parameter is inhibited\nduring UAS or SES.  If the CRC is applied over multiple\n\n\n\nchannels, then each related CRC-8 (or FEBE) anomaly should\nincrement each of the counters related to the individual\nchannels.")
adsl2PMChHist1DCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist1DCorrectedBlocks.setDescription("Count of FEC (FFEC for ATU-R) anomalies (corrected code words)\noccurring in the channel during the interval.  This parameter\nis inhibited during UAS or SES.  If the FEC is applied over\nmultiple channels, then each related FEC (or FFEC) anomaly\nshould increment each of the counters related to the\nindividual channels.")
adsl2PMChHist1DValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 4, 2, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2PMChHist1DValidInterval.setDescription("This variable indicates if the data for this interval is\nvalid.")
adsl2Profile = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 5))
adsl2ProfileLine = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1))
adsl2LineConfTemplateTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1))
if mibBuilder.loadTexts: adsl2LineConfTemplateTable.setDescription("The table adsl2LineConfTemplateTable contains ADSL2 line\nconfiguration templates.\n\nEntries in this table MUST be maintained in a\npersistent manner.")
adsl2LineConfTemplateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1)).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2LConfTempTemplateName"))
if mibBuilder.loadTexts: adsl2LineConfTemplateEntry.setDescription("The table adsl2LineConfTemplateTable contains the ADSL2 line\nconfiguration template.\nA default template with an index of 'DEFVAL' will\nalways exist, and its parameters will be set to vendor-\nspecific values, unless otherwise specified in this document.")
adsl2LConfTempTemplateName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2LConfTempTemplateName.setDescription("This object identifies a row in this table.")
adsl2LConfTempLineProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempLineProfile.setDescription("The value of this object identifies the row in the ADSL2 Line\nConfiguration Profile Table, (adsl2LineConfProfTable),\nwhich applies for this ADSL2 line.")
adsl2LConfTempChan1ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan1ConfProfile.setDescription("The value of this object identifies the row in the ADSL2\nChannel Configuration Profile Table,\n(adsl2ChConfProfileTable) that applies to ADSL2 bearer\nchannel #1.  The channel profile name specified here must\nmatch the name of an existing row in the\nadsl2ChConfProfileTable table.")
adsl2LConfTempChan1RaRatioDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan1RaRatioDs.setDescription("Rate Adaptation Ratio.  The ratio (in %) that should be taken\ninto account for the bearer channel #1 when performing rate\nadaptation on Downstream.  The ratio refers to the available\ndata rate in excess of the Minimum Data Rate, summed over all\nbearer channels.  Also, the 100 -\nadsl2LConfTempChan1RaRatioDs is the ratio of excess data\nrate to be assigned to all other bearer channels on Downstream\ndirection.  The sum of rate adaptation ratios over all bearers\non the same direction shall be equal to 100%.")
adsl2LConfTempChan1RaRatioUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan1RaRatioUs.setDescription("Rate Adaptation Ratio.  The ratio (in %) that should be taken\ninto account for the bearer channel #1 when performing rate\nadaptation on Upstream.  The ratio refers to the available\ndata rate in excess of the Minimum Data Rate, summed over all\nbearer channels.  Also, the\n\n\n\n100 - adsl2LConfTempChan1RaRatioUs is the ratio of excess\ndata rate to be assigned to all other bearer channels on\nUpstream direction.  The sum of rate adaptation ratios over\nall bearers on the same direction shall be equal to 100%.")
adsl2LConfTempChan2ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan2ConfProfile.setDescription("The value of this object identifies the row in the ADSL2\nChannel Configuration Profile Table\n(adsl2ChConfProfileTable) that applies to ADSL2 bearer\nchannel #2.  If the channel is unused, then the object is set\nto a zero-length string.\nThis object may be set to a zero-length string only if\nadsl2LConfTempChan3ConfProfile contains a zero-length\nstring.")
adsl2LConfTempChan2RaRatioDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan2RaRatioDs.setDescription("Rate Adaptation Ratio.  The ratio (in %) that should be taken\ninto account for the bearer channel #2 when performing rate\nadaptation on Downstream.  The ratio refers to the available\ndata rate in excess of the Minimum Data Rate, summed over all\nbearer channels.  Also, the\n100 - adsl2LConfTempChan2RaRatioDs is the ratio of excess\ndata rate to be assigned to all other bearer channels on\nDownstream direction.  The sum of rate adaptation ratios\nover all bearers on the same direction shall be equal to\n100%.")
adsl2LConfTempChan2RaRatioUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan2RaRatioUs.setDescription("Rate Adaptation Ratio.  The ratio (in %) that should be taken\ninto account for the bearer channel #2 when performing rate\nadaptation on Upstream.  The ratio refers to the available\ndata rate in excess of the Minimum Data Rate, summed over all\nbearer channels.  Also, the\n100 - adsl2LConfTempChan2RaRatioUs is the ratio of excess\ndata rate to be assigned to all other bearer channels on\nUpstream direction.  The sum of rate adaptation ratios over\nall bearers on the same direction shall be equal to 100%.")
adsl2LConfTempChan3ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan3ConfProfile.setDescription("The value of this object identifies the row in the ADSL2\nChannel Configuration Profile Table\n(adsl2ChConfProfileTable) that applies to ADSL2 bearer\nchannel #3.  If the channel is unused, then the object is set\nto a zero-length string.\nThis object may be set to a zero-length string only if\nadsl2LConfTempChan4ConfProfile contains a zero-length\nstring.\nThis object may be set to a non-zero-length string only if\nadsl2LConfTempChan2ConfProfile contains a non-zero-length\nstring.")
adsl2LConfTempChan3RaRatioDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan3RaRatioDs.setDescription("Rate Adaptation Ratio.  The ratio (in %) that should be taken\ninto account for the bearer channel #3 when performing rate\nadaptation on Downstream.  The ratio refers to the available\ndata rate in excess of the Minimum Data Rate, summed over all\nbearer channels.  Also, the 100 -\nadsl2LConfTempChan3RaRatioDs is the ratio of excess data\nrate to be assigned to all other bearer channels on Downstream\n\n\n\ndirection.  The sum of rate adaptation ratios over all bearers\non the same direction shall be equal to 100%.")
adsl2LConfTempChan3RaRatioUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan3RaRatioUs.setDescription("Rate Adaptation Ratio.  The ratio (in %) that should be taken\ninto account for the bearer channel #3 when performing rate\nadaptation on Upstream.  The ratio refers to the available\ndata rate in excess of the Minimum Data Rate, summed over all\nbearer channels.  Also, the\n100 - adsl2LConfTempChan3RaRatioUs is the ratio of excess\ndata rate to be assigned to all other bearer channels on\nUpstream direction.  The sum of rate adaptation ratios over\nall bearers on the same direction shall be equal to 100%.")
adsl2LConfTempChan4ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan4ConfProfile.setDescription("The value of this object identifies the row in the ADSL2\nChannel Configuration Profile Table\n(adsl2ChConfProfileTable) that applies to ADSL2 bearer\nchannel #4.  If the channel is unused, then the object is set\nto a zero-length string.\nThis object may be set to a non-zero-length string only if\nadsl2LConfTempChan3ConfProfile contains a non-zero-length\nstring.")
adsl2LConfTempChan4RaRatioDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan4RaRatioDs.setDescription("Rate Adaptation Ratio.  The ratio (in %) that should be taken\n\n\n\ninto account for the bearer channel #4 when performing rate\nadaptation on Downstream.  The ratio refers to the available\ndata rate in excess of the Minimum Data Rate, summed over all\nbearer channels.  Also, the 100 -\nadsl2LConfTempChan4RaRatioDs is the ratio of\nexcess data rate to be assigned to all other bearer channels.\nThe sum of rate adaptation ratios over all bearers on the same\ndirection shall sum to 100%.")
adsl2LConfTempChan4RaRatioUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempChan4RaRatioUs.setDescription("Rate Adaptation Ratio.  The ratio (in %) that should be taken\ninto account for the bearer channel #4 when performing rate\nadaptation on Upstream.  The ratio refers to the available\ndata rate in excess of the Minimum Data Rate, summed over\nall bearer channels.  Also, the 100 -\nadsl2LConfTempChan4RaRatioUs is the\nratio of excess data rate to be assigned to all other bearer\nchannels.  The sum of rate adaptation ratios over all bearers\non the same direction shall sum to 100%.")
adsl2LConfTempRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfTempRowStatus.setDescription("This object is used to create a new row or to modify or\ndelete an existing row in this table.\n\nA template is activated by setting this object to 'active'.\nWhen 'active' is set, the system will validate the template.\n\nBefore a template can be deleted or taken out of service\n(by setting this object to 'destroy' or 'notInService'),\nit must first be unreferenced from all associated\nlines.")
adsl2LineConfProfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2))
if mibBuilder.loadTexts: adsl2LineConfProfTable.setDescription("The table adsl2LineConfProfTable contains ADSL2 line profile\nconfiguration.\n\nEntries in this table MUST be maintained in a\npersistent manner.")
adsl2LineConfProfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1)).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2LConfProfProfileName"))
if mibBuilder.loadTexts: adsl2LineConfProfEntry.setDescription("The table adsl2LineConfProfTable contains ADSL2 line profile\nconfiguration.\n\nA default profile with an index of 'DEFVAL' will\nalways exist, and its parameters will be set to vendor-\nspecific values, unless otherwise specified in this document.")
adsl2LConfProfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2LConfProfProfileName.setDescription("This object identifies a row in this table.")
adsl2LConfProfScMaskDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 2), Adsl2ScMaskDs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfScMaskDs.setDescription("Sub-carriers mask.  A bitmap of 512 bits that allows masking\nup to 512 downstream sub-carriers, depending on NSCds.  If bit\ni (0 <= i < NSCds) is set to '1', the respective\ndownstream sub-carrier i is masked, and if set to '0', the\nrespective sub-carrier is unmasked.  Note that there should\nalways be unmasked sub-carriers (i.e., the object cannot be\nall 1's).  Also note that if NSCds < 512, all bits\ni (NSCds < i <= 512) should be set to '1'.")
adsl2LConfProfScMaskUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 3), Adsl2ScMaskUs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfScMaskUs.setDescription("Sub-carriers mask.  A bitmap of 64 bits that allows masking\nup to 64 downstream sub-carriers, depending on NSCds.  If\nbit i (0 <= i < NSCus) is set to '1', the respective\nupstream sub-carrier i is masked, and if set to '0', the\nrespective sub-carrier is unmasked.  Note that there\n\n\n\nshould always be unmasked sub-carriers (i.e., the object\ncannot be all 1's).  Also note that if NSCus <\n64, all bits i (NSCus < i <= 64) should be set to '1'.")
adsl2LConfProfRfiBandsDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 4), Adsl2RfiDs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRfiBandsDs.setDescription("The subset of downstream PSD mask breakpoints that shall be\nused to notch an RFI band.\nThe specific interpolation around these points is defined in\nG.992.5.  It is a bitmap of 512 bits that allows referring to\nup to 512 downstream sub-carriers, depending on NSCds.  If bit\ni (0 <= i < NSCds) is set to '1', the respective downstream\nsub-carrier i is part of a notch filter, and if set to '0',\nthe respective sub-carrier is not part of a notch filter.\nThis information complements the specification provided by\nadsl2LConfProfPsdMaskDs.\nNote that if NSCds < 512, all bits i (NSCds<i<512)\nshould be set to '0'.")
adsl2LConfProfRaModeDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 5), Adsl2RaMode().clone('manual')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaModeDs.setDescription("The mode of operation of a rate-adaptive ATU-C in the transmit\ndirection.  The parameter can take three values:\n   manual(1),\n   raInit(2), or\n   dynamicRa(3).")
adsl2LConfProfRaModeUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 6), Adsl2RaMode().clone('manual')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaModeUs.setDescription("The mode of operation of a rate-adaptive ATU-R in the transmit\ndirection.  The parameter can take three values:\n   manual(1),\n\n\n\n   raInit(2), or\n   dynamicRa(3).")
adsl2LConfProfRaUsNrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaUsNrmDs.setDescription("The Downstream Up-Shift Noise Margin value, to be used when\nadsl2LConfProfRaModeDs is set to dynamicRa.  If the downstream\nnoise margin is above this value and stays above it for\nmore than the time specified by the adsl2LConfProfRaUsTimeDs,\nthe ATU-R shall attempt to increase the downstream net data\nrate.  The Downstream Up-Shift Noise Margin ranges from 0 to\n310 units of 0.1 dB (physical values are 0 to 31 dB).")
adsl2LConfProfRaUsNrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaUsNrmUs.setDescription("The Upstream Up-Shift Noise Margin value, to be used when\nadsl2LConfProfRaModeUs is set to dynamicRa.  If the upstream\nnoise margin is above this value and stays above it for more\nthan the time specified by the adsl2LConfProfRaUsTimeUs, the\nATU-C shall attempt to increase the upstream net data rate.\nThe Upstream Up-Shift Noise Margin ranges from 0 to 310 units\nof 0.1 dB (physical values are 0 to 31 dB).")
adsl2LConfProfRaUsTimeDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(3600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaUsTimeDs.setDescription("The Downstream Up-Shift Time Interval, to be used when\nadsl2LConfProfRaModeDs is set to dynamicRa.  The interval of\n\n\n\ntime that the downstream noise margin should stay above the\nDownstream Up-Shift Noise Margin before the ATU-R shall\nattempt to increase the downstream net data rate.  The time\ninterval ranges from 0 to 16383 seconds.")
adsl2LConfProfRaUsTimeUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(3600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaUsTimeUs.setDescription("The Upstream Up-Shift Time Interval, to be used when\nadsl2LConfProfRaModeUs is set to dynamicRa.  The interval of\ntime the upstream noise margin should stay above the\nUpstream Up-Shift Noise Margin before the ATU-C shall\nattempt to increase the upstream net data rate.  The time\ninterval ranges from 0 to 16383 seconds.")
adsl2LConfProfRaDsNrmsDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaDsNrmsDs.setDescription("The Downstream Down-Shift Noise Margin value, to be used when\nadsl2LConfProfRaModeDs is set to dynamicRa.  If the downstream\nnoise margin is below this value and stays below that for more\nthan the time specified by the adsl2LConfProfRaDsTimeDs, the\nATU-R shall attempt to decrease the downstream net data rate.\nThe Downstream Down-Shift Noise Margin ranges from 0 to 310\nunits of 0.1 dB (physical values are 0 to 31 dB).")
adsl2LConfProfRaDsNrmsUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaDsNrmsUs.setDescription("The Upstream Down-Shift Noise Margin value, to be used when\n\n\n\nadsl2LConfProfRaModeUs is set to dynamicRa.  If the upstream\nnoise margin is below this value and stays below that for more\nthan the time specified by the adsl2LConfProfRaDsTimeUs, the\nATU-C shall attempt to decrease the upstream net data rate.\nThe Upstream Down-Shift Noise Margin ranges from 0 to 310\nunits of 0.1 dB (physical values are 0 to 31 dB).")
adsl2LConfProfRaDsTimeDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(3600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaDsTimeDs.setDescription("The Downstream Down-Shift Time Interval, to be used when\nadsl2LConfProfRaModeDs is set to dynamicRa.  The interval of\ntime the downstream noise margin should stay below the\nDownstream Down-Shift Noise Margin before the ATU-R shall\nattempt to decrease the downstream net data rate.  The time\ninterval ranges from 0 to 16383 seconds.")
adsl2LConfProfRaDsTimeUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(3600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRaDsTimeUs.setDescription("The Upstream Down-Shift Time Interval, to be used when\nadsl2LConfProfRaModeUs is set to dynamicRa.  The interval of\ntime the upstream noise margin should stay below the Upstream\nDown-Shift Noise Margin before the ATU-C shall attempt to\ndecrease the upstream net data rate.  The time interval ranges\nfrom 0 to 16383 seconds.")
adsl2LConfProfTargetSnrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfTargetSnrmDs.setDescription("The minimum Noise Margin the ATU-R receiver shall achieve,\nrelative to the BER requirement for each of the downstream\nbearer channels, to successfully complete initialization.\nThe target noise margin ranges from 0 to 310 units of 0.1 dB\n(physical values are 0 to 31 dB).")
adsl2LConfProfTargetSnrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfTargetSnrmUs.setDescription("The minimum Noise Margin the ATU-C receiver shall achieve,\nrelative to the BER requirement for each of the upstream\nbearer channels, to successfully complete initialization.\nThe target noise margin ranges from 0 to 310 units of 0.1 dB\n(physical values are 0 to 31 dB).")
adsl2LConfProfMaxSnrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,310),ValueRangeConstraint(2147483647,2147483647),)).clone(310)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxSnrmDs.setDescription("The maximum Noise Margin the ATU-R receiver shall try to\nsustain.  If the Noise Margin is above this level, the ATU-R\nshall request that the ATU-C reduce the ATU-C transmit power\nto get a noise margin below this limit (if this functionality\nis supported).  The maximum noise margin ranges from 0 to 310\nunits of 0.1 dB (physical values are 0 to 31 dB).  A value of\n0x7FFFFFFF (2147483647) means that there is no maximum.")
adsl2LConfProfMaxSnrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,310),ValueRangeConstraint(2147483647,2147483647),)).clone(310)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxSnrmUs.setDescription("The maximum Noise Margin the ATU-C receiver shall try to\n\n\n\nsustain.  If the Noise Margin is above this level, the ATU-C\nshall request that the ATU-R reduce the ATU-R transmit power\nto get a noise margin below this limit (if this functionality\nis supported).  The maximum noise margin ranges from 0 to 310\nunits of 0.1 dB (physical values are 0 to 31 dB).  A value of\n0x7FFFFFFF (2147483647) means that there is no maximum.")
adsl2LConfProfMinSnrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMinSnrmDs.setDescription("The minimum Noise Margin the ATU-R receiver shall tolerate.\nIf the noise margin falls below this level, the ATU-R shall\nrequest that the ATU-C increase the ATU-C transmit power.\nIf an increase to ATU-C transmit power is not possible, a\nloss-of-margin (LOM) defect occurs, the ATU-R shall fail and\nattempt to reinitialize, and the NMS shall be notified.  The\nminimum noise margin ranges from 0 to 310 units of\n0.1 dB (physical values are 0 to 31 dB).  A value of 0 means\nthat there is no minimum.")
adsl2LConfProfMinSnrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMinSnrmUs.setDescription("The minimum Noise Margin the ATU-C receiver shall tolerate.\nIf the noise margin falls below this level, the ATU-C shall\nrequest that the ATU-R increase the ATU-R transmit power.\nIf an increase of ATU-R transmit power is not possible, a\nloss-of-margin (LOM) defect occurs, the ATU-C shall fail and\nattempt to reinitialize, and the NMS shall be notified.  The\nminimum noise margin ranges from 0 to 310 units of\n0.1 dB (physical values are 0 to 31 dB).  A value of 0 means\nthat there is no minimum.")
adsl2LConfProfMsgMinUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4000, 63000)).clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMsgMinUs.setDescription("Minimum Overhead Rate Upstream.  Defines the minimum rate of\nthe message-based overhead that shall be maintained by the ATU\nin upstream direction.  Expressed in bits per second and\nranges from 4000 to 63000 bps.")
adsl2LConfProfMsgMinDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4000, 63000)).clone(4000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMsgMinDs.setDescription("Minimum Overhead Rate Downstream.  Defines the minimum rate of\nthe message-based overhead that shall be maintained by the ATU\nin downstream direction.  Expressed in bits per second and\nranges from 4000 to 63000 bps.")
adsl2LConfProfAtuTransSysEna = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 23), Adsl2TransmissionModeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfAtuTransSysEna.setDescription("ATU Transmission System Enabling (ATSE).  A list of the\ndifferent coding types enabled in this profile.  It is coded\nin a bit-map representation with 1 or more bits set.  A bit\nset to  '1' means that the ATUs may apply the respective\ncoding for the ADSL line.  A bit set to '0' means that\nthe ATUs cannot apply the respective coding for the ADSL\nline.  All 'reserved' bits should be set to '0'.")
adsl2LConfProfPmMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 24), Adsl2LConfProfPmMode().clone('(allowTransitionsToIdle, allowTransitionsToLowPower)')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfPmMode.setDescription("Power management state Enabling.  Defines the power states the\nATU-C or ATU-R may autonomously transition to on this line.\nThe various bit positions are: allowTransitionsToIdle(0) and\nallowTransitionsToLowPower(1).  A bit with a '1' value means\nthat the ATU is allowed to transit into the respective state,\nand a '0' value means that the ATU is not allowed\nto transit into the respective state.")
adsl2LConfProfL0Time = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfL0Time.setDescription("This minimum time (in seconds) between an Exit from the L2\nstate and the next Entry into the L2 state.  It ranges from 0\nto 255 seconds.")
adsl2LConfProfL2Time = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfL2Time.setDescription("This minimum time (in seconds) between an Entry into the\nL2 state and the first Power Trim in the L2 state and between\ntwo consecutive Power Trims in the L2 State.\nIt ranges from 0 to 255 seconds.")
adsl2LConfProfL2Atpr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfL2Atpr.setDescription("The maximum aggregate transmit power reduction (in dB) that\ncan be performed at transition of L0 to L2 state or through a\nsingle Power Trim in the L2 state.\nIt ranges from 0 dB to 31 dB.")
adsl2LConfProfL2Atprt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(31)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfL2Atprt.setDescription("The total maximum aggregate transmit power reduction\n(in dB) that can be performed in an L2 state.  This is the\nsum of all reductions of L2 Request (i.e., at transition of\nL0 to L2 state) and Power Trims.")
adsl2LConfProfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 2, 1, 29), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfRowStatus.setDescription("This object is used to create a new row or to modify or\ndelete an existing row in this table.\n\nA profile is activated by setting this object to 'active'.\nWhen 'active' is set, the system will validate the profile.\n\nBefore a profile can be deleted or taken out of service\n(by setting this object to 'destroy' or 'notInService'),\nit must first be unreferenced from all associated\ntemplates.")
adsl2LineConfProfModeSpecTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3))
if mibBuilder.loadTexts: adsl2LineConfProfModeSpecTable.setDescription("The table adsl2LineConfProfModeSpecTable extends the\nADSL2 line configuration profile by ADSL Mode Specific\nparameters.\nA row in this table that has an index of\n\n\n\nadsl2LConfProfAdslMode == defMode(1) is called a\n'mandatory' row.\nA row in this table that has an index such that\nadsl2LConfProfAdslMode is not equal to defMode(1)\nis called an 'optional' row.\nWhen a row in the adsl2LineConfProfTable table\n(the parent row) is created, the SNMP agent will\nautomatically create a 'mandatory' row in this table.\nWhen the parent row is deleted, the SNMP agent will\nautomatically delete all associated rows in this table.\nAny attempt to delete the 'mandatory' row using the\nadsl2LConfProfModeSpecRowStatus attribute will be\nrejected by the SNMP agent.\nThe manager MAY create an 'optional' row in this table\nusing the adsl2LConfProfModeSpecRowStatus attribute if\nthe parent row exists.\nThe manager MAY delete an 'optional' row in this table\nusing the adsl2LConfProfModeSpecRowStatus attribute at\nany time.\nIf the actual transmission mode of a DSL line does not\nmatch one of the 'optional' rows in this table, then\nthe line will use the PSD configuration from the\n'mandatory' row.\n\nEntries in this table MUST be maintained in a\npersistent manner.")
adsl2LineConfProfModeSpecEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1)).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2LConfProfProfileName"), (0, "ADSL2-LINE-MIB", "adsl2LConfProfAdslMode"))
if mibBuilder.loadTexts: adsl2LineConfProfModeSpecEntry.setDescription("The table adsl2LineConfProfModeSpecTable extends the\nADSL2 line configuration profile by ADSL Mode Specific\nparameters.")
adsl2LConfProfAdslMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 1), Adsl2OperationModes()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2LConfProfAdslMode.setDescription("The ADSL Mode is a way of categorizing the various ADSL\ntransmission modes into groups; each group (ADSL Mode) shares\nthe same PSD configuration.\nThere should be multiple entries in this table for a given\nline profile in case multiple bits are set in\nadsl2LConfProfAtuTransSysEna for that profile.")
adsl2LConfProfMaxNomPsdDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, -300)).clone(-300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxNomPsdDs.setDescription("The maximum nominal transmit PSD in the downstream\ndirection during initialization and Showtime.  It ranges from\n-600 to -300 units of 0.1 dBm/Hz (physical values are -60 to\n-30 dBm/Hz).")
adsl2LConfProfMaxNomPsdUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, -300)).clone(-300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxNomPsdUs.setDescription("The maximum nominal transmit PSD in the upstream direction\nduring initialization and Showtime.  It ranges from -600 to\n-300 units of 0.1 dBm/Hz (physical values are -60 to\n-30 dBm/Hz).")
adsl2LConfProfMaxNomAtpDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxNomAtpDs.setDescription("The maximum nominal aggregate transmit power in the\ndownstream direction during initialization and Showtime.  It\nranges from 0 to 255 units of 0.1 dBm (physical values are 0\nto 25.5 dBm).")
adsl2LConfProfMaxNomAtpUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxNomAtpUs.setDescription("The maximum nominal aggregate transmit power in the upstream\ndirection during initialization and Showtime.  It ranges from\n0 to 255 units of 0.1 dBm (physical values are 0 to 25.5\ndBm).")
adsl2LConfProfMaxAggRxPwrUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-255,255),ValueRangeConstraint(2147483647,2147483647),)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfMaxAggRxPwrUs.setDescription("The maximum upstream aggregate receive power over the relevant\nset of sub-carriers.  The ATU-C should verify that the\nupstream power cutback is such that this maximum aggregate\nreceive power value is honored.  It ranges from -255 to 255\nunits of 0.1 dBm (physical values are -25.5 to 25.5 dBm).\nA value of 0x7FFFFFFF (2147483647) means that there is no\nlimit.")
adsl2LConfProfPsdMaskDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 7), Adsl2PsdMaskDs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfPsdMaskDs.setDescription("The downstream PSD mask applicable at the U-C2 reference\npoint.\nThis parameter is used only for G.992.5, and it may impose PSD\nrestrictions (breakpoints) in addition to the Limit PSD mask\ndefined in G.992.5.\nThis is a string of 32 pairs of values in the following\nstructure:\nOctets 0+1 - Index of 1st sub-carrier used in the context\n            of a first breakpoint.\nOctet 2    - The PSD reduction for the sub-carrier indicated in\n            octets 0 and 1.\nOctets 3-5 - Same, for a 2nd breakpoint.\nOctets 6-8 - Same, for a 3rd breakpoint.\nThis architecture continues until octets 94-95, which are\nassociated with a 32nd breakpoint.\nEach subcarrier index is an unsigned number in the range 1 to\nNSCds.  Each PSD reduction value is in the range 0 (0dBm/Hz) to\n255 (-127.5dBm/Hz) with steps of 0.5dBm/Hz.  Valid values are\nin the range 0 to 190 (0 to -95dBm/Hz).\nWhen the number of breakpoints is less than 32, all remaining\noctets are set to the value 0.  Note that the content of this\nobject should be correlated with the sub-carriers mask and with\nthe RFI setup.")
adsl2LConfProfPsdMaskUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 8), Adsl2PsdMaskUs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfPsdMaskUs.setDescription("The upstream PSD mask applicable at the U-R2 reference\npoint.\nThis parameter is used only for G.992.5, and it may impose PSD\nrestrictions (breakpoints) in addition to the Limit PSD mask\ndefined in G.992.5.\nThis is a string of 4 pairs of values in the following\nstructure:\nOctets 0+1 - Index of 1st sub-carrier used in the context\n            of a first breakpoint.\nOctet 2    - The PSD reduction for the sub-carrier indicated in\n            octets 0 and 1.\nOctets 3-5 - Same, for a 2nd breakpoint.\nOctets 6-8 - Same, for a 3rd breakpoint.\nThis architecture continues until octets 9-11, which are\nassociated with a 4th breakpoint.\nEach subcarrier index is an unsigned number in the range 1 to\n\n\n\nNSCus.  Each PSD reduction value is in the range 0 (0dBm/Hz) to\n255 (-127.5dBm/Hz) with steps of 0.5dBm/Hz.  Valid values are\nin the range 0 to 190 (0 to -95dBm/Hz).\nWhen the number of breakpoints is less than 4, all remaining\noctets are set to the value 0.  Note that the content of this\nobject should be correlated with the sub-carriers mask and with\nthe RFI setup.")
adsl2LConfProfPsdMaskSelectUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfPsdMaskSelectUs.setDescription("The selected upstream PSD mask.  This parameter is used only\nfor annexes J and M of G.992.3 and G.992.5, and the same\nselection is used for all relevant enabled bits in\nadsl2LConfProfAtuTransSysEna.")
adsl2LConfProfModeSpecRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 1, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LConfProfModeSpecRowStatus.setDescription("This object is used to create a new row or to modify or\ndelete an existing row in this table.\n\nA profile is activated by setting this object to 'active'.\nWhen 'active' is set, the system will validate the profile.\n\nBefore a profile can be deleted or taken out of service\n(by setting this object to 'destroy' or 'notInService'),\nit must first be unreferenced from all associated\ntemplates.")
adsl2ProfileChannel = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2))
adsl2ChConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1))
if mibBuilder.loadTexts: adsl2ChConfProfileTable.setDescription("The table adsl2ChConfProfileTable contains ADSL2 channel\nprofile configuration.\n\nEntries in this table MUST be maintained in a\npersistent manner.")
adsl2ChConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1)).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2ChConfProfProfileName"))
if mibBuilder.loadTexts: adsl2ChConfProfileEntry.setDescription("The table adsl2ChConfProfileTable contains ADSL2 channel\nprofile configuration.\nA default profile with an index of 'DEFVAL' will\nalways exist, and its parameters will be set to vendor-\nspecific values, unless otherwise specified in this document.")
adsl2ChConfProfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2ChConfProfProfileName.setDescription("This object identifies a row in this table.")
adsl2ChConfProfMinDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinDataRateDs.setDescription("Minimum Data Rate on Downstream direction.  The minimum net\ndata rate for the bearer channel, coded in bits/second.")
adsl2ChConfProfMinDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinDataRateUs.setDescription("Minimum Data Rate on Upstream direction.  The minimum net data\nrate for the bearer channel, coded in bits/second.")
adsl2ChConfProfMinResDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinResDataRateDs.setDescription("Minimum Reserved Data Rate on Downstream direction.  The\nminimum reserved net data rate for the bearer channel, coded\nin bits/second.  This parameter is used only if the Rate\nAdaptation Mode in the direction of the bearer channel (i.e.,\nadsl2LConfProfRaModeDs) is set to dynamicRa.")
adsl2ChConfProfMinResDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinResDataRateUs.setDescription("Minimum Reserved Data Rate on Upstream direction.  The minimum\nreserved net data rate for the bearer channel, coded in\nbits/second.  This parameter is used only if the Rate\nAdaptation Mode in the direction of the bearer channel (i.e.,\nadsl2LConfProfRaModeUs) is set to dynamicRa.")
adsl2ChConfProfMaxDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMaxDataRateDs.setDescription("Maximum Data Rate on Downstream direction.  The maximum net\ndata rate for the bearer channel, coded in bits/second.")
adsl2ChConfProfMaxDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMaxDataRateUs.setDescription("Maximum Data Rate on Upstream direction.  The maximum net data\nrate for the bearer channel, coded in bits/second.")
adsl2ChConfProfMinDataRateLowPwrDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinDataRateLowPwrDs.setDescription("Minimum Data Rate in Low Power state on Downstream direction.\nThe minimum net data rate for the bearer channel, coded in\nbits/second, during the low power state (L1 in G.992.2, L2 in\nG.992.3).")
adsl2ChConfProfMaxDelayDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMaxDelayDs.setDescription("Maximum Interleave Delay on Downstream direction.  The maximum\none-way interleaving delay introduced by the PMS-TC on\nDownstream direction.  The ATUs shall choose the S (factor)\nand D (depth) values such that the actual one-way interleaving\ndelay (adsl2ChStatusActDelay) is as close as possible to,\nbut less than or equal to, adsl2ChConfProfMaxDelayDs.  The\ndelay is coded in ms, with the value 0 indicating no delay\nbound is being imposed.")
adsl2ChConfProfMaxDelayUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMaxDelayUs.setDescription("Maximum Interleave Delay on Upstream direction.  The maximum\none-way interleaving delay introduced by the PMS-TC on\nUpstream direction.  The ATUs shall choose the S (factor) and\nD (depth) values such that the actual one-way interleaving\ndelay (adsl2ChStatusActDelay) is as close as possible to,\nbut less than or equal to, adsl2ChConfProfMaxDelayUs.  The\ndelay is coded in ms, with the value 0 indicating no delay\nbound is being imposed.")
adsl2ChConfProfMinProtectionDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 11), Adsl2SymbolProtection().clone('noProtection')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinProtectionDs.setDescription("Minimum Impulse Noise Protection on Downstream direction.  The\nminimum impulse noise protection for the bearer channel,\nexpressed in symbols.  The parameter can take the following\nvalues: noProtection (i.e., INP not required), halfSymbol\n(i.e., INP length is 1/2 symbol), and 1-16 symbols in steps\nof 1 symbol.")
adsl2ChConfProfMinProtectionUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 12), Adsl2SymbolProtection().clone('noProtection')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMinProtectionUs.setDescription("Minimum Impulse Noise Protection on Upstream direction.  The\nminimum impulse noise protection for the bearer channel,\nexpressed in symbols.  The parameter can take the following\nvalues: noProtection (i.e., INP not required), halfSymbol\n(i.e., INP length is 1/2 symbol), and 1-16 symbols in steps\nof 1 symbol.")
adsl2ChConfProfMaxBerDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 13), Adsl2MaxBer().clone('eminus5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMaxBerDs.setDescription("Maximum Bit Error Ratio on Downstream direction.  The maximum\nbit error ratio for the bearer channel.  The parameter can\ntake the following values (for 1E-3, 1E-5 or 1E-7):\n   eminus3(1),\n   eminus5(2), or\n   eminus7(3).")
adsl2ChConfProfMaxBerUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 14), Adsl2MaxBer().clone('eminus5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfMaxBerUs.setDescription("Maximum Bit Error Ratio on Upstream direction.  The maximum\nbit error ratio for the bearer channel.  The parameter can\ntake the following values (for 1E-3, 1E-5 or 1E-7):\n   eminus3(1),\n   eminus5(2), or\n   eminus7(3).")
adsl2ChConfProfUsDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfUsDataRateDs.setDescription("Data Rate Threshold Up shift for downstream direction.  An\n'Up-shift rate change' event is triggered when the actual\ndownstream data rate exceeds, by more than the threshold, the\ndata rate at the last entry into Showtime.  The parameter is\ncoded in bits/second.")
adsl2ChConfProfDsDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfDsDataRateDs.setDescription("Data Rate Threshold Down-shift for downstream direction.  A\n'Down-shift rate change' event is triggered when the actual\ndownstream data rate is below the data rate at the last entry\ninto Showtime, by more than the threshold.  The parameter is\ncoded in bits/second.")
adsl2ChConfProfUsDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfUsDataRateUs.setDescription("Data Rate Threshold Up shift for upstream direction.  An\n'Up-shift rate change' event is triggered when the actual\nupstream data rate exceeds, by more than the threshold, the\ndata rate at the last entry into Showtime.  The parameter is\ncoded in bits/second.")
adsl2ChConfProfDsDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfDsDataRateUs.setDescription("Data Rate Threshold Down-shift for upstream direction.  A\n'Down-shift rate change' event is triggered when the actual\nupstream data rate is below the data rate at the last entry\ninto Showtime, by more than the threshold.  The parameter is\ncoded in bits/second.")
adsl2ChConfProfImaEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfImaEnabled.setDescription("IMA Mode Enable.  The parameter enables the IMA operation mode\nin the ATM Data Path.  Relevant only if the channel is an ATM\nData Path.  When in 'enable' state, the ATM data path should\ncomply with the requirements for IMA transmission.")
adsl2ChConfProfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 2, 1, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChConfProfRowStatus.setDescription("This object is used to create a new row or to modify or\ndelete an existing row in this table.\n\nA profile is activated by setting this object to 'active'.\nWhen 'active' is set, the system will validate the profile.\n\nBefore a profile can be deleted or taken out of service\n(by setting this object to 'destroy' or 'notInService'),\nit must first be unreferenced from all associated\ntemplates.")
adsl2ProfileAlarmConf = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3))
adsl2LineAlarmConfTemplateTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1))
if mibBuilder.loadTexts: adsl2LineAlarmConfTemplateTable.setDescription("The table adsl2LineAlarmConfTemplateTable contains\nADSL2 line configuration templates.\n\nEntries in this table MUST be maintained in a\npersistent manner.")
adsl2LineAlarmConfTemplateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1)).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2LAlarmConfTempTemplateName"))
if mibBuilder.loadTexts: adsl2LineAlarmConfTemplateEntry.setDescription("The table adsl2LineAlarmConfTemplateTable contains ADSL2\nline PM thresholds templates.\nA default template with an index of 'DEFVAL' will\nalways exist, and its parameters will be set to vendor-\nspecific values, unless otherwise specified in this\ndocument.")
adsl2LAlarmConfTempTemplateName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2LAlarmConfTempTemplateName.setDescription("This object identifies a row in this table.")
adsl2LAlarmConfTempLineProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LAlarmConfTempLineProfile.setDescription("The value of this object identifies the row in the ADSL2 Line\nThresholds Configuration Profile Table\n(adsl2LineAlarmConfProfileTable) that applies to this ADSL2\nline.")
adsl2LAlarmConfTempChan1ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan1ConfProfile.setDescription("The value of this object identifies the row in the ADSL2\nChannel Thresholds Configuration Profile Table\n(adsl2ChAlarmConfProfileTable) that applies for ADSL2\nbearer channel #1.  The channel profile name specified here\nmust match the name of an existing row in the\nadsl2ChAlarmConfProfileTable table.")
adsl2LAlarmConfTempChan2ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan2ConfProfile.setDescription("The value of this object identifies the row in the ADSL2\nChannel Thresholds Configuration Profile Table\n(adsl2ChAlarmConfProfileTable) that applies for ADSL2\nbearer channel #2.  The channel profile name specified here\nmust match the name of an existing row in the\nadsl2ChAlarmConfProfileTable table.  If the channel is unused,\nthen the object is set to a zero-length string.")
adsl2LAlarmConfTempChan3ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan3ConfProfile.setDescription("The value of this object identifies the row in the ADSL2\nChannel Thresholds Configuration Profile Table\n(adsl2ChAlarmConfProfileTable) that applies for ADSL2\nbearer channel #3.  The channel profile name specified here\nmust match the name of an existing row in the\nadsl2ChAlarmConfProfileTable table.\nThis object may be set to a non-zero-length string only if\nadsl2LAlarmConfTempChan2ConfProfile contains a non-zero-\nlength string.")
adsl2LAlarmConfTempChan4ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LAlarmConfTempChan4ConfProfile.setDescription("The value of this object identifies the row in the ADSL2\nChannel Thresholds Configuration Profile Table\n(adsl2ChAlarmConfProfileTable) that applies for ADSL2\nbearer channel #4.  The channel profile name specified here\nmust match the name of an existing row in the\nadsl2ChAlarmConfProfileTable table.\nThis object may be set to a non-zero-length string only if\nadsl2LAlarmConfTempChan3ConfProfile contains a non-zero-\nlength string.")
adsl2LAlarmConfTempRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LAlarmConfTempRowStatus.setDescription("This object is used to create a new row or to modify or\ndelete an existing row in this table.\n\nA template is activated by setting this object to 'active'.\nWhen 'active' is set, the system will validate the template.\n\nBefore a template can be deleted or taken out of service\n(by setting this object to 'destroy' or 'notInService'),\nit must first be unreferenced from all associated\nlines.")
adsl2LineAlarmConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2))
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileTable.setDescription("The table adsl2LineAlarmConfProfileTable contains ADSL2\nline PM thresholds profiles.\n\n Entries in this table MUST be maintained in a\n persistent manner.")
adsl2LineAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1)).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileName"))
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileEntry.setDescription("The table adsl2LineAlarmConfProfileTable contains ADSL2\nline PM thresholds profiles.\nA default profile with an index of 'DEFVAL' will\nalways exist, and its parameters will be set to vendor-\nspecific values, unless otherwise specified in this\ndocument.")
adsl2LineAlarmConfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileName.setDescription("This object identifies a row in this table.")
adsl2LineAlarmConfProfileAtucThresh15MinFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 2), HCPerfIntervalThreshold().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinFecs.setDescription("A threshold for the adsl2PMLCurr15MFecs counter,\nwhen adsl2PMLCurrUnit is atuc(1).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2LineAlarmConfProfileAtucThresh15MinEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 3), HCPerfIntervalThreshold().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinEs.setDescription("A threshold for the adsl2PMLCurr15MEs counter,\nwhen adsl2PMLCurrUnit is atuc(1).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2LineAlarmConfProfileAtucThresh15MinSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 4), HCPerfIntervalThreshold().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinSes.setDescription("A threshold for the adsl2PMLCurr15MSes counter,\nwhen adsl2PMLCurrUnit is atuc(1).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2LineAlarmConfProfileAtucThresh15MinLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 5), HCPerfIntervalThreshold().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinLoss.setDescription("A threshold for the adsl2PMLCurr15MLoss counter,\nwhen adsl2PMLCurrUnit is atuc(1).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2LineAlarmConfProfileAtucThresh15MinUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 6), HCPerfIntervalThreshold().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAtucThresh15MinUas.setDescription("A threshold for the adsl2PMLCurr15MUas counter,\nwhen adsl2PMLCurrUnit is atuc(1).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2LineAlarmConfProfileAturThresh15MinFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 7), HCPerfIntervalThreshold().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinFecs.setDescription("A threshold for the adsl2PMLCurr15MFecs counter,\nwhen adsl2PMLCurrUnit is atur(2).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2LineAlarmConfProfileAturThresh15MinEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 8), HCPerfIntervalThreshold().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinEs.setDescription("A threshold for the adsl2PMLCurr15MEs counter,\nwhen adsl2PMLCurrUnit is atur(2).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2LineAlarmConfProfileAturThresh15MinSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 9), HCPerfIntervalThreshold().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinSes.setDescription("A threshold for the adsl2PMLCurr15MSes counter,\nwhen adsl2PMLCurrUnit is atur(2).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2LineAlarmConfProfileAturThresh15MinLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 10), HCPerfIntervalThreshold().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinLoss.setDescription("A threshold for the adsl2PMLCurr15MLoss counter,\nwhen adsl2PMLCurrUnit is atur(2).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2LineAlarmConfProfileAturThresh15MinUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 11), HCPerfIntervalThreshold().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileAturThresh15MinUas.setDescription("A threshold for the adsl2PMLCurr15MUas counter,\nwhen adsl2PMLCurrUnit is atur(2).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2LineAlarmConfProfileThresh15MinFailedFullInt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 12), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileThresh15MinFailedFullInt.setDescription("A threshold for the adsl2PMLCurrInit15MfailedFullInits\ncounter.\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2LineAlarmConfProfileThresh15MinFailedShrtInt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 13), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileThresh15MinFailedShrtInt.setDescription("A threshold for the adsl2PMLCurrInit15MFailedShortInits\ncounter.\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2LineAlarmConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileRowStatus.setDescription("This object is used to create a new row or to modify or\ndelete an existing row in this table.\n\nA profile is activated by setting this object to 'active'.\nWhen 'active' is set, the system will validate the profile.\n\nBefore a profile can be deleted or taken out of service\n(by setting this object to 'destroy' or 'notInService'),\nit must first be unreferenced from all associated\ntemplates.")
adsl2ChAlarmConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3))
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileTable.setDescription("The table adsl2ChAlarmConfProfileTable contains ADSL2\nchannel PM thresholds profiles.\n\n Entries in this table MUST be maintained in a\n persistent manner.")
adsl2ChAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1)).setIndexNames((0, "ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileName"))
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileEntry.setDescription("The table adsl2ChAlarmConfProfileTable contains ADSL2\nchannel PM thresholds profiles.\nA default profile with an index of 'DEFVAL' will\nalways exist, and its parameters will be set to vendor-\nspecific values, unless otherwise specified in this document.")
adsl2ChAlarmConfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileName.setDescription("This object identifies a row in this table.")
adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1, 2), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations.setDescription("A threshold for the adsl2PMChCurr15MCodingViolations\ncounter, when adsl2PMChCurrUnit is atuc(1).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2ChAlarmConfProfileAtucThresh15MinCorrected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1, 3), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAtucThresh15MinCorrected.setDescription("A threshold for the adsl2PMChCurr15MCorrectedBlocks\ncounter, when adsl2PMChCurrUnit is atuc(1).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2ChAlarmConfProfileAturThresh15MinCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1, 4), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAturThresh15MinCodingViolations.setDescription("A threshold for the adsl2PMChCurr15MCodingViolations\ncounter, when adsl2PMChCurrUnit is atur(2).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2ChAlarmConfProfileAturThresh15MinCorrected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1, 5), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileAturThresh15MinCorrected.setDescription("A threshold for the adsl2PMChCurr15MCorrectedBlocks\ncounter, when adsl2PMChCurrUnit is atur(2).\nThe value 0 means that no threshold is specified for the\nassociated counter.")
adsl2ChAlarmConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 238, 1, 5, 3, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileRowStatus.setDescription("This object is used to create a new row or to modify or\ndelete an existing row in this table.\n\nA profile is activated by setting this object to 'active'.\nWhen 'active' is set, the system will validate the profile.\n\nBefore a profile can be deleted or taken out of service\n(by setting this object to 'destroy' or 'notInService'),\nit must first be unreferenced from all associated\ntemplates.")
adsl2Scalar = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 6))
adsl2ScalarSC = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 6, 1))
adsl2ScalarSCMaxInterfaces = MibScalar((1, 3, 6, 1, 2, 1, 10, 238, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ScalarSCMaxInterfaces.setDescription("This value determines the upper size of adsl2SCStatusTable.\nThe maximum number of entries in adsl2SCStatusTable is equal\nto two times the value of this attribute.")
adsl2ScalarSCAvailInterfaces = MibScalar((1, 3, 6, 1, 2, 1, 10, 238, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adsl2ScalarSCAvailInterfaces.setDescription("This value determines the amount of space that is\ncurrently available in adsl2SCStatusTable.\nThe number of entries available in adsl2SCStatusTable is equal\nto two times the value of this attribute.")
adsl2Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 7))
adsl2Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1))
adsl2Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 2))

# Augmentions

# Notifications

adsl2LinePerfFECSThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 1)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLCurr15MFecs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinFecs"), ) )
if mibBuilder.loadTexts: adsl2LinePerfFECSThreshAtuc.setDescription("This notification indicates that the FEC seconds threshold\nhas been reached/exceeded for the referred ATU-C.")
adsl2LinePerfFECSThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 2)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLCurr15MFecs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinFecs"), ) )
if mibBuilder.loadTexts: adsl2LinePerfFECSThreshAtur.setDescription("This notification indicates that the FEC seconds threshold\nhas been reached/exceeded for the referred ATU-R.")
adsl2LinePerfESThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 3)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLCurr15MEs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinEs"), ) )
if mibBuilder.loadTexts: adsl2LinePerfESThreshAtuc.setDescription("This notification indicates that the errored seconds threshold\nhas been reached/exceeded for the referred ATU-C.")
adsl2LinePerfESThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 4)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLCurr15MEs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinEs"), ) )
if mibBuilder.loadTexts: adsl2LinePerfESThreshAtur.setDescription("This notification indicates that the errored seconds threshold\nhas been reached/exceeded for the referred ATU-R.")
adsl2LinePerfSESThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 5)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinSes"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MSes"), ) )
if mibBuilder.loadTexts: adsl2LinePerfSESThreshAtuc.setDescription("This notification indicates that the severely-errored seconds\nthreshold has been reached/exceeded for the referred ATU-C.")
adsl2LinePerfSESThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 6)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinSes"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MSes"), ) )
if mibBuilder.loadTexts: adsl2LinePerfSESThreshAtur.setDescription("This notification indicates that the severely-errored seconds\nthreshold has been reached/exceeded for the referred ATU-R.")
adsl2LinePerfLOSSThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 7)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLCurr15MLoss"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinLoss"), ) )
if mibBuilder.loadTexts: adsl2LinePerfLOSSThreshAtuc.setDescription("This notification indicates that the LOS seconds\nthreshold has been reached/exceeded for the referred ATU-C.")
adsl2LinePerfLOSSThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 8)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLCurr15MLoss"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinLoss"), ) )
if mibBuilder.loadTexts: adsl2LinePerfLOSSThreshAtur.setDescription("This notification indicates that the LOS seconds\nthreshold has been reached/exceeded for the referred ATU-R.")
adsl2LinePerfUASThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 9)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLCurr15MUas"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinUas"), ) )
if mibBuilder.loadTexts: adsl2LinePerfUASThreshAtuc.setDescription("This notification indicates that the unavailable seconds\nthreshold has been reached/exceeded for the referred ATU-C.")
adsl2LinePerfUASThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 10)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLCurr15MUas"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinUas"), ) )
if mibBuilder.loadTexts: adsl2LinePerfUASThreshAtur.setDescription("This notification indicates that the unavailable seconds\nthreshold has been reached/exceeded for the referred ATU-R.")
adsl2LinePerfCodingViolationsThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 11)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMChCurr15MCodingViolations"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations"), ) )
if mibBuilder.loadTexts: adsl2LinePerfCodingViolationsThreshAtuc.setDescription("This notification indicates that the coding violations\nthreshold has been reached/exceeded for the referred ATU-C.")
adsl2LinePerfCodingViolationsThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 12)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMChCurr15MCodingViolations"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAturThresh15MinCodingViolations"), ) )
if mibBuilder.loadTexts: adsl2LinePerfCodingViolationsThreshAtur.setDescription("This notification indicates that the coding violations\nthreshold has been reached/exceeded for the referred ATU-R.")
adsl2LinePerfCorrectedThreshAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 13)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMChCurr15MCorrectedBlocks"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAtucThresh15MinCorrected"), ) )
if mibBuilder.loadTexts: adsl2LinePerfCorrectedThreshAtuc.setDescription("This notification indicates that the corrected blocks\n(FEC events) threshold has been reached/exceeded for the\nreferred ATU-C.")
adsl2LinePerfCorrectedThreshAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 14)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMChCurr15MCorrectedBlocks"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAturThresh15MinCorrected"), ) )
if mibBuilder.loadTexts: adsl2LinePerfCorrectedThreshAtur.setDescription("This notification indicates that the corrected blocks\n(FEC events) threshold has been reached/exceeded for the\nreferred ATU-R.")
adsl2LinePerfFailedFullInitThresh = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 15)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileThresh15MinFailedFullInt"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MFailedFullInits"), ) )
if mibBuilder.loadTexts: adsl2LinePerfFailedFullInitThresh.setDescription("This notification indicates that the failed full\ninitializations threshold has been reached/exceeded for the\nreferred ADSL/ADSL2 or ADSL2+ line.")
adsl2LinePerfFailedShortInitThresh = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 16)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileThresh15MinFailedShrtInt"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MFailedShortInits"), ) )
if mibBuilder.loadTexts: adsl2LinePerfFailedShortInitThresh.setDescription("This notification indicates that the failed short\ninitializations threshold has been reached/exceeded for the\nreferred ADSL/ADSL2 or ADSL2+ line.")
adsl2LineStatusChangeAtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 17)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LineStatusAtuc"), ) )
if mibBuilder.loadTexts: adsl2LineStatusChangeAtuc.setDescription("This notification indicates that a status change is\ndetected for the referred ATU-C.")
adsl2LineStatusChangeAtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 238, 1, 0, 18)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LineStatusAtur"), ) )
if mibBuilder.loadTexts: adsl2LineStatusChangeAtur.setDescription("This notification indicates that a status change is\ndetected for the referred ATU-R.")

# Groups

adsl2LineGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 1)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LineStatusLastStateUs"), ("ADSL2-LINE-MIB", "adsl2LineStatusSigAttenUs"), ("ADSL2-LINE-MIB", "adsl2LineStatusSnrMarginUs"), ("ADSL2-LINE-MIB", "adsl2LineStatusSnrMarginDs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmCnfgTemplate"), ("ADSL2-LINE-MIB", "adsl2LineStatusLnAttenDs"), ("ADSL2-LINE-MIB", "adsl2LineStatusActAtpDs"), ("ADSL2-LINE-MIB", "adsl2LineStatusInitResult"), ("ADSL2-LINE-MIB", "adsl2LineStatusLastStateDs"), ("ADSL2-LINE-MIB", "adsl2LineStatusActPsdDs"), ("ADSL2-LINE-MIB", "adsl2LineCmndConfPmsf"), ("ADSL2-LINE-MIB", "adsl2LineStatusAttainableRateUs"), ("ADSL2-LINE-MIB", "adsl2LineCnfgTemplate"), ("ADSL2-LINE-MIB", "adsl2LineStatusAttainableRateDs"), ("ADSL2-LINE-MIB", "adsl2LineStatusPwrMngState"), ("ADSL2-LINE-MIB", "adsl2LineCmndAutomodeColdStart"), ("ADSL2-LINE-MIB", "adsl2LineStatusLnAttenUs"), ("ADSL2-LINE-MIB", "adsl2LineStatusAtuc"), ("ADSL2-LINE-MIB", "adsl2LineStatusSigAttenDs"), ("ADSL2-LINE-MIB", "adsl2LineStatusActPsdUs"), ("ADSL2-LINE-MIB", "adsl2LineStatusAtuTransSys"), ("ADSL2-LINE-MIB", "adsl2LineCmndConfLdsf"), ("ADSL2-LINE-MIB", "adsl2LineStatusActAtpUs"), ("ADSL2-LINE-MIB", "adsl2LineStatusAtur"), ("ADSL2-LINE-MIB", "adsl2LineCmndConfLdsfFailReason"), ) )
if mibBuilder.loadTexts: adsl2LineGroup.setDescription("The group of configuration, status, and commands objects\non the line level.")
adsl2ChannelStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 2)).setObjects(*(("ADSL2-LINE-MIB", "adsl2ChStatusActDelay"), ("ADSL2-LINE-MIB", "adsl2ChStatusActDataRate"), ("ADSL2-LINE-MIB", "adsl2ChStatusChannelNum"), ("ADSL2-LINE-MIB", "adsl2ChStatusPrevDataRate"), ) )
if mibBuilder.loadTexts: adsl2ChannelStatusGroup.setDescription("The group of status objects on the channel level.")
adsl2ChannelStatusAtmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 3)).setObjects(*(("ADSL2-LINE-MIB", "adsl2ChStatusAtmStatus"), ) )
if mibBuilder.loadTexts: adsl2ChannelStatusAtmGroup.setDescription("The group of status objects on the data path level\nwhen it is ATM.")
adsl2ChannelStatusPtmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 4)).setObjects(*(("ADSL2-LINE-MIB", "adsl2ChStatusPtmStatus"), ) )
if mibBuilder.loadTexts: adsl2ChannelStatusPtmGroup.setDescription("The group of status objects on the data path level\nwhen it is PTM.")
adsl2SCStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 5)).setObjects(*(("ADSL2-LINE-MIB", "adsl2SCStatusAttainableRate"), ("ADSL2-LINE-MIB", "adsl2SCStatusBitsAlloc"), ("ADSL2-LINE-MIB", "adsl2SCStatusQlnMt"), ("ADSL2-LINE-MIB", "adsl2SCStatusLogMt"), ("ADSL2-LINE-MIB", "adsl2SCStatusLinReal"), ("ADSL2-LINE-MIB", "adsl2SCStatusMtime"), ("ADSL2-LINE-MIB", "adsl2SCStatusLnAtten"), ("ADSL2-LINE-MIB", "adsl2SCStatusLinScale"), ("ADSL2-LINE-MIB", "adsl2SCStatusLog"), ("ADSL2-LINE-MIB", "adsl2SCStatusSnr"), ("ADSL2-LINE-MIB", "adsl2SCStatusSigAtten"), ("ADSL2-LINE-MIB", "adsl2SCStatusActAtp"), ("ADSL2-LINE-MIB", "adsl2SCStatusRowStatus"), ("ADSL2-LINE-MIB", "adsl2SCStatusGainAlloc"), ("ADSL2-LINE-MIB", "adsl2SCStatusSnrMargin"), ("ADSL2-LINE-MIB", "adsl2SCStatusTssi"), ("ADSL2-LINE-MIB", "adsl2SCStatusQln"), ("ADSL2-LINE-MIB", "adsl2SCStatusLinImg"), ) )
if mibBuilder.loadTexts: adsl2SCStatusGroup.setDescription("The group of status objects on the sub-carrier level.\nThey are updated as a result of a DELT process.")
adsl2LineInventoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 6)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LInvSerialNumber"), ("ADSL2-LINE-MIB", "adsl2LInvTransmissionCapabilities"), ("ADSL2-LINE-MIB", "adsl2LInvVersionNumber"), ("ADSL2-LINE-MIB", "adsl2LInvSystemVendorId"), ("ADSL2-LINE-MIB", "adsl2LInvG994VendorId"), ("ADSL2-LINE-MIB", "adsl2LInvSelfTestResult"), ) )
if mibBuilder.loadTexts: adsl2LineInventoryGroup.setDescription("The group of inventory objects per XTU.")
adsl2LineConfTemplateGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 7)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LConfTempChan1ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan2ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LConfTempRowStatus"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan4RaRatioUs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan3RaRatioDs"), ("ADSL2-LINE-MIB", "adsl2LConfTempLineProfile"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan3RaRatioUs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan3ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan4RaRatioDs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan2RaRatioDs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan4ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan1RaRatioDs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan2RaRatioUs"), ("ADSL2-LINE-MIB", "adsl2LConfTempChan1RaRatioUs"), ) )
if mibBuilder.loadTexts: adsl2LineConfTemplateGroup.setDescription("The group of objects in a line configuration template.")
adsl2LineConfProfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 8)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LConfProfPmMode"), ("ADSL2-LINE-MIB", "adsl2LConfProfMinSnrmDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfScMaskUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaModeDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfTargetSnrmDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaModeUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfL0Time"), ("ADSL2-LINE-MIB", "adsl2LConfProfL2Atpr"), ("ADSL2-LINE-MIB", "adsl2LConfProfRfiBandsDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfAtuTransSysEna"), ("ADSL2-LINE-MIB", "adsl2LConfProfRowStatus"), ("ADSL2-LINE-MIB", "adsl2LConfProfL2Time"), ("ADSL2-LINE-MIB", "adsl2LConfProfTargetSnrmUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMinSnrmUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxSnrmUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfL2Atprt"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxSnrmDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfScMaskDs"), ) )
if mibBuilder.loadTexts: adsl2LineConfProfGroup.setDescription("The group of objects in a line configuration profile.")
adsl2LineConfProfRaGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 9)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LConfProfRaUsNrmUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaUsTimeDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaUsTimeUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaDsTimeUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaDsTimeDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaDsNrmsDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaUsNrmDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfRaDsNrmsUs"), ) )
if mibBuilder.loadTexts: adsl2LineConfProfRaGroup.setDescription("The group of objects required for controlling the rate-\nadaptive behavior of the line.")
adsl2LineConfProfMsgMinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 10)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LConfProfMsgMinDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMsgMinUs"), ) )
if mibBuilder.loadTexts: adsl2LineConfProfMsgMinGroup.setDescription("The group of objects required for controlling the rate\nreserved for Overhead traffic.")
adsl2LineConfProfModeSpecGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 11)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LConfProfPsdMaskDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxNomAtpUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxNomAtpDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfPsdMaskUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfPsdMaskSelectUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxNomPsdUs"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxNomPsdDs"), ("ADSL2-LINE-MIB", "adsl2LConfProfModeSpecRowStatus"), ("ADSL2-LINE-MIB", "adsl2LConfProfMaxAggRxPwrUs"), ) )
if mibBuilder.loadTexts: adsl2LineConfProfModeSpecGroup.setDescription("The group of objects in a line configuration profile\nthat have an instance for each operation mode allowed.")
adsl2ChConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 12)).setObjects(*(("ADSL2-LINE-MIB", "adsl2ChConfProfMinDataRateLowPwrDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMaxDelayUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMinDataRateUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMinProtectionDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMaxDataRateDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMaxDelayDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfUsDataRateDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMaxBerDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfRowStatus"), ("ADSL2-LINE-MIB", "adsl2ChConfProfUsDataRateUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMaxDataRateUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMinDataRateDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfDsDataRateUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfDsDataRateDs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMaxBerUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMinProtectionUs"), ) )
if mibBuilder.loadTexts: adsl2ChConfProfileGroup.setDescription("The group of objects in a channel configuration profile.")
adsl2ChConfProfileAtmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 13)).setObjects(*(("ADSL2-LINE-MIB", "adsl2ChConfProfImaEnabled"), ("ADSL2-LINE-MIB", "adsl2ChStatusAtmStatus"), ) )
if mibBuilder.loadTexts: adsl2ChConfProfileAtmGroup.setDescription("The group of configuration objects required when the data\npath is ATM.")
adsl2ChConfProfileMinResGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 14)).setObjects(*(("ADSL2-LINE-MIB", "adsl2ChConfProfMinResDataRateUs"), ("ADSL2-LINE-MIB", "adsl2ChConfProfMinResDataRateDs"), ) )
if mibBuilder.loadTexts: adsl2ChConfProfileMinResGroup.setDescription("The group of configuration objects required for the\nreserved data rate.")
adsl2LineAlarmConfTemplateGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 15)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LAlarmConfTempChan2ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LAlarmConfTempChan1ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LAlarmConfTempChan4ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LAlarmConfTempChan3ConfProfile"), ("ADSL2-LINE-MIB", "adsl2LAlarmConfTempRowStatus"), ("ADSL2-LINE-MIB", "adsl2LAlarmConfTempLineProfile"), ) )
if mibBuilder.loadTexts: adsl2LineAlarmConfTemplateGroup.setDescription("The group of objects in a line alarm\ntemplate.")
adsl2LineAlarmConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 16)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinSes"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinFecs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinUas"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileThresh15MinFailedFullInt"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinLoss"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinEs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinLoss"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAtucThresh15MinSes"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileRowStatus"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileThresh15MinFailedShrtInt"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinFecs"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinUas"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileAturThresh15MinEs"), ) )
if mibBuilder.loadTexts: adsl2LineAlarmConfProfileGroup.setDescription("The group of objects in a line alarm profile.")
adsl2ChAlarmConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 17)).setObjects(*(("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileRowStatus"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAtucThresh15MinCorrected"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAturThresh15MinCodingViolations"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileAturThresh15MinCorrected"), ) )
if mibBuilder.loadTexts: adsl2ChAlarmConfProfileGroup.setDescription("The group of objects in a channel alarm profile.")
adsl2PMLineCurrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 18)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLCurr1DayValidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayLoss"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayUas"), ("ADSL2-LINE-MIB", "adsl2PMLCurrValidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInvalidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayInvalidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MLoss"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MFecs"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayFecs"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayTimeElapsed"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MUas"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DaySes"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MEs"), ("ADSL2-LINE-MIB", "adsl2PMLCurr1DayEs"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MTimeElapsed"), ("ADSL2-LINE-MIB", "adsl2PMLCurr15MSes"), ) )
if mibBuilder.loadTexts: adsl2PMLineCurrGroup.setDescription("The group of objects that report the line-level\ncounters for current PM intervals.")
adsl2PMLineCurrInitGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 19)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MTimeElapsed"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit1DayFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MFailedFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit1DayFailedFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit1DayTimeElapsed"), ) )
if mibBuilder.loadTexts: adsl2PMLineCurrInitGroup.setDescription("The group of objects that report the full\ninitialization counters for current PM intervals.")
adsl2PMLineCurrInitShortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 20)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MFailedShortInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit1DayFailedShortInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit1DayShortInits"), ("ADSL2-LINE-MIB", "adsl2PMLCurrInit15MShortInits"), ) )
if mibBuilder.loadTexts: adsl2PMLineCurrInitShortGroup.setDescription("The group of objects that report the short\ninitialization counters for current PM intervals.")
adsl2PMLineHist15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 21)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLHist15MEs"), ("ADSL2-LINE-MIB", "adsl2PMLHist15MUas"), ("ADSL2-LINE-MIB", "adsl2PMLHist15MMonitoredTime"), ("ADSL2-LINE-MIB", "adsl2PMLHist15MSes"), ("ADSL2-LINE-MIB", "adsl2PMLHist15MLoss"), ("ADSL2-LINE-MIB", "adsl2PMLHist15MFecs"), ("ADSL2-LINE-MIB", "adsl2PMLHist15MValidInterval"), ) )
if mibBuilder.loadTexts: adsl2PMLineHist15MinGroup.setDescription("The group of line-level PM counters for the previous\n15-minute interval.")
adsl2PMLineHist1DayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 22)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLHist1DEs"), ("ADSL2-LINE-MIB", "adsl2PMLHist1DSes"), ("ADSL2-LINE-MIB", "adsl2PMLHist1DLoss"), ("ADSL2-LINE-MIB", "adsl2PMLHist1DValidInterval"), ("ADSL2-LINE-MIB", "adsl2PMLHist1DUas"), ("ADSL2-LINE-MIB", "adsl2PMLHist1DMonitoredTime"), ("ADSL2-LINE-MIB", "adsl2PMLHist1DFecs"), ) )
if mibBuilder.loadTexts: adsl2PMLineHist1DayGroup.setDescription("The group of line-level PM counters for the previous\n24-hour interval.")
adsl2PMLineInitHist15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 23)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLHistInit15MMonitoredTime"), ("ADSL2-LINE-MIB", "adsl2PMLHistInit15MFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLHistInit15MValidInterval"), ("ADSL2-LINE-MIB", "adsl2PMLHistInit15MFailedFullInits"), ) )
if mibBuilder.loadTexts: adsl2PMLineInitHist15MinGroup.setDescription("The group of PM counters for the previous 15-minute\ninterval's full initializations.")
adsl2PMLineInitHist15MinShortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 24)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLHistInit15MFailedShortInits"), ("ADSL2-LINE-MIB", "adsl2PMLHistInit15MShortInits"), ) )
if mibBuilder.loadTexts: adsl2PMLineInitHist15MinShortGroup.setDescription("The group of PM counters for the previous 15-minute\ninterval's short initializations.")
adsl2PMLineInitHist1DayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 25)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLHistinit1DValidInterval"), ("ADSL2-LINE-MIB", "adsl2PMLHistinit1DMonitoredTime"), ("ADSL2-LINE-MIB", "adsl2PMLHistinit1DFullInits"), ("ADSL2-LINE-MIB", "adsl2PMLHistinit1DFailedFullInits"), ) )
if mibBuilder.loadTexts: adsl2PMLineInitHist1DayGroup.setDescription("The group of PM counters for the previous 24-hour\ninterval's full initializations.")
adsl2PMLineInitHist1DayShortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 26)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMLHistinit1DShortInits"), ("ADSL2-LINE-MIB", "adsl2PMLHistinit1DFailedShortInits"), ) )
if mibBuilder.loadTexts: adsl2PMLineInitHist1DayShortGroup.setDescription("The group of PM counters for the previous 24-hour\ninterval's short initializations.")
adsl2PMChCurrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 27)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMChCurrInvalidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMChCurr15MCorrectedBlocks"), ("ADSL2-LINE-MIB", "adsl2PMChCurr1DayValidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMChCurrValidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMChCurr1DayInvalidIntervals"), ("ADSL2-LINE-MIB", "adsl2PMChCurr1DayCorrectedBlocks"), ("ADSL2-LINE-MIB", "adsl2PMChCurr15MCodingViolations"), ("ADSL2-LINE-MIB", "adsl2PMChCurr1DayTimeElapsed"), ("ADSL2-LINE-MIB", "adsl2PMChCurr15MTimeElapsed"), ("ADSL2-LINE-MIB", "adsl2PMChCurr1DayCodingViolations"), ) )
if mibBuilder.loadTexts: adsl2PMChCurrGroup.setDescription("The group of objects that report the channel-level\ncounters for current PM intervals.")
adsl2PMChHist15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 28)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMChHist15MValidInterval"), ("ADSL2-LINE-MIB", "adsl2PMChHist15MCodingViolations"), ("ADSL2-LINE-MIB", "adsl2PMChHist15MMonitoredTime"), ("ADSL2-LINE-MIB", "adsl2PMChHist15MCorrectedBlocks"), ) )
if mibBuilder.loadTexts: adsl2PMChHist15MinGroup.setDescription("The group of objects that report the channel-level\ncounters for previous 15-minute PM intervals.")
adsl2PMChHist1DGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 29)).setObjects(*(("ADSL2-LINE-MIB", "adsl2PMChHist1DValidInterval"), ("ADSL2-LINE-MIB", "adsl2PMChHist1DCodingViolations"), ("ADSL2-LINE-MIB", "adsl2PMChHist1DCorrectedBlocks"), ("ADSL2-LINE-MIB", "adsl2PMChHist1DMonitoredTime"), ) )
if mibBuilder.loadTexts: adsl2PMChHist1DGroup.setDescription("The group of objects that report the channel-level\ncounters for previous 24-hour PM intervals.")
adsl2ScalarSCGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 30)).setObjects(*(("ADSL2-LINE-MIB", "adsl2ScalarSCAvailInterfaces"), ("ADSL2-LINE-MIB", "adsl2ScalarSCMaxInterfaces"), ) )
if mibBuilder.loadTexts: adsl2ScalarSCGroup.setDescription("The group of objects that report the available memory\nresources for DELT processes.")
adsl2ThreshNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 31)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LinePerfSESThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfFECSThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfCodingViolationsThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfLOSSThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfUASThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfESThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfFailedShortInitThresh"), ("ADSL2-LINE-MIB", "adsl2LinePerfFECSThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfSESThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfCorrectedThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfCodingViolationsThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfCorrectedThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfLOSSThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfESThreshAtur"), ("ADSL2-LINE-MIB", "adsl2LinePerfUASThreshAtuc"), ("ADSL2-LINE-MIB", "adsl2LinePerfFailedFullInitThresh"), ) )
if mibBuilder.loadTexts: adsl2ThreshNotificationGroup.setDescription("This group supports notifications of significant conditions\nassociated with ADSL/ADSL2/ADSL2+ lines.")
adsl2StatusChangeNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 1, 32)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LineStatusChangeAtuc"), ("ADSL2-LINE-MIB", "adsl2LineStatusChangeAtur"), ) )
if mibBuilder.loadTexts: adsl2StatusChangeNotificationGroup.setDescription("This group supports notifications of threshold crossing\nassociated with ADSL/ADSL2/ADSL2+ lines.")

# Compliances

adsl2LineMibCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 238, 1, 7, 2, 1)).setObjects(*(("ADSL2-LINE-MIB", "adsl2LineInventoryGroup"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfTemplateGroup"), ("ADSL2-LINE-MIB", "adsl2StatusChangeNotificationGroup"), ("ADSL2-LINE-MIB", "adsl2PMChHist15MinGroup"), ("ADSL2-LINE-MIB", "adsl2ChannelStatusPtmGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineInitHist1DayGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineInitHist15MinShortGroup"), ("ADSL2-LINE-MIB", "adsl2PMChHist1DGroup"), ("ADSL2-LINE-MIB", "adsl2LineAlarmConfProfileGroup"), ("ADSL2-LINE-MIB", "adsl2ChannelStatusGroup"), ("ADSL2-LINE-MIB", "adsl2PMChCurrGroup"), ("ADSL2-LINE-MIB", "adsl2ThreshNotificationGroup"), ("ADSL2-LINE-MIB", "adsl2SCStatusGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineHist15MinGroup"), ("ADSL2-LINE-MIB", "adsl2LineConfProfModeSpecGroup"), ("ADSL2-LINE-MIB", "adsl2ScalarSCGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineInitHist1DayShortGroup"), ("ADSL2-LINE-MIB", "adsl2LineConfProfMsgMinGroup"), ("ADSL2-LINE-MIB", "adsl2ChannelStatusAtmGroup"), ("ADSL2-LINE-MIB", "adsl2LineGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineCurrInitShortGroup"), ("ADSL2-LINE-MIB", "adsl2ChConfProfileGroup"), ("ADSL2-LINE-MIB", "adsl2ChConfProfileAtmGroup"), ("ADSL2-LINE-MIB", "adsl2ChConfProfileMinResGroup"), ("ADSL2-LINE-MIB", "adsl2ChAlarmConfProfileGroup"), ("ADSL2-LINE-MIB", "adsl2LineConfProfGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineInitHist15MinGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineCurrGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineHist1DayGroup"), ("ADSL2-LINE-MIB", "adsl2LineConfTemplateGroup"), ("ADSL2-LINE-MIB", "adsl2PMLineCurrInitGroup"), ("ADSL2-LINE-MIB", "adsl2LineConfProfRaGroup"), ) )
if mibBuilder.loadTexts: adsl2LineMibCompliance.setDescription("The compliance statement for SNMP entities that\nmanage ADSL/ADSL2 or ADSL2+ interfaces.")

# Exports

# Module identity
mibBuilder.exportSymbols("ADSL2-LINE-MIB", PYSNMP_MODULE_ID=adsl2MIB)

# Objects
mibBuilder.exportSymbols("ADSL2-LINE-MIB", adsl2MIB=adsl2MIB, adsl2=adsl2, adsl2Notifications=adsl2Notifications, adsl2Line=adsl2Line, adsl2LineTable=adsl2LineTable, adsl2LineEntry=adsl2LineEntry, adsl2LineCnfgTemplate=adsl2LineCnfgTemplate, adsl2LineAlarmCnfgTemplate=adsl2LineAlarmCnfgTemplate, adsl2LineCmndConfPmsf=adsl2LineCmndConfPmsf, adsl2LineCmndConfLdsf=adsl2LineCmndConfLdsf, adsl2LineCmndConfLdsfFailReason=adsl2LineCmndConfLdsfFailReason, adsl2LineCmndAutomodeColdStart=adsl2LineCmndAutomodeColdStart, adsl2LineStatusAtuTransSys=adsl2LineStatusAtuTransSys, adsl2LineStatusPwrMngState=adsl2LineStatusPwrMngState, adsl2LineStatusInitResult=adsl2LineStatusInitResult, adsl2LineStatusLastStateDs=adsl2LineStatusLastStateDs, adsl2LineStatusLastStateUs=adsl2LineStatusLastStateUs, adsl2LineStatusAtur=adsl2LineStatusAtur, adsl2LineStatusAtuc=adsl2LineStatusAtuc, adsl2LineStatusLnAttenDs=adsl2LineStatusLnAttenDs, adsl2LineStatusLnAttenUs=adsl2LineStatusLnAttenUs, adsl2LineStatusSigAttenDs=adsl2LineStatusSigAttenDs, adsl2LineStatusSigAttenUs=adsl2LineStatusSigAttenUs, adsl2LineStatusSnrMarginDs=adsl2LineStatusSnrMarginDs, adsl2LineStatusSnrMarginUs=adsl2LineStatusSnrMarginUs, adsl2LineStatusAttainableRateDs=adsl2LineStatusAttainableRateDs, adsl2LineStatusAttainableRateUs=adsl2LineStatusAttainableRateUs, adsl2LineStatusActPsdDs=adsl2LineStatusActPsdDs, adsl2LineStatusActPsdUs=adsl2LineStatusActPsdUs, adsl2LineStatusActAtpDs=adsl2LineStatusActAtpDs, adsl2LineStatusActAtpUs=adsl2LineStatusActAtpUs, adsl2Status=adsl2Status, adsl2ChannelStatusTable=adsl2ChannelStatusTable, adsl2ChannelStatusEntry=adsl2ChannelStatusEntry, adsl2ChStatusUnit=adsl2ChStatusUnit, adsl2ChStatusChannelNum=adsl2ChStatusChannelNum, adsl2ChStatusActDataRate=adsl2ChStatusActDataRate, adsl2ChStatusPrevDataRate=adsl2ChStatusPrevDataRate, adsl2ChStatusActDelay=adsl2ChStatusActDelay, adsl2ChStatusAtmStatus=adsl2ChStatusAtmStatus, adsl2ChStatusPtmStatus=adsl2ChStatusPtmStatus, adsl2SCStatusTable=adsl2SCStatusTable, adsl2SCStatusEntry=adsl2SCStatusEntry, adsl2SCStatusDirection=adsl2SCStatusDirection, adsl2SCStatusMtime=adsl2SCStatusMtime, adsl2SCStatusSnr=adsl2SCStatusSnr, adsl2SCStatusBitsAlloc=adsl2SCStatusBitsAlloc, adsl2SCStatusGainAlloc=adsl2SCStatusGainAlloc, adsl2SCStatusTssi=adsl2SCStatusTssi, adsl2SCStatusLinScale=adsl2SCStatusLinScale, adsl2SCStatusLinReal=adsl2SCStatusLinReal, adsl2SCStatusLinImg=adsl2SCStatusLinImg, adsl2SCStatusLogMt=adsl2SCStatusLogMt, adsl2SCStatusLog=adsl2SCStatusLog, adsl2SCStatusQlnMt=adsl2SCStatusQlnMt, adsl2SCStatusQln=adsl2SCStatusQln, adsl2SCStatusLnAtten=adsl2SCStatusLnAtten, adsl2SCStatusSigAtten=adsl2SCStatusSigAtten, adsl2SCStatusSnrMargin=adsl2SCStatusSnrMargin, adsl2SCStatusAttainableRate=adsl2SCStatusAttainableRate, adsl2SCStatusActAtp=adsl2SCStatusActAtp, adsl2SCStatusRowStatus=adsl2SCStatusRowStatus, adsl2Inventory=adsl2Inventory, adsl2LineInventoryTable=adsl2LineInventoryTable, adsl2LineInventoryEntry=adsl2LineInventoryEntry, adsl2LInvUnit=adsl2LInvUnit, adsl2LInvG994VendorId=adsl2LInvG994VendorId, adsl2LInvSystemVendorId=adsl2LInvSystemVendorId, adsl2LInvVersionNumber=adsl2LInvVersionNumber, adsl2LInvSerialNumber=adsl2LInvSerialNumber, adsl2LInvSelfTestResult=adsl2LInvSelfTestResult, adsl2LInvTransmissionCapabilities=adsl2LInvTransmissionCapabilities, adsl2PM=adsl2PM, adsl2PMLine=adsl2PMLine, adsl2PMLineCurrTable=adsl2PMLineCurrTable, adsl2PMLineCurrEntry=adsl2PMLineCurrEntry, adsl2PMLCurrUnit=adsl2PMLCurrUnit, adsl2PMLCurrValidIntervals=adsl2PMLCurrValidIntervals, adsl2PMLCurrInvalidIntervals=adsl2PMLCurrInvalidIntervals, adsl2PMLCurr15MTimeElapsed=adsl2PMLCurr15MTimeElapsed, adsl2PMLCurr15MFecs=adsl2PMLCurr15MFecs, adsl2PMLCurr15MEs=adsl2PMLCurr15MEs, adsl2PMLCurr15MSes=adsl2PMLCurr15MSes, adsl2PMLCurr15MLoss=adsl2PMLCurr15MLoss, adsl2PMLCurr15MUas=adsl2PMLCurr15MUas, adsl2PMLCurr1DayValidIntervals=adsl2PMLCurr1DayValidIntervals, adsl2PMLCurr1DayInvalidIntervals=adsl2PMLCurr1DayInvalidIntervals, adsl2PMLCurr1DayTimeElapsed=adsl2PMLCurr1DayTimeElapsed, adsl2PMLCurr1DayFecs=adsl2PMLCurr1DayFecs, adsl2PMLCurr1DayEs=adsl2PMLCurr1DayEs, adsl2PMLCurr1DaySes=adsl2PMLCurr1DaySes, adsl2PMLCurr1DayLoss=adsl2PMLCurr1DayLoss, adsl2PMLCurr1DayUas=adsl2PMLCurr1DayUas, adsl2PMLineCurrInitTable=adsl2PMLineCurrInitTable, adsl2PMLineCurrInitEntry=adsl2PMLineCurrInitEntry, adsl2PMLCurrInit15MTimeElapsed=adsl2PMLCurrInit15MTimeElapsed, adsl2PMLCurrInit15MFullInits=adsl2PMLCurrInit15MFullInits, adsl2PMLCurrInit15MFailedFullInits=adsl2PMLCurrInit15MFailedFullInits, adsl2PMLCurrInit15MShortInits=adsl2PMLCurrInit15MShortInits, adsl2PMLCurrInit15MFailedShortInits=adsl2PMLCurrInit15MFailedShortInits, adsl2PMLCurrInit1DayTimeElapsed=adsl2PMLCurrInit1DayTimeElapsed, adsl2PMLCurrInit1DayFullInits=adsl2PMLCurrInit1DayFullInits, adsl2PMLCurrInit1DayFailedFullInits=adsl2PMLCurrInit1DayFailedFullInits, adsl2PMLCurrInit1DayShortInits=adsl2PMLCurrInit1DayShortInits, adsl2PMLCurrInit1DayFailedShortInits=adsl2PMLCurrInit1DayFailedShortInits, adsl2PMLineHist15MinTable=adsl2PMLineHist15MinTable, adsl2PMLineHist15MinEntry=adsl2PMLineHist15MinEntry, adsl2PMLHist15MUnit=adsl2PMLHist15MUnit, adsl2PMLHist15MInterval=adsl2PMLHist15MInterval, adsl2PMLHist15MMonitoredTime=adsl2PMLHist15MMonitoredTime, adsl2PMLHist15MFecs=adsl2PMLHist15MFecs, adsl2PMLHist15MEs=adsl2PMLHist15MEs, adsl2PMLHist15MSes=adsl2PMLHist15MSes, adsl2PMLHist15MLoss=adsl2PMLHist15MLoss, adsl2PMLHist15MUas=adsl2PMLHist15MUas, adsl2PMLHist15MValidInterval=adsl2PMLHist15MValidInterval, adsl2PMLineHist1DayTable=adsl2PMLineHist1DayTable, adsl2PMLineHist1DayEntry=adsl2PMLineHist1DayEntry, adsl2PMLHist1DUnit=adsl2PMLHist1DUnit, adsl2PMLHist1DInterval=adsl2PMLHist1DInterval, adsl2PMLHist1DMonitoredTime=adsl2PMLHist1DMonitoredTime, adsl2PMLHist1DFecs=adsl2PMLHist1DFecs, adsl2PMLHist1DEs=adsl2PMLHist1DEs, adsl2PMLHist1DSes=adsl2PMLHist1DSes, adsl2PMLHist1DLoss=adsl2PMLHist1DLoss, adsl2PMLHist1DUas=adsl2PMLHist1DUas)
mibBuilder.exportSymbols("ADSL2-LINE-MIB", adsl2PMLHist1DValidInterval=adsl2PMLHist1DValidInterval, adsl2PMLineInitHist15MinTable=adsl2PMLineInitHist15MinTable, adsl2PMLineInitHist15MinEntry=adsl2PMLineInitHist15MinEntry, adsl2PMLHistInit15MInterval=adsl2PMLHistInit15MInterval, adsl2PMLHistInit15MMonitoredTime=adsl2PMLHistInit15MMonitoredTime, adsl2PMLHistInit15MFullInits=adsl2PMLHistInit15MFullInits, adsl2PMLHistInit15MFailedFullInits=adsl2PMLHistInit15MFailedFullInits, adsl2PMLHistInit15MShortInits=adsl2PMLHistInit15MShortInits, adsl2PMLHistInit15MFailedShortInits=adsl2PMLHistInit15MFailedShortInits, adsl2PMLHistInit15MValidInterval=adsl2PMLHistInit15MValidInterval, adsl2PMLineInitHist1DayTable=adsl2PMLineInitHist1DayTable, adsl2PMLineInitHist1DayEntry=adsl2PMLineInitHist1DayEntry, adsl2PMLHistinit1DInterval=adsl2PMLHistinit1DInterval, adsl2PMLHistinit1DMonitoredTime=adsl2PMLHistinit1DMonitoredTime, adsl2PMLHistinit1DFullInits=adsl2PMLHistinit1DFullInits, adsl2PMLHistinit1DFailedFullInits=adsl2PMLHistinit1DFailedFullInits, adsl2PMLHistinit1DShortInits=adsl2PMLHistinit1DShortInits, adsl2PMLHistinit1DFailedShortInits=adsl2PMLHistinit1DFailedShortInits, adsl2PMLHistinit1DValidInterval=adsl2PMLHistinit1DValidInterval, adsl2PMChannel=adsl2PMChannel, adsl2PMChCurrTable=adsl2PMChCurrTable, adsl2PMChCurrEntry=adsl2PMChCurrEntry, adsl2PMChCurrUnit=adsl2PMChCurrUnit, adsl2PMChCurrValidIntervals=adsl2PMChCurrValidIntervals, adsl2PMChCurrInvalidIntervals=adsl2PMChCurrInvalidIntervals, adsl2PMChCurr15MTimeElapsed=adsl2PMChCurr15MTimeElapsed, adsl2PMChCurr15MCodingViolations=adsl2PMChCurr15MCodingViolations, adsl2PMChCurr15MCorrectedBlocks=adsl2PMChCurr15MCorrectedBlocks, adsl2PMChCurr1DayValidIntervals=adsl2PMChCurr1DayValidIntervals, adsl2PMChCurr1DayInvalidIntervals=adsl2PMChCurr1DayInvalidIntervals, adsl2PMChCurr1DayTimeElapsed=adsl2PMChCurr1DayTimeElapsed, adsl2PMChCurr1DayCodingViolations=adsl2PMChCurr1DayCodingViolations, adsl2PMChCurr1DayCorrectedBlocks=adsl2PMChCurr1DayCorrectedBlocks, adsl2PMChHist15MinTable=adsl2PMChHist15MinTable, adsl2PMChHist15MinEntry=adsl2PMChHist15MinEntry, adsl2PMChHist15MUnit=adsl2PMChHist15MUnit, adsl2PMChHist15MInterval=adsl2PMChHist15MInterval, adsl2PMChHist15MMonitoredTime=adsl2PMChHist15MMonitoredTime, adsl2PMChHist15MCodingViolations=adsl2PMChHist15MCodingViolations, adsl2PMChHist15MCorrectedBlocks=adsl2PMChHist15MCorrectedBlocks, adsl2PMChHist15MValidInterval=adsl2PMChHist15MValidInterval, adsl2PMChHist1DTable=adsl2PMChHist1DTable, adsl2PMChHist1DEntry=adsl2PMChHist1DEntry, adsl2PMChHist1DUnit=adsl2PMChHist1DUnit, adsl2PMChHist1DInterval=adsl2PMChHist1DInterval, adsl2PMChHist1DMonitoredTime=adsl2PMChHist1DMonitoredTime, adsl2PMChHist1DCodingViolations=adsl2PMChHist1DCodingViolations, adsl2PMChHist1DCorrectedBlocks=adsl2PMChHist1DCorrectedBlocks, adsl2PMChHist1DValidInterval=adsl2PMChHist1DValidInterval, adsl2Profile=adsl2Profile, adsl2ProfileLine=adsl2ProfileLine, adsl2LineConfTemplateTable=adsl2LineConfTemplateTable, adsl2LineConfTemplateEntry=adsl2LineConfTemplateEntry, adsl2LConfTempTemplateName=adsl2LConfTempTemplateName, adsl2LConfTempLineProfile=adsl2LConfTempLineProfile, adsl2LConfTempChan1ConfProfile=adsl2LConfTempChan1ConfProfile, adsl2LConfTempChan1RaRatioDs=adsl2LConfTempChan1RaRatioDs, adsl2LConfTempChan1RaRatioUs=adsl2LConfTempChan1RaRatioUs, adsl2LConfTempChan2ConfProfile=adsl2LConfTempChan2ConfProfile, adsl2LConfTempChan2RaRatioDs=adsl2LConfTempChan2RaRatioDs, adsl2LConfTempChan2RaRatioUs=adsl2LConfTempChan2RaRatioUs, adsl2LConfTempChan3ConfProfile=adsl2LConfTempChan3ConfProfile, adsl2LConfTempChan3RaRatioDs=adsl2LConfTempChan3RaRatioDs, adsl2LConfTempChan3RaRatioUs=adsl2LConfTempChan3RaRatioUs, adsl2LConfTempChan4ConfProfile=adsl2LConfTempChan4ConfProfile, adsl2LConfTempChan4RaRatioDs=adsl2LConfTempChan4RaRatioDs, adsl2LConfTempChan4RaRatioUs=adsl2LConfTempChan4RaRatioUs, adsl2LConfTempRowStatus=adsl2LConfTempRowStatus, adsl2LineConfProfTable=adsl2LineConfProfTable, adsl2LineConfProfEntry=adsl2LineConfProfEntry, adsl2LConfProfProfileName=adsl2LConfProfProfileName, adsl2LConfProfScMaskDs=adsl2LConfProfScMaskDs, adsl2LConfProfScMaskUs=adsl2LConfProfScMaskUs, adsl2LConfProfRfiBandsDs=adsl2LConfProfRfiBandsDs, adsl2LConfProfRaModeDs=adsl2LConfProfRaModeDs, adsl2LConfProfRaModeUs=adsl2LConfProfRaModeUs, adsl2LConfProfRaUsNrmDs=adsl2LConfProfRaUsNrmDs, adsl2LConfProfRaUsNrmUs=adsl2LConfProfRaUsNrmUs, adsl2LConfProfRaUsTimeDs=adsl2LConfProfRaUsTimeDs, adsl2LConfProfRaUsTimeUs=adsl2LConfProfRaUsTimeUs, adsl2LConfProfRaDsNrmsDs=adsl2LConfProfRaDsNrmsDs, adsl2LConfProfRaDsNrmsUs=adsl2LConfProfRaDsNrmsUs, adsl2LConfProfRaDsTimeDs=adsl2LConfProfRaDsTimeDs, adsl2LConfProfRaDsTimeUs=adsl2LConfProfRaDsTimeUs, adsl2LConfProfTargetSnrmDs=adsl2LConfProfTargetSnrmDs, adsl2LConfProfTargetSnrmUs=adsl2LConfProfTargetSnrmUs, adsl2LConfProfMaxSnrmDs=adsl2LConfProfMaxSnrmDs, adsl2LConfProfMaxSnrmUs=adsl2LConfProfMaxSnrmUs, adsl2LConfProfMinSnrmDs=adsl2LConfProfMinSnrmDs, adsl2LConfProfMinSnrmUs=adsl2LConfProfMinSnrmUs, adsl2LConfProfMsgMinUs=adsl2LConfProfMsgMinUs, adsl2LConfProfMsgMinDs=adsl2LConfProfMsgMinDs, adsl2LConfProfAtuTransSysEna=adsl2LConfProfAtuTransSysEna, adsl2LConfProfPmMode=adsl2LConfProfPmMode, adsl2LConfProfL0Time=adsl2LConfProfL0Time, adsl2LConfProfL2Time=adsl2LConfProfL2Time, adsl2LConfProfL2Atpr=adsl2LConfProfL2Atpr, adsl2LConfProfL2Atprt=adsl2LConfProfL2Atprt, adsl2LConfProfRowStatus=adsl2LConfProfRowStatus, adsl2LineConfProfModeSpecTable=adsl2LineConfProfModeSpecTable, adsl2LineConfProfModeSpecEntry=adsl2LineConfProfModeSpecEntry, adsl2LConfProfAdslMode=adsl2LConfProfAdslMode, adsl2LConfProfMaxNomPsdDs=adsl2LConfProfMaxNomPsdDs, adsl2LConfProfMaxNomPsdUs=adsl2LConfProfMaxNomPsdUs, adsl2LConfProfMaxNomAtpDs=adsl2LConfProfMaxNomAtpDs, adsl2LConfProfMaxNomAtpUs=adsl2LConfProfMaxNomAtpUs, adsl2LConfProfMaxAggRxPwrUs=adsl2LConfProfMaxAggRxPwrUs, adsl2LConfProfPsdMaskDs=adsl2LConfProfPsdMaskDs, adsl2LConfProfPsdMaskUs=adsl2LConfProfPsdMaskUs, adsl2LConfProfPsdMaskSelectUs=adsl2LConfProfPsdMaskSelectUs, adsl2LConfProfModeSpecRowStatus=adsl2LConfProfModeSpecRowStatus, adsl2ProfileChannel=adsl2ProfileChannel, adsl2ChConfProfileTable=adsl2ChConfProfileTable, adsl2ChConfProfileEntry=adsl2ChConfProfileEntry, adsl2ChConfProfProfileName=adsl2ChConfProfProfileName, adsl2ChConfProfMinDataRateDs=adsl2ChConfProfMinDataRateDs, adsl2ChConfProfMinDataRateUs=adsl2ChConfProfMinDataRateUs, adsl2ChConfProfMinResDataRateDs=adsl2ChConfProfMinResDataRateDs, adsl2ChConfProfMinResDataRateUs=adsl2ChConfProfMinResDataRateUs, adsl2ChConfProfMaxDataRateDs=adsl2ChConfProfMaxDataRateDs, adsl2ChConfProfMaxDataRateUs=adsl2ChConfProfMaxDataRateUs, adsl2ChConfProfMinDataRateLowPwrDs=adsl2ChConfProfMinDataRateLowPwrDs, adsl2ChConfProfMaxDelayDs=adsl2ChConfProfMaxDelayDs, adsl2ChConfProfMaxDelayUs=adsl2ChConfProfMaxDelayUs, adsl2ChConfProfMinProtectionDs=adsl2ChConfProfMinProtectionDs, adsl2ChConfProfMinProtectionUs=adsl2ChConfProfMinProtectionUs, adsl2ChConfProfMaxBerDs=adsl2ChConfProfMaxBerDs)
mibBuilder.exportSymbols("ADSL2-LINE-MIB", adsl2ChConfProfMaxBerUs=adsl2ChConfProfMaxBerUs, adsl2ChConfProfUsDataRateDs=adsl2ChConfProfUsDataRateDs, adsl2ChConfProfDsDataRateDs=adsl2ChConfProfDsDataRateDs, adsl2ChConfProfUsDataRateUs=adsl2ChConfProfUsDataRateUs, adsl2ChConfProfDsDataRateUs=adsl2ChConfProfDsDataRateUs, adsl2ChConfProfImaEnabled=adsl2ChConfProfImaEnabled, adsl2ChConfProfRowStatus=adsl2ChConfProfRowStatus, adsl2ProfileAlarmConf=adsl2ProfileAlarmConf, adsl2LineAlarmConfTemplateTable=adsl2LineAlarmConfTemplateTable, adsl2LineAlarmConfTemplateEntry=adsl2LineAlarmConfTemplateEntry, adsl2LAlarmConfTempTemplateName=adsl2LAlarmConfTempTemplateName, adsl2LAlarmConfTempLineProfile=adsl2LAlarmConfTempLineProfile, adsl2LAlarmConfTempChan1ConfProfile=adsl2LAlarmConfTempChan1ConfProfile, adsl2LAlarmConfTempChan2ConfProfile=adsl2LAlarmConfTempChan2ConfProfile, adsl2LAlarmConfTempChan3ConfProfile=adsl2LAlarmConfTempChan3ConfProfile, adsl2LAlarmConfTempChan4ConfProfile=adsl2LAlarmConfTempChan4ConfProfile, adsl2LAlarmConfTempRowStatus=adsl2LAlarmConfTempRowStatus, adsl2LineAlarmConfProfileTable=adsl2LineAlarmConfProfileTable, adsl2LineAlarmConfProfileEntry=adsl2LineAlarmConfProfileEntry, adsl2LineAlarmConfProfileName=adsl2LineAlarmConfProfileName, adsl2LineAlarmConfProfileAtucThresh15MinFecs=adsl2LineAlarmConfProfileAtucThresh15MinFecs, adsl2LineAlarmConfProfileAtucThresh15MinEs=adsl2LineAlarmConfProfileAtucThresh15MinEs, adsl2LineAlarmConfProfileAtucThresh15MinSes=adsl2LineAlarmConfProfileAtucThresh15MinSes, adsl2LineAlarmConfProfileAtucThresh15MinLoss=adsl2LineAlarmConfProfileAtucThresh15MinLoss, adsl2LineAlarmConfProfileAtucThresh15MinUas=adsl2LineAlarmConfProfileAtucThresh15MinUas, adsl2LineAlarmConfProfileAturThresh15MinFecs=adsl2LineAlarmConfProfileAturThresh15MinFecs, adsl2LineAlarmConfProfileAturThresh15MinEs=adsl2LineAlarmConfProfileAturThresh15MinEs, adsl2LineAlarmConfProfileAturThresh15MinSes=adsl2LineAlarmConfProfileAturThresh15MinSes, adsl2LineAlarmConfProfileAturThresh15MinLoss=adsl2LineAlarmConfProfileAturThresh15MinLoss, adsl2LineAlarmConfProfileAturThresh15MinUas=adsl2LineAlarmConfProfileAturThresh15MinUas, adsl2LineAlarmConfProfileThresh15MinFailedFullInt=adsl2LineAlarmConfProfileThresh15MinFailedFullInt, adsl2LineAlarmConfProfileThresh15MinFailedShrtInt=adsl2LineAlarmConfProfileThresh15MinFailedShrtInt, adsl2LineAlarmConfProfileRowStatus=adsl2LineAlarmConfProfileRowStatus, adsl2ChAlarmConfProfileTable=adsl2ChAlarmConfProfileTable, adsl2ChAlarmConfProfileEntry=adsl2ChAlarmConfProfileEntry, adsl2ChAlarmConfProfileName=adsl2ChAlarmConfProfileName, adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations=adsl2ChAlarmConfProfileAtucThresh15MinCodingViolations, adsl2ChAlarmConfProfileAtucThresh15MinCorrected=adsl2ChAlarmConfProfileAtucThresh15MinCorrected, adsl2ChAlarmConfProfileAturThresh15MinCodingViolations=adsl2ChAlarmConfProfileAturThresh15MinCodingViolations, adsl2ChAlarmConfProfileAturThresh15MinCorrected=adsl2ChAlarmConfProfileAturThresh15MinCorrected, adsl2ChAlarmConfProfileRowStatus=adsl2ChAlarmConfProfileRowStatus, adsl2Scalar=adsl2Scalar, adsl2ScalarSC=adsl2ScalarSC, adsl2ScalarSCMaxInterfaces=adsl2ScalarSCMaxInterfaces, adsl2ScalarSCAvailInterfaces=adsl2ScalarSCAvailInterfaces, adsl2Conformance=adsl2Conformance, adsl2Groups=adsl2Groups, adsl2Compliances=adsl2Compliances)

# Notifications
mibBuilder.exportSymbols("ADSL2-LINE-MIB", adsl2LinePerfFECSThreshAtuc=adsl2LinePerfFECSThreshAtuc, adsl2LinePerfFECSThreshAtur=adsl2LinePerfFECSThreshAtur, adsl2LinePerfESThreshAtuc=adsl2LinePerfESThreshAtuc, adsl2LinePerfESThreshAtur=adsl2LinePerfESThreshAtur, adsl2LinePerfSESThreshAtuc=adsl2LinePerfSESThreshAtuc, adsl2LinePerfSESThreshAtur=adsl2LinePerfSESThreshAtur, adsl2LinePerfLOSSThreshAtuc=adsl2LinePerfLOSSThreshAtuc, adsl2LinePerfLOSSThreshAtur=adsl2LinePerfLOSSThreshAtur, adsl2LinePerfUASThreshAtuc=adsl2LinePerfUASThreshAtuc, adsl2LinePerfUASThreshAtur=adsl2LinePerfUASThreshAtur, adsl2LinePerfCodingViolationsThreshAtuc=adsl2LinePerfCodingViolationsThreshAtuc, adsl2LinePerfCodingViolationsThreshAtur=adsl2LinePerfCodingViolationsThreshAtur, adsl2LinePerfCorrectedThreshAtuc=adsl2LinePerfCorrectedThreshAtuc, adsl2LinePerfCorrectedThreshAtur=adsl2LinePerfCorrectedThreshAtur, adsl2LinePerfFailedFullInitThresh=adsl2LinePerfFailedFullInitThresh, adsl2LinePerfFailedShortInitThresh=adsl2LinePerfFailedShortInitThresh, adsl2LineStatusChangeAtuc=adsl2LineStatusChangeAtuc, adsl2LineStatusChangeAtur=adsl2LineStatusChangeAtur)

# Groups
mibBuilder.exportSymbols("ADSL2-LINE-MIB", adsl2LineGroup=adsl2LineGroup, adsl2ChannelStatusGroup=adsl2ChannelStatusGroup, adsl2ChannelStatusAtmGroup=adsl2ChannelStatusAtmGroup, adsl2ChannelStatusPtmGroup=adsl2ChannelStatusPtmGroup, adsl2SCStatusGroup=adsl2SCStatusGroup, adsl2LineInventoryGroup=adsl2LineInventoryGroup, adsl2LineConfTemplateGroup=adsl2LineConfTemplateGroup, adsl2LineConfProfGroup=adsl2LineConfProfGroup, adsl2LineConfProfRaGroup=adsl2LineConfProfRaGroup, adsl2LineConfProfMsgMinGroup=adsl2LineConfProfMsgMinGroup, adsl2LineConfProfModeSpecGroup=adsl2LineConfProfModeSpecGroup, adsl2ChConfProfileGroup=adsl2ChConfProfileGroup, adsl2ChConfProfileAtmGroup=adsl2ChConfProfileAtmGroup, adsl2ChConfProfileMinResGroup=adsl2ChConfProfileMinResGroup, adsl2LineAlarmConfTemplateGroup=adsl2LineAlarmConfTemplateGroup, adsl2LineAlarmConfProfileGroup=adsl2LineAlarmConfProfileGroup, adsl2ChAlarmConfProfileGroup=adsl2ChAlarmConfProfileGroup, adsl2PMLineCurrGroup=adsl2PMLineCurrGroup, adsl2PMLineCurrInitGroup=adsl2PMLineCurrInitGroup, adsl2PMLineCurrInitShortGroup=adsl2PMLineCurrInitShortGroup, adsl2PMLineHist15MinGroup=adsl2PMLineHist15MinGroup, adsl2PMLineHist1DayGroup=adsl2PMLineHist1DayGroup, adsl2PMLineInitHist15MinGroup=adsl2PMLineInitHist15MinGroup, adsl2PMLineInitHist15MinShortGroup=adsl2PMLineInitHist15MinShortGroup, adsl2PMLineInitHist1DayGroup=adsl2PMLineInitHist1DayGroup, adsl2PMLineInitHist1DayShortGroup=adsl2PMLineInitHist1DayShortGroup, adsl2PMChCurrGroup=adsl2PMChCurrGroup, adsl2PMChHist15MinGroup=adsl2PMChHist15MinGroup, adsl2PMChHist1DGroup=adsl2PMChHist1DGroup, adsl2ScalarSCGroup=adsl2ScalarSCGroup, adsl2ThreshNotificationGroup=adsl2ThreshNotificationGroup, adsl2StatusChangeNotificationGroup=adsl2StatusChangeNotificationGroup)

# Compliances
mibBuilder.exportSymbols("ADSL2-LINE-MIB", adsl2LineMibCompliance=adsl2LineMibCompliance)
