# PySNMP SMI module. Autogenerated from smidump -f python HOST-RESOURCES-TYPES
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:04 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( hrDevice, hrMIBAdminInfo, hrStorage, ) = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrDevice", "hrMIBAdminInfo", "hrStorage")
( Bits, Integer32, ModuleIdentity, MibIdentifier, ObjectIdentity, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "TimeTicks")

# Objects

hrStorageTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 2, 1))
hrStorageOther = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 2, 1, 1))
if mibBuilder.loadTexts: hrStorageOther.setDescription("The storage type identifier used when no other defined\ntype is appropriate.")
hrStorageRam = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 2, 1, 2))
if mibBuilder.loadTexts: hrStorageRam.setDescription("The storage type identifier used for RAM.")
hrStorageVirtualMemory = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 2, 1, 3))
if mibBuilder.loadTexts: hrStorageVirtualMemory.setDescription("The storage type identifier used for virtual memory,\ntemporary storage of swapped or paged memory.")
hrStorageFixedDisk = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 2, 1, 4))
if mibBuilder.loadTexts: hrStorageFixedDisk.setDescription("The storage type identifier used for non-removable\nrigid rotating magnetic storage devices.")
hrStorageRemovableDisk = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 2, 1, 5))
if mibBuilder.loadTexts: hrStorageRemovableDisk.setDescription("The storage type identifier used for removable rigid\nrotating magnetic storage devices.")
hrStorageFloppyDisk = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 2, 1, 6))
if mibBuilder.loadTexts: hrStorageFloppyDisk.setDescription("The storage type identifier used for non-rigid rotating\nmagnetic storage devices.")
hrStorageCompactDisc = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 2, 1, 7))
if mibBuilder.loadTexts: hrStorageCompactDisc.setDescription("The storage type identifier used for read-only rotating\noptical storage devices.")
hrStorageRamDisk = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 2, 1, 8))
if mibBuilder.loadTexts: hrStorageRamDisk.setDescription("The storage type identifier used for a file system that\nis stored in RAM.")
hrStorageFlashMemory = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 2, 1, 9))
if mibBuilder.loadTexts: hrStorageFlashMemory.setDescription("The storage type identifier used for flash memory.")
hrStorageNetworkDisk = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 2, 1, 10))
if mibBuilder.loadTexts: hrStorageNetworkDisk.setDescription("The storage type identifier used for a\nnetworked file system.")
hrDeviceTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1))
hrDeviceOther = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 1))
if mibBuilder.loadTexts: hrDeviceOther.setDescription("The device type identifier used when no other defined\ntype is appropriate.")
hrDeviceUnknown = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 2))
if mibBuilder.loadTexts: hrDeviceUnknown.setDescription("The device type identifier used when the device type is\nunknown.")
hrDeviceProcessor = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 3))
if mibBuilder.loadTexts: hrDeviceProcessor.setDescription("The device type identifier used for a CPU.")
hrDeviceNetwork = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 4))
if mibBuilder.loadTexts: hrDeviceNetwork.setDescription("The device type identifier used for a network interface.")
hrDevicePrinter = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 5))
if mibBuilder.loadTexts: hrDevicePrinter.setDescription("The device type identifier used for a printer.")
hrDeviceDiskStorage = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 6))
if mibBuilder.loadTexts: hrDeviceDiskStorage.setDescription("The device type identifier used for a disk drive.")
hrDeviceVideo = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 10))
if mibBuilder.loadTexts: hrDeviceVideo.setDescription("The device type identifier used for a video device.")
hrDeviceAudio = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 11))
if mibBuilder.loadTexts: hrDeviceAudio.setDescription("The device type identifier used for an audio device.")
hrDeviceCoprocessor = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 12))
if mibBuilder.loadTexts: hrDeviceCoprocessor.setDescription("The device type identifier used for a co-processor.")
hrDeviceKeyboard = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 13))
if mibBuilder.loadTexts: hrDeviceKeyboard.setDescription("The device type identifier used for a keyboard device.")
hrDeviceModem = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 14))
if mibBuilder.loadTexts: hrDeviceModem.setDescription("The device type identifier used for a modem.")
hrDeviceParallelPort = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 15))
if mibBuilder.loadTexts: hrDeviceParallelPort.setDescription("The device type identifier used for a parallel port.")
hrDevicePointing = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 16))
if mibBuilder.loadTexts: hrDevicePointing.setDescription("The device type identifier used for a pointing device\n(e.g., a mouse).")
hrDeviceSerialPort = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 17))
if mibBuilder.loadTexts: hrDeviceSerialPort.setDescription("The device type identifier used for a serial port.")
hrDeviceTape = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 18))
if mibBuilder.loadTexts: hrDeviceTape.setDescription("The device type identifier used for a tape storage device.")
hrDeviceClock = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 19))
if mibBuilder.loadTexts: hrDeviceClock.setDescription("The device type identifier used for a clock device.")
hrDeviceVolatileMemory = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 20))
if mibBuilder.loadTexts: hrDeviceVolatileMemory.setDescription("The device type identifier used for a volatile memory\nstorage device.")
hrDeviceNonVolatileMemory = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 1, 21))
if mibBuilder.loadTexts: hrDeviceNonVolatileMemory.setDescription("The device type identifier used for a non-volatile memory\nstorage device.")
hrFSTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9))
hrFSOther = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 1))
if mibBuilder.loadTexts: hrFSOther.setDescription("The file system type identifier used when no other\ndefined type is appropriate.")
hrFSUnknown = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 2))
if mibBuilder.loadTexts: hrFSUnknown.setDescription("The file system type identifier used when the type of\nfile system is unknown.")
hrFSBerkeleyFFS = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 3))
if mibBuilder.loadTexts: hrFSBerkeleyFFS.setDescription("The file system type identifier used for the\nBerkeley Fast File System.")
hrFSSys5FS = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 4))
if mibBuilder.loadTexts: hrFSSys5FS.setDescription("The file system type identifier used for the\nSystem V File System.")
hrFSFat = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 5))
if mibBuilder.loadTexts: hrFSFat.setDescription("The file system type identifier used for\nDOS's FAT file system.")
hrFSHPFS = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 6))
if mibBuilder.loadTexts: hrFSHPFS.setDescription("The file system type identifier used for OS/2's\nHigh Performance File System.")
hrFSHFS = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 7))
if mibBuilder.loadTexts: hrFSHFS.setDescription("The file system type identifier used for the\nMacintosh Hierarchical File System.")
hrFSMFS = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 8))
if mibBuilder.loadTexts: hrFSMFS.setDescription("The file system type identifier used for the\nMacintosh File System.")
hrFSNTFS = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 9))
if mibBuilder.loadTexts: hrFSNTFS.setDescription("The file system type identifier used for the\nWindows NT File System.")
hrFSVNode = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 10))
if mibBuilder.loadTexts: hrFSVNode.setDescription("The file system type identifier used for the\nVNode File System.")
hrFSJournaled = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 11))
if mibBuilder.loadTexts: hrFSJournaled.setDescription("The file system type identifier used for the\nJournaled File System.")
hrFSiso9660 = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 12))
if mibBuilder.loadTexts: hrFSiso9660.setDescription("The file system type identifier used for the\nISO 9660 File System for CD's.")
hrFSRockRidge = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 13))
if mibBuilder.loadTexts: hrFSRockRidge.setDescription("The file system type identifier used for the\nRockRidge File System for CD's.")
hrFSNFS = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 14))
if mibBuilder.loadTexts: hrFSNFS.setDescription("The file system type identifier used for the\nNFS File System.")
hrFSNetware = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 15))
if mibBuilder.loadTexts: hrFSNetware.setDescription("The file system type identifier used for the\nNetware File System.")
hrFSAFS = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 16))
if mibBuilder.loadTexts: hrFSAFS.setDescription("The file system type identifier used for the\nAndrew File System.")
hrFSDFS = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 17))
if mibBuilder.loadTexts: hrFSDFS.setDescription("The file system type identifier used for the\nOSF DCE Distributed File System.")
hrFSAppleshare = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 18))
if mibBuilder.loadTexts: hrFSAppleshare.setDescription("The file system type identifier used for the\nAppleShare File System.")
hrFSRFS = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 19))
if mibBuilder.loadTexts: hrFSRFS.setDescription("The file system type identifier used for the\nRFS File System.")
hrFSDGCFS = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 20))
if mibBuilder.loadTexts: hrFSDGCFS.setDescription("The file system type identifier used for the\nData General DGCFS.")
hrFSBFS = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 21))
if mibBuilder.loadTexts: hrFSBFS.setDescription("The file system type identifier used for the\nSVR4 Boot File System.")
hrFSFAT32 = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 22))
if mibBuilder.loadTexts: hrFSFAT32.setDescription("The file system type identifier used for the\nWindows FAT32 File System.")
hrFSLinuxExt2 = ObjectIdentity((1, 3, 6, 1, 2, 1, 25, 3, 9, 23))
if mibBuilder.loadTexts: hrFSLinuxExt2.setDescription("The file system type identifier used for the\nLinux EXT2 File System.")
hostResourcesTypesModule = ModuleIdentity((1, 3, 6, 1, 2, 1, 25, 7, 4)).setRevisions(("2000-03-06 00:00",))
if mibBuilder.loadTexts: hostResourcesTypesModule.setOrganization("IETF Host Resources MIB Working Group")
if mibBuilder.loadTexts: hostResourcesTypesModule.setContactInfo("Steve Waldbusser\nPostal: Lucent Technologies, Inc.\n        1213 Innsbruck Dr.\n        Sunnyvale, CA 94089\n        USA\nPhone: 650-318-1251\nFax:   650-318-1633\nEmail: waldbusser@ins.com\n\nIn addition, the Host Resources MIB mailing list is dedicated\nto discussion of this MIB. To join the mailing list, send a\nrequest message to hostmib-request@andrew.cmu.edu. The mailing\nlist address is hostmib@andrew.cmu.edu.")
if mibBuilder.loadTexts: hostResourcesTypesModule.setDescription("This MIB module registers type definitions for\nstorage types, device types, and file system types.\nAfter the initial revision, this module will be\nmaintained by IANA.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("HOST-RESOURCES-TYPES", PYSNMP_MODULE_ID=hostResourcesTypesModule)

# Objects
mibBuilder.exportSymbols("HOST-RESOURCES-TYPES", hrStorageTypes=hrStorageTypes, hrStorageOther=hrStorageOther, hrStorageRam=hrStorageRam, hrStorageVirtualMemory=hrStorageVirtualMemory, hrStorageFixedDisk=hrStorageFixedDisk, hrStorageRemovableDisk=hrStorageRemovableDisk, hrStorageFloppyDisk=hrStorageFloppyDisk, hrStorageCompactDisc=hrStorageCompactDisc, hrStorageRamDisk=hrStorageRamDisk, hrStorageFlashMemory=hrStorageFlashMemory, hrStorageNetworkDisk=hrStorageNetworkDisk, hrDeviceTypes=hrDeviceTypes, hrDeviceOther=hrDeviceOther, hrDeviceUnknown=hrDeviceUnknown, hrDeviceProcessor=hrDeviceProcessor, hrDeviceNetwork=hrDeviceNetwork, hrDevicePrinter=hrDevicePrinter, hrDeviceDiskStorage=hrDeviceDiskStorage, hrDeviceVideo=hrDeviceVideo, hrDeviceAudio=hrDeviceAudio, hrDeviceCoprocessor=hrDeviceCoprocessor, hrDeviceKeyboard=hrDeviceKeyboard, hrDeviceModem=hrDeviceModem, hrDeviceParallelPort=hrDeviceParallelPort, hrDevicePointing=hrDevicePointing, hrDeviceSerialPort=hrDeviceSerialPort, hrDeviceTape=hrDeviceTape, hrDeviceClock=hrDeviceClock, hrDeviceVolatileMemory=hrDeviceVolatileMemory, hrDeviceNonVolatileMemory=hrDeviceNonVolatileMemory, hrFSTypes=hrFSTypes, hrFSOther=hrFSOther, hrFSUnknown=hrFSUnknown, hrFSBerkeleyFFS=hrFSBerkeleyFFS, hrFSSys5FS=hrFSSys5FS, hrFSFat=hrFSFat, hrFSHPFS=hrFSHPFS, hrFSHFS=hrFSHFS, hrFSMFS=hrFSMFS, hrFSNTFS=hrFSNTFS, hrFSVNode=hrFSVNode, hrFSJournaled=hrFSJournaled, hrFSiso9660=hrFSiso9660, hrFSRockRidge=hrFSRockRidge, hrFSNFS=hrFSNFS, hrFSNetware=hrFSNetware, hrFSAFS=hrFSAFS, hrFSDFS=hrFSDFS, hrFSAppleshare=hrFSAppleshare, hrFSRFS=hrFSRFS, hrFSDGCFS=hrFSDGCFS, hrFSBFS=hrFSBFS, hrFSFAT32=hrFSFAT32, hrFSLinuxExt2=hrFSLinuxExt2, hostResourcesTypesModule=hostResourcesTypesModule)

