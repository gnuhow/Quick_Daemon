# PySNMP SMI module. Autogenerated from smidump -f python DISMAN-EVENT-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:38:48 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( SnmpTagValue, ) = mibBuilder.importSymbols("SNMP-TARGET-MIB", "SnmpTagValue")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( sysUpTime, ) = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
( Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, zeroDotZero, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2", "zeroDotZero")
( RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue")

# Types

class FailureReason(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(18,8,13,7,6,15,11,0,17,3,5,-1,9,4,14,10,-6,-2,-4,2,-3,12,16,1,-5,)
    namedValues = NamedValues(("localResourceLack", -1), ("badDestination", -2), ("destinationUnreachable", -3), ("noResponse", -4), ("badType", -5), ("sampleOverrun", -6), ("noError", 0), ("tooBig", 1), ("wrongValue", 10), ("noCreation", 11), ("inconsistentValue", 12), ("resourceUnavailable", 13), ("commitFailed", 14), ("undoFailed", 15), ("authorizationError", 16), ("notWritable", 17), ("inconsistentName", 18), ("noSuchName", 2), ("badValue", 3), ("readOnly", 4), ("genErr", 5), ("noAccess", 6), ("wrongType", 7), ("wrongLength", 8), ("wrongEncoding", 9), )
    

# Objects

sysUpTimeInstance = MibIdentifier((1, 3, 6, 1, 2, 1, 1, 3, 0))
dismanEventMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 88)).setRevisions(("2000-10-16 00:00",))
if mibBuilder.loadTexts: dismanEventMIB.setOrganization("IETF Distributed Management Working Group")
if mibBuilder.loadTexts: dismanEventMIB.setContactInfo("Ramanathan Kavasseri\nCisco Systems, Inc.\n170 West Tasman Drive,\nSan Jose CA 95134-1706.\nPhone: +1 408 526 4527\nEmail: ramk@cisco.com")
if mibBuilder.loadTexts: dismanEventMIB.setDescription("The MIB module for defining event triggers and actions\nfor network management purposes.")
dismanEventMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 88, 1))
mteResource = MibIdentifier((1, 3, 6, 1, 2, 1, 88, 1, 1))
mteResourceSampleMinimum = MibScalar((1, 3, 6, 1, 2, 1, 88, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite").setUnits("seconds")
if mibBuilder.loadTexts: mteResourceSampleMinimum.setDescription("The minimum mteTriggerFrequency this system will\naccept.  A system may use the larger values of this minimum to\nlessen the impact of constant sampling.  For larger\nsampling intervals the system samples less often and\nsuffers less overhead.  This object provides a way to enforce\nsuch lower overhead for all triggers created after it is\nset.\n\nUnless explicitly resource limited, a system's value for\nthis object SHOULD be 1, allowing as small as a 1 second\ninterval for ongoing trigger sampling.\n\nChanging this value will not invalidate an existing setting\nof mteTriggerFrequency.")
mteResourceSampleInstanceMaximum = MibScalar((1, 3, 6, 1, 2, 1, 88, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite").setUnits("instances")
if mibBuilder.loadTexts: mteResourceSampleInstanceMaximum.setDescription("The maximum number of instance entries this system will\nsupport for sampling.\n\nThese are the entries that maintain state, one for each\ninstance of each sampled object as selected by\nmteTriggerValueID.  Note that wildcarded objects result\nin multiple instances of this state.\n\nA value of 0 indicates no preset limit, that is, the limit\nis dynamic based on system operation and resources.\n\nUnless explicitly resource limited, a system's value for\nthis object SHOULD be 0.\n\nChanging this value will not eliminate or inhibit existing\nsample state but could prevent allocation of additional state\ninformation.")
mteResourceSampleInstances = MibScalar((1, 3, 6, 1, 2, 1, 88, 1, 1, 3), Gauge32()).setMaxAccess("readonly").setUnits("instances")
if mibBuilder.loadTexts: mteResourceSampleInstances.setDescription("The number of currently active instance entries as\ndefined for mteResourceSampleInstanceMaximum.")
mteResourceSampleInstancesHigh = MibScalar((1, 3, 6, 1, 2, 1, 88, 1, 1, 4), Gauge32()).setMaxAccess("readonly").setUnits("instances")
if mibBuilder.loadTexts: mteResourceSampleInstancesHigh.setDescription("The highest value of mteResourceSampleInstances that has\noccurred since initialization of the management system.")
mteResourceSampleInstanceLacks = MibScalar((1, 3, 6, 1, 2, 1, 88, 1, 1, 5), Counter32()).setMaxAccess("readonly").setUnits("instances")
if mibBuilder.loadTexts: mteResourceSampleInstanceLacks.setDescription("The number of times this system could not take a new sample\nbecause that allocation would have exceeded the limit set by\nmteResourceSampleInstanceMaximum.")
mteTrigger = MibIdentifier((1, 3, 6, 1, 2, 1, 88, 1, 2))
mteTriggerFailures = MibScalar((1, 3, 6, 1, 2, 1, 88, 1, 2, 1), Counter32()).setMaxAccess("readonly").setUnits("failures")
if mibBuilder.loadTexts: mteTriggerFailures.setDescription("The number of times an attempt to check for a trigger\ncondition has failed.  This counts individually for each\nattempt in a group of targets or each attempt for a\n\n\nwildcarded object.")
mteTriggerTable = MibTable((1, 3, 6, 1, 2, 1, 88, 1, 2, 2))
if mibBuilder.loadTexts: mteTriggerTable.setDescription("A table of management event trigger information.")
mteTriggerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1)).setIndexNames((0, "DISMAN-EVENT-MIB", "mteOwner"), (1, "DISMAN-EVENT-MIB", "mteTriggerName"))
if mibBuilder.loadTexts: mteTriggerEntry.setDescription("Information about a single trigger.  Applications create and\ndelete entries using mteTriggerEntryStatus.")
mteOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: mteOwner.setDescription("The owner of this entry. The exact semantics of this\nstring are subject to the security policy defined by the\nsecurity administrator.")
mteTriggerName = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: mteTriggerName.setDescription("A locally-unique, administratively assigned name for the\ntrigger within the scope of mteOwner.")
mteTriggerComment = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 3), SnmpAdminString().clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerComment.setDescription("A description of the trigger's function and use.")
mteTriggerTest = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 4), Bits().subtype(namedValues=NamedValues(("existence", 0), ("boolean", 1), ("threshold", 2), )).clone(("boolean",))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerTest.setDescription("The type of trigger test to perform.  For 'boolean' and\n'threshold'  tests, the object at mteTriggerValueID MUST\nevaluate to an integer, that is, anything that ends up encoded\nfor transmission (that is, in BER, not ASN.1) as an integer.\n\nFor 'existence', the specific test is as selected by\nmteTriggerExistenceTest.  When an object appears, vanishes\nor changes value, the trigger fires. If the object's\nappearance caused the trigger firing, the object MUST\nvanish before the trigger can be fired again for it, and\nvice versa. If the trigger fired due to a change in the\nobject's value, it will be fired again on every successive\nvalue change for that object.\n\nFor 'boolean', the specific test is as selected by\nmteTriggerBooleanTest.  If the test result is true the trigger\nfires.  The trigger will not fire again until the value has\nbecome false and come back to true.\n\nFor 'threshold' the test works as described below for\n\n\nmteTriggerThresholdStartup, mteTriggerThresholdRising, and\nmteTriggerThresholdFalling.\n\nNote that combining 'boolean' and 'threshold' tests on the\nsame object may be somewhat redundant.")
mteTriggerSampleType = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerSampleType.setDescription("The type of sampling to perform.\n\nAn 'absoluteValue' sample requires only a single sample to be\nmeaningful, and is exactly the value of the object at\nmteTriggerValueID at the sample time.\n\nA 'deltaValue' requires two samples to be meaningful and is\nthus not available for testing until the second and subsequent\nsamples after the object at mteTriggerValueID is first found\nto exist.  It is the difference between the two samples.  For\nunsigned values it is always positive, based on unsigned\narithmetic.  For signed values it can be positive or negative.\n\nFor SNMP counters to be meaningful they should be sampled as a\n'deltaValue'.\n\nFor 'deltaValue' mteTriggerDeltaTable contains further\nparameters.\n\nIf only 'existence' is set in mteTriggerTest this object has\nno meaning.")
mteTriggerValueID = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 6), ObjectIdentifier().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerValueID.setDescription("The object identifier of the MIB object to sample to see\nif the trigger should fire.\n\nThis may be wildcarded by truncating all or part of the\ninstance portion, in which case the value is obtained\nas if with a GetNext function, checking multiple values\n\n\nif they exist.  If such wildcarding is applied,\nmteTriggerValueIDWildcard must be 'true' and if not it must\nbe 'false'.\n\nBad object identifiers or a mismatch between truncating the\nidentifier and the value of mteTriggerValueIDWildcard result\nin operation as one would expect when providing the wrong\nidentifier to a Get or GetNext operation.  The Get will fail\nor get the wrong object.  The GetNext will indeed get whatever\nis next, proceeding until it runs past the initial part of the\nidentifier and perhaps many unintended objects for confusing\nresults.  If the value syntax of those objects is not usable,\nthat results in a 'badType' error that terminates the scan.\n\nEach instance that fills the wildcard is independent of any\nadditional instances, that is, wildcarded objects operate\nas if there were a separate table entry for each instance\nthat fills the wildcard without having to actually predict\nall possible instances ahead of time.")
mteTriggerValueIDWildcard = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerValueIDWildcard.setDescription("Control for whether mteTriggerValueID is to be treated as\nfully-specified or wildcarded, with 'true' indicating wildcard.")
mteTriggerTargetTag = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 8), SnmpTagValue().clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerTargetTag.setDescription("The tag for the target(s) from which to obtain the condition\nfor a trigger check.\n\nA length of 0 indicates the local system.  In this case,\naccess to the objects indicated by mteTriggerValueID is under\nthe security credentials of the requester that set\nmteTriggerEntryStatus to 'active'.  Those credentials are the\ninput parameters for isAccessAllowed from the Architecture for\nDescribing SNMP Management Frameworks.\n\nOtherwise access rights are checked according to the security\n\n\nparameters resulting from the tag.")
mteTriggerContextName = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 9), SnmpAdminString().clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerContextName.setDescription("The management context from which to obtain mteTriggerValueID.\n\nThis may be wildcarded by leaving characters off the end.  For\nexample use 'Repeater' to wildcard to 'Repeater1',\n'Repeater2', 'Repeater-999.87b', and so on.  To indicate such\nwildcarding is intended, mteTriggerContextNameWildcard must\nbe 'true'.\n\nEach instance that fills the wildcard is independent of any\nadditional instances, that is, wildcarded objects operate\nas if there were a separate table entry for each instance\nthat fills the wildcard without having to actually predict\nall possible instances ahead of time.\n\nOperation of this feature assumes that the local system has a\nlist of available contexts against which to apply the\nwildcard.  If the objects are being read from the local\nsystem, this is clearly the system's own list of contexts.\nFor a remote system a local version of such a list is not\ndefined by any current standard and may not be available, so\nthis function MAY not be supported.")
mteTriggerContextNameWildcard = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerContextNameWildcard.setDescription("Control for whether mteTriggerContextName is to be treated as\nfully-specified or wildcarded, with 'true' indicating wildcard.")
mteTriggerFrequency = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 11), Unsigned32().clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerFrequency.setDescription("The number of seconds to wait between trigger samples.  To\nencourage consistency in sampling, the interval is measured\nfrom the beginning of one check to the beginning of the next\nand the timer is restarted immediately when it expires, not\nwhen the check completes.\n\nIf the next sample begins before the previous one completed the\nsystem may either attempt to make the check or treat this as an\nerror condition with the error 'sampleOverrun'.\n\nA frequency of 0 indicates instantaneous recognition of the\ncondition.  This is not possible in many cases, but may\nbe supported in cases where it makes sense and the system is\nable to do so.  This feature allows the MIB to be used in\nimplementations where such interrupt-driven behavior is\npossible and is not likely to be supported for all MIB objects\neven then since such sampling generally has to be tightly\nintegrated into low-level code.\n\nSystems that can support this SHOULD document those cases\nwhere it can be used.  In cases where it can not, setting this\nobject to 0 should be disallowed.")
mteTriggerObjectsOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerObjectsOwner.setDescription("To go with mteTriggerObjects, the mteOwner of a group of\nobjects from mteObjectsTable.")
mteTriggerObjects = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerObjects.setDescription("The mteObjectsName of a group of objects from\nmteObjectsTable.  These objects are to be added to any\nNotification resulting from the firing of this trigger.\n\nA list of objects may also be added based on the event or on\nthe value of mteTriggerTest.\n\n\n\nA length of 0 indicates no additional objects.")
mteTriggerEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerEnabled.setDescription("A control to allow a trigger to be configured but not used.\nWhen the value is 'false' the trigger is not sampled.")
mteTriggerEntryStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteTriggerEntryStatus.setDescription("The control that allows creation and deletion of entries.\nOnce made active an entry may not be modified except to\ndelete it.")
mteTriggerDeltaTable = MibTable((1, 3, 6, 1, 2, 1, 88, 1, 2, 3))
if mibBuilder.loadTexts: mteTriggerDeltaTable.setDescription("A table of management event trigger information for delta\nsampling.")
mteTriggerDeltaEntry = MibTableRow((1, 3, 6, 1, 2, 1, 88, 1, 2, 3, 1)).setIndexNames((0, "DISMAN-EVENT-MIB", "mteOwner"), (1, "DISMAN-EVENT-MIB", "mteTriggerName"))
if mibBuilder.loadTexts: mteTriggerDeltaEntry.setDescription("Information about a single trigger's delta sampling.  Entries\nautomatically exist in this this table for each mteTriggerEntry\nthat has mteTriggerSampleType set to 'deltaValue'.")
mteTriggerDeltaDiscontinuityID = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 3, 1, 1), ObjectIdentifier().clone((1, 3, 6, 1, 2, 1, 1, 3, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerDeltaDiscontinuityID.setDescription("The OBJECT IDENTIFIER (OID) of a TimeTicks, TimeStamp, or\nDateAndTime object that indicates a discontinuity in the value\nat mteTriggerValueID.\n\nThe OID may be for a leaf object (e.g. sysUpTime.0) or may\nbe wildcarded to match mteTriggerValueID.\n\nThis object supports normal checking for a discontinuity in a\ncounter.  Note that if this object does not point to sysUpTime\ndiscontinuity checking MUST still check sysUpTime for an overall\ndiscontinuity.\n\nIf the object identified is not accessible the sample attempt\nis in error, with the error code as from an SNMP request.\n\nBad object identifiers or a mismatch between truncating the\nidentifier and the value of mteDeltaDiscontinuityIDWildcard\nresult in operation as one would expect when providing the\nwrong identifier to a Get operation.  The Get will fail or get\nthe wrong object.  If the value syntax of those objects is not\nusable, that results in an error that terminates the sample\nwith a 'badType' error code.")
mteTriggerDeltaDiscontinuityIDWildcard = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerDeltaDiscontinuityIDWildcard.setDescription("Control for whether mteTriggerDeltaDiscontinuityID is to be\ntreated as fully-specified or wildcarded, with 'true'\nindicating wildcard. Note that the value of this object will\nbe the same as that of the corresponding instance of\nmteTriggerValueIDWildcard when the corresponding\n\n\nmteTriggerSampleType is 'deltaValue'.")
mteTriggerDeltaDiscontinuityIDType = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("timeTicks", 1), ("timeStamp", 2), ("dateAndTime", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerDeltaDiscontinuityIDType.setDescription("The value 'timeTicks' indicates the\nmteTriggerDeltaDiscontinuityID of this row is of syntax\nTimeTicks.  The value 'timeStamp' indicates syntax TimeStamp.\nThe value 'dateAndTime' indicates syntax DateAndTime.")
mteTriggerExistenceTable = MibTable((1, 3, 6, 1, 2, 1, 88, 1, 2, 4))
if mibBuilder.loadTexts: mteTriggerExistenceTable.setDescription("A table of management event trigger information for existence\ntriggers.")
mteTriggerExistenceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 88, 1, 2, 4, 1)).setIndexNames((0, "DISMAN-EVENT-MIB", "mteOwner"), (1, "DISMAN-EVENT-MIB", "mteTriggerName"))
if mibBuilder.loadTexts: mteTriggerExistenceEntry.setDescription("Information about a single existence trigger.  Entries\nautomatically exist in this this table for each mteTriggerEntry\nthat has 'existence' set in mteTriggerTest.")
mteTriggerExistenceTest = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 4, 1, 1), Bits().subtype(namedValues=NamedValues(("present", 0), ("absent", 1), ("changed", 2), )).clone(("present","absent",))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerExistenceTest.setDescription("The type of existence test to perform.  The trigger fires\nwhen the object at mteTriggerValueID is seen to go from\npresent to absent, from absent to present, or to have it's\nvalue changed, depending on which tests are selected:\n\npresent(0) - when this test is selected, the trigger fires\nwhen the mteTriggerValueID object goes from absent to present.\n\nabsent(1)  - when this test is selected, the trigger fires\nwhen the mteTriggerValueID object goes from present to absent.\nchanged(2) - when this test is selected, the trigger fires\nthe mteTriggerValueID object value changes.\n\nOnce the trigger has fired for either presence or absence it\nwill not fire again for that state until the object has been\nto the other state. ")
mteTriggerExistenceStartup = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 4, 1, 2), Bits().subtype(namedValues=NamedValues(("present", 0), ("absent", 1), )).clone(("present","absent",))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerExistenceStartup.setDescription("Control for whether an event may be triggered when this entry\nis first set to 'active' and the test specified by\nmteTriggerExistenceTest is true.  Setting an option causes\nthat trigger to fire when its test is true.")
mteTriggerExistenceObjectsOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerExistenceObjectsOwner.setDescription("To go with mteTriggerExistenceObjects, the mteOwner of a\ngroup of objects from mteObjectsTable.")
mteTriggerExistenceObjects = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerExistenceObjects.setDescription("The mteObjectsName of a group of objects from\nmteObjectsTable.  These objects are to be added to any\nNotification resulting from the firing of this trigger for\nthis test.\n\nA list of objects may also be added based on the overall\ntrigger, the event or other settings in mteTriggerTest.\n\nA length of 0 indicates no additional objects.")
mteTriggerExistenceEventOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 4, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerExistenceEventOwner.setDescription("To go with mteTriggerExistenceEvent, the mteOwner of an event\nentry from the mteEventTable.")
mteTriggerExistenceEvent = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerExistenceEvent.setDescription("The mteEventName of the event to invoke when mteTriggerType is\n'existence' and this trigger fires.  A length of 0 indicates no\nevent.")
mteTriggerBooleanTable = MibTable((1, 3, 6, 1, 2, 1, 88, 1, 2, 5))
if mibBuilder.loadTexts: mteTriggerBooleanTable.setDescription("A table of management event trigger information for boolean\ntriggers.")
mteTriggerBooleanEntry = MibTableRow((1, 3, 6, 1, 2, 1, 88, 1, 2, 5, 1)).setIndexNames((0, "DISMAN-EVENT-MIB", "mteOwner"), (1, "DISMAN-EVENT-MIB", "mteTriggerName"))
if mibBuilder.loadTexts: mteTriggerBooleanEntry.setDescription("Information about a single boolean trigger.  Entries\nautomatically exist in this this table for each mteTriggerEntry\nthat has 'boolean' set in mteTriggerTest.")
mteTriggerBooleanComparison = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 5, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,5,3,2,6,)).subtype(namedValues=NamedValues(("unequal", 1), ("equal", 2), ("less", 3), ("lessOrEqual", 4), ("greater", 5), ("greaterOrEqual", 6), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerBooleanComparison.setDescription("The type of boolean comparison to perform.\n\nThe value at mteTriggerValueID is compared to\nmteTriggerBooleanValue, so for example if\nmteTriggerBooleanComparison is 'less' the result would be true\nif the value at mteTriggerValueID is less than the value of\nmteTriggerBooleanValue.")
mteTriggerBooleanValue = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 5, 1, 2), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerBooleanValue.setDescription("The value to use for the test specified by\nmteTriggerBooleanTest.")
mteTriggerBooleanStartup = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 5, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerBooleanStartup.setDescription("Control for whether an event may be triggered when this entry\nis first set to 'active' or a new instance of the object at\nmteTriggerValueID is found and the test specified by\nmteTriggerBooleanComparison is true.  In that case an event is\ntriggered if mteTriggerBooleanStartup is 'true'.")
mteTriggerBooleanObjectsOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 5, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerBooleanObjectsOwner.setDescription("To go with mteTriggerBooleanObjects, the mteOwner of a group\nof objects from mteObjectsTable.")
mteTriggerBooleanObjects = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 5, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerBooleanObjects.setDescription("The mteObjectsName of a group of objects from\nmteObjectsTable.  These objects are to be added to any\nNotification resulting from the firing of this trigger for\nthis test.\n\nA list of objects may also be added based on the overall\ntrigger, the event or other settings in mteTriggerTest.\n\nA length of 0 indicates no additional objects.")
mteTriggerBooleanEventOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 5, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerBooleanEventOwner.setDescription("To go with mteTriggerBooleanEvent, the mteOwner of an event\nentry from mteEventTable.")
mteTriggerBooleanEvent = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 5, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerBooleanEvent.setDescription("The mteEventName of the event to invoke when mteTriggerType is\n'boolean' and this trigger fires.  A length of 0 indicates no\nevent.")
mteTriggerThresholdTable = MibTable((1, 3, 6, 1, 2, 1, 88, 1, 2, 6))
if mibBuilder.loadTexts: mteTriggerThresholdTable.setDescription("A table of management event trigger information for threshold\ntriggers.")
mteTriggerThresholdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1)).setIndexNames((0, "DISMAN-EVENT-MIB", "mteOwner"), (1, "DISMAN-EVENT-MIB", "mteTriggerName"))
if mibBuilder.loadTexts: mteTriggerThresholdEntry.setDescription("Information about a single threshold trigger.  Entries\nautomatically exist in this table for each mteTriggerEntry\nthat has 'threshold' set in mteTriggerTest.")
mteTriggerThresholdStartup = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("rising", 1), ("falling", 2), ("risingOrFalling", 3), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdStartup.setDescription("The event that may be triggered when this entry is first\nset to 'active' and a new instance of the object at\nmteTriggerValueID is found.  If the first sample after this\ninstance becomes active is greater than or equal to\nmteTriggerThresholdRising and mteTriggerThresholdStartup is\nequal to 'rising' or 'risingOrFalling', then one\nmteTriggerThresholdRisingEvent is triggered for that instance.\nIf the first sample after this entry becomes active is less\nthan or equal to mteTriggerThresholdFalling and\nmteTriggerThresholdStartup is equal to 'falling' or\n'risingOrFalling', then one mteTriggerThresholdRisingEvent is\ntriggered for that instance.")
mteTriggerThresholdRising = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 2), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdRising.setDescription("A threshold value to check against if mteTriggerType is\n'threshold'.\n\nWhen the current sampled value is greater than or equal to\nthis threshold, and the value at the last sampling interval\nwas less than this threshold, one\nmteTriggerThresholdRisingEvent is triggered.  That event is\nalso triggered if the first sample after this entry becomes\nactive is greater than or equal to this threshold and\nmteTriggerThresholdStartup is equal to 'rising' or\n'risingOrFalling'.\n\nAfter a rising event is generated, another such event is not\ntriggered until the sampled value falls below this threshold\nand reaches mteTriggerThresholdFalling.")
mteTriggerThresholdFalling = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 3), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdFalling.setDescription("A threshold value to check against if mteTriggerType is\n'threshold'.\n\nWhen the current sampled value is less than or equal to this\nthreshold, and the value at the last sampling interval was\ngreater than this threshold, one\nmteTriggerThresholdFallingEvent is triggered.  That event is\nalso triggered if the first sample after this entry becomes\nactive is less than or equal to this threshold and\nmteTriggerThresholdStartup is equal to 'falling' or\n'risingOrFalling'.\n\nAfter a falling event is generated, another such event is not\ntriggered until the sampled value rises above this threshold\nand reaches mteTriggerThresholdRising.")
mteTriggerThresholdDeltaRising = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 4), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdDeltaRising.setDescription("A threshold value to check against if mteTriggerType is\n'threshold'.\n\nWhen the delta value (difference) between the current sampled\nvalue (value(n)) and the previous sampled value (value(n-1))\nis greater than or equal to this threshold,\nand the delta value calculated at the last sampling interval\n(i.e. value(n-1) - value(n-2)) was less than this threshold,\none mteTriggerThresholdDeltaRisingEvent is triggered. That event\nis also triggered if the first delta value calculated after this\nentry becomes active, i.e. value(2) - value(1), where value(1)\nis the first sample taken of that instance, is greater than or\nequal to this threshold.\n\nAfter a rising event is generated, another such event is not\ntriggered until the delta value falls below this threshold and\nreaches mteTriggerThresholdDeltaFalling.")
mteTriggerThresholdDeltaFalling = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 5), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdDeltaFalling.setDescription("A threshold value to check against if mteTriggerType is\n'threshold'.\n\nWhen the delta value (difference) between the current sampled\nvalue (value(n)) and the previous sampled value (value(n-1))\nis less than or equal to this threshold,\nand the delta value calculated at the last sampling interval\n(i.e. value(n-1) - value(n-2)) was greater than this threshold,\none mteTriggerThresholdDeltaFallingEvent is triggered. That event\nis also triggered if the first delta value calculated after this\nentry becomes active, i.e. value(2) - value(1), where value(1)\nis the first sample taken of that instance, is less than or\nequal to this threshold.\n\nAfter a falling event is generated, another such event is not\ntriggered until the delta value falls below this threshold and\nreaches mteTriggerThresholdDeltaRising.")
mteTriggerThresholdObjectsOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdObjectsOwner.setDescription("To go with mteTriggerThresholdObjects, the mteOwner of a group\nof objects from mteObjectsTable.")
mteTriggerThresholdObjects = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdObjects.setDescription("The mteObjectsName of a group of objects from\nmteObjectsTable.  These objects are to be added to any\nNotification resulting from the firing of this trigger for\nthis test.\n\nA list of objects may also be added based on the overall\n\n\ntrigger, the event or other settings in mteTriggerTest.\n\nA length of 0 indicates no additional objects.")
mteTriggerThresholdRisingEventOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdRisingEventOwner.setDescription("To go with mteTriggerThresholdRisingEvent, the mteOwner of an\nevent entry from mteEventTable.")
mteTriggerThresholdRisingEvent = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdRisingEvent.setDescription("The mteEventName of the event to invoke when mteTriggerType is\n'threshold' and this trigger fires based on\nmteTriggerThresholdRising.  A length of 0 indicates no event.")
mteTriggerThresholdFallingEventOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdFallingEventOwner.setDescription("To go with mteTriggerThresholdFallingEvent, the mteOwner of an\nevent entry from mteEventTable.")
mteTriggerThresholdFallingEvent = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdFallingEvent.setDescription("The mteEventName of the event to invoke when mteTriggerType is\n'threshold' and this trigger fires based on\nmteTriggerThresholdFalling.  A length of 0 indicates no event.")
mteTriggerThresholdDeltaRisingEventOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdDeltaRisingEventOwner.setDescription("To go with mteTriggerThresholdDeltaRisingEvent, the mteOwner\nof an event entry from mteEventTable.")
mteTriggerThresholdDeltaRisingEvent = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdDeltaRisingEvent.setDescription("The mteEventName of the event to invoke when mteTriggerType is\n'threshold' and this trigger fires based on\nmteTriggerThresholdDeltaRising. A length of 0 indicates\nno event.")
mteTriggerThresholdDeltaFallingEventOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdDeltaFallingEventOwner.setDescription("To go with mteTriggerThresholdDeltaFallingEvent, the mteOwner\nof an event entry from mteEventTable.")
mteTriggerThresholdDeltaFallingEvent = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 2, 6, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteTriggerThresholdDeltaFallingEvent.setDescription("The mteEventName of the event to invoke when mteTriggerType is\n'threshold' and this trigger fires based on\nmteTriggerThresholdDeltaFalling.  A length of 0 indicates\nno event.")
mteObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 88, 1, 3))
mteObjectsTable = MibTable((1, 3, 6, 1, 2, 1, 88, 1, 3, 1))
if mibBuilder.loadTexts: mteObjectsTable.setDescription("A table of objects that can be added to notifications based\non the trigger, trigger test, or event, as pointed to by\nentries in those tables.")
mteObjectsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 88, 1, 3, 1, 1)).setIndexNames((0, "DISMAN-EVENT-MIB", "mteOwner"), (0, "DISMAN-EVENT-MIB", "mteObjectsName"), (0, "DISMAN-EVENT-MIB", "mteObjectsIndex"))
if mibBuilder.loadTexts: mteObjectsEntry.setDescription("A group of objects.  Applications create and delete entries\nusing mteObjectsEntryStatus.\n\nWhen adding objects to a notification they are added in the\nlexical order of their index in this table.  Those associated\nwith a trigger come first, then trigger test, then event.")
mteObjectsName = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: mteObjectsName.setDescription("A locally-unique, administratively assigned name for a group\nof objects.")
mteObjectsIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: mteObjectsIndex.setDescription("An arbitrary integer for the purpose of identifying\nindividual objects within a mteObjectsName group.\n\n\nObjects within a group are placed in the notification in the\nnumerical order of this index.\n\nGroups are placed in the notification in the order of the\nselections for overall trigger, trigger test, and event.\nWithin trigger test they are in the same order as the\nnumerical values of the bits defined for mteTriggerTest.\n\nBad object identifiers or a mismatch between truncating the\nidentifier and the value of mteDeltaDiscontinuityIDWildcard\nresult in operation as one would expect when providing the\nwrong identifier to a Get operation.  The Get will fail or get\nthe wrong object.  If the object is not available it is omitted\nfrom the notification.")
mteObjectsID = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 3, 1, 1, 3), ObjectIdentifier().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteObjectsID.setDescription("The object identifier of a MIB object to add to a\nNotification that results from the firing of a trigger.\n\nThis may be wildcarded by truncating all or part of the\ninstance portion, in which case the instance portion of the\nOID for obtaining this object will be the same as that used\nin obtaining the mteTriggerValueID that fired.  If such\nwildcarding is applied, mteObjectsIDWildcard must be\n'true' and if not it must be 'false'.\n\nEach instance that fills the wildcard is independent of any\nadditional instances, that is, wildcarded objects operate\nas if there were a separate table entry for each instance\nthat fills the wildcard without having to actually predict\nall possible instances ahead of time.")
mteObjectsIDWildcard = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 3, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteObjectsIDWildcard.setDescription("Control for whether mteObjectsID is to be treated as\nfully-specified or wildcarded, with 'true' indicating wildcard.")
mteObjectsEntryStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteObjectsEntryStatus.setDescription("The control that allows creation and deletion of entries.\nOnce made active an entry MAY not be modified except to\ndelete it.")
mteEvent = MibIdentifier((1, 3, 6, 1, 2, 1, 88, 1, 4))
mteEventFailures = MibScalar((1, 3, 6, 1, 2, 1, 88, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mteEventFailures.setDescription("The number of times an attempt to invoke an event\nhas failed.  This counts individually for each\nattempt in a group of targets or each attempt for a\nwildcarded trigger object.")
mteEventTable = MibTable((1, 3, 6, 1, 2, 1, 88, 1, 4, 2))
if mibBuilder.loadTexts: mteEventTable.setDescription("A table of management event action information.")
mteEventEntry = MibTableRow((1, 3, 6, 1, 2, 1, 88, 1, 4, 2, 1)).setIndexNames((0, "DISMAN-EVENT-MIB", "mteOwner"), (1, "DISMAN-EVENT-MIB", "mteEventName"))
if mibBuilder.loadTexts: mteEventEntry.setDescription("Information about a single event.  Applications create and\ndelete entries using mteEventEntryStatus.")
mteEventName = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: mteEventName.setDescription("A locally-unique, administratively assigned name for the\nevent.")
mteEventComment = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 2, 1, 2), SnmpAdminString().clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteEventComment.setDescription("A description of the event's function and use.")
mteEventActions = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 2, 1, 3), Bits().subtype(namedValues=NamedValues(("notification", 0), ("set", 1), )).clone(())).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteEventActions.setDescription("The actions to perform when this event occurs.\n\nFor 'notification', Traps and/or Informs are sent according\nto the configuration in the SNMP Notification MIB.\n\nFor 'set', an SNMP Set operation is performed according to\ncontrol values in this entry.")
mteEventEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteEventEnabled.setDescription("A control to allow an event to be configured but not used.\nWhen the value is 'false' the event does not execute even if\n\n\ntriggered.")
mteEventEntryStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mteEventEntryStatus.setDescription("The control that allows creation and deletion of entries.\nOnce made active an entry MAY not be modified except to\ndelete it.")
mteEventNotificationTable = MibTable((1, 3, 6, 1, 2, 1, 88, 1, 4, 3))
if mibBuilder.loadTexts: mteEventNotificationTable.setDescription("A table of information about notifications to be sent as a\nconsequence of management events.")
mteEventNotificationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 88, 1, 4, 3, 1)).setIndexNames((0, "DISMAN-EVENT-MIB", "mteOwner"), (1, "DISMAN-EVENT-MIB", "mteEventName"))
if mibBuilder.loadTexts: mteEventNotificationEntry.setDescription("Information about a single event's notification.  Entries\nautomatically exist in this this table for each mteEventEntry\nthat has 'notification' set in mteEventActions.")
mteEventNotification = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 3, 1, 1), ObjectIdentifier().clone((0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteEventNotification.setDescription("The object identifier from the NOTIFICATION-TYPE for the\nnotification to use if metEventActions has 'notification' set.")
mteEventNotificationObjectsOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteEventNotificationObjectsOwner.setDescription("To go with mteEventNotificationObjects, the mteOwner of a\ngroup of objects from mteObjectsTable.")
mteEventNotificationObjects = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteEventNotificationObjects.setDescription("The mteObjectsName of a group of objects from\nmteObjectsTable if mteEventActions has 'notification' set.\nThese objects are to be added to any Notification generated by\nthis event.\n\nObjects may also be added based on the trigger that stimulated\nthe event.\n\nA length of 0 indicates no additional objects.")
mteEventSetTable = MibTable((1, 3, 6, 1, 2, 1, 88, 1, 4, 4))
if mibBuilder.loadTexts: mteEventSetTable.setDescription("A table of management event action information.")
mteEventSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 88, 1, 4, 4, 1)).setIndexNames((0, "DISMAN-EVENT-MIB", "mteOwner"), (1, "DISMAN-EVENT-MIB", "mteEventName"))
if mibBuilder.loadTexts: mteEventSetEntry.setDescription("Information about a single event's set option.  Entries\nautomatically exist in this this table for each mteEventEntry\nthat has 'set' set in mteEventActions.")
mteEventSetObject = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 4, 1, 1), ObjectIdentifier().clone((0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteEventSetObject.setDescription("The object identifier from the MIB object to set if\nmteEventActions has 'set' set.\n\nThis object identifier may be wildcarded by leaving\nsub-identifiers off the end, in which case\nnteEventSetObjectWildCard must be 'true'.\n\nIf mteEventSetObject is wildcarded the instance used to set the\nobject to which it points is the same as the instance from the\nvalue of mteTriggerValueID that triggered the event.\n\nEach instance that fills the wildcard is independent of any\nadditional instances, that is, wildcarded objects operate\nas if there were a separate table entry for each instance\nthat fills the wildcard without having to actually predict\nall possible instances ahead of time.\n\nBad object identifiers or a mismatch between truncating the\nidentifier and the value of mteSetObjectWildcard\nresult in operation as one would expect when providing the\nwrong identifier to a Set operation.  The Set will fail or set\nthe wrong object.  If the value syntax of the destination\nobject is not correct, the Set fails with the normal SNMP\nerror code.")
mteEventSetObjectWildcard = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteEventSetObjectWildcard.setDescription("Control over whether mteEventSetObject is to be treated as\nfully-specified or wildcarded, with 'true' indicating wildcard\nif mteEventActions has 'set' set.")
mteEventSetValue = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 4, 1, 3), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteEventSetValue.setDescription("The value to which to set the object at mteEventSetObject\nif mteEventActions has 'set' set.")
mteEventSetTargetTag = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 4, 1, 4), SnmpTagValue().clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteEventSetTargetTag.setDescription("The tag for the target(s) at which to set the object at\nmteEventSetObject to mteEventSetValue if mteEventActions\nhas 'set' set.\n\nSystems limited to self management MAY reject a non-zero\nlength for the value of this object.\n\nA length of 0 indicates the local system.  In this case,\naccess to the objects indicated by mteEventSetObject is under\nthe security credentials of the requester that set\nmteTriggerEntryStatus to 'active'.  Those credentials are the\ninput parameters for isAccessAllowed from the Architecture for\nDescribing SNMP Management Frameworks.\n\nOtherwise access rights are checked according to the security\nparameters resulting from the tag.")
mteEventSetContextName = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 4, 1, 5), SnmpAdminString().clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteEventSetContextName.setDescription("The management context in which to set mteEventObjectID.\nif mteEventActions has 'set' set.\n\nThis may be wildcarded by leaving characters off the end.  To\nindicate such wildcarding mteEventSetContextNameWildcard must\nbe 'true'.\n\nIf this context name is wildcarded the value used to complete\nthe wildcarding of mteTriggerContextName will be appended.")
mteEventSetContextNameWildcard = MibTableColumn((1, 3, 6, 1, 2, 1, 88, 1, 4, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mteEventSetContextNameWildcard.setDescription("Control for whether mteEventSetContextName is to be treated as\nfully-specified or wildcarded, with 'true' indicating wildcard\nif mteEventActions has 'set' set.")
dismanEventMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 88, 2))
dismanEventMIBNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 88, 2, 0))
dismanEventMIBNotificationObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 88, 2, 1))
mteHotTrigger = MibScalar((1, 3, 6, 1, 2, 1, 88, 2, 1, 1), SnmpAdminString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: mteHotTrigger.setDescription("The name of the trigger causing the notification.")
mteHotTargetName = MibScalar((1, 3, 6, 1, 2, 1, 88, 2, 1, 2), SnmpAdminString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: mteHotTargetName.setDescription("The SNMP Target MIB's snmpTargetAddrName related to the\nnotification.")
mteHotContextName = MibScalar((1, 3, 6, 1, 2, 1, 88, 2, 1, 3), SnmpAdminString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: mteHotContextName.setDescription("The context name related to the notification.  This MUST be as\nfully-qualified as possible, including filling in wildcard\ninformation determined in processing.")
mteHotOID = MibScalar((1, 3, 6, 1, 2, 1, 88, 2, 1, 4), ObjectIdentifier()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: mteHotOID.setDescription("The object identifier of the destination object related to the\nnotification.  This MUST be as fully-qualified as possible,\nincluding filling in wildcard information determined in\nprocessing.\n\nFor a trigger-related notification this is from\nmteTriggerValueID.\n\nFor a set failure this is from mteEventSetObject.")
mteHotValue = MibScalar((1, 3, 6, 1, 2, 1, 88, 2, 1, 5), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: mteHotValue.setDescription("The value of the object at mteTriggerValueID when a\ntrigger fired.")
mteFailedReason = MibScalar((1, 3, 6, 1, 2, 1, 88, 2, 1, 6), FailureReason()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: mteFailedReason.setDescription("The reason for the failure of an attempt to check for a\ntrigger condition or set an object in response to an event.")
dismanEventMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 88, 3))
dismanEventMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 88, 3, 1))
dismanEventMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 88, 3, 2))

# Augmentions

# Notifications

mteTriggerFired = NotificationType((1, 3, 6, 1, 2, 1, 88, 2, 0, 1)).setObjects(*(("DISMAN-EVENT-MIB", "mteHotTargetName"), ("DISMAN-EVENT-MIB", "mteHotValue"), ("DISMAN-EVENT-MIB", "mteHotContextName"), ("DISMAN-EVENT-MIB", "mteHotTrigger"), ("DISMAN-EVENT-MIB", "mteHotOID"), ) )
if mibBuilder.loadTexts: mteTriggerFired.setDescription("Notification that the trigger indicated by the object\ninstances has fired, for triggers with mteTriggerType\n'boolean' or 'existence'.")
mteTriggerRising = NotificationType((1, 3, 6, 1, 2, 1, 88, 2, 0, 2)).setObjects(*(("DISMAN-EVENT-MIB", "mteHotTargetName"), ("DISMAN-EVENT-MIB", "mteHotValue"), ("DISMAN-EVENT-MIB", "mteHotContextName"), ("DISMAN-EVENT-MIB", "mteHotTrigger"), ("DISMAN-EVENT-MIB", "mteHotOID"), ) )
if mibBuilder.loadTexts: mteTriggerRising.setDescription("Notification that the rising threshold was met for triggers\nwith mteTriggerType 'threshold'.")
mteTriggerFalling = NotificationType((1, 3, 6, 1, 2, 1, 88, 2, 0, 3)).setObjects(*(("DISMAN-EVENT-MIB", "mteHotTargetName"), ("DISMAN-EVENT-MIB", "mteHotValue"), ("DISMAN-EVENT-MIB", "mteHotContextName"), ("DISMAN-EVENT-MIB", "mteHotTrigger"), ("DISMAN-EVENT-MIB", "mteHotOID"), ) )
if mibBuilder.loadTexts: mteTriggerFalling.setDescription("Notification that the falling threshold was met for triggers\nwith mteTriggerType 'threshold'.")
mteTriggerFailure = NotificationType((1, 3, 6, 1, 2, 1, 88, 2, 0, 4)).setObjects(*(("DISMAN-EVENT-MIB", "mteFailedReason"), ("DISMAN-EVENT-MIB", "mteHotTargetName"), ("DISMAN-EVENT-MIB", "mteHotContextName"), ("DISMAN-EVENT-MIB", "mteHotTrigger"), ("DISMAN-EVENT-MIB", "mteHotOID"), ) )
if mibBuilder.loadTexts: mteTriggerFailure.setDescription("Notification that an attempt to check a trigger has failed.\n\nThe network manager must enable this notification only with\na certain fear and trembling, as it can easily crowd out more\nimportant information.  It should be used only to help diagnose\na problem that has appeared in the error counters and can not\nbe found otherwise.")
mteEventSetFailure = NotificationType((1, 3, 6, 1, 2, 1, 88, 2, 0, 5)).setObjects(*(("DISMAN-EVENT-MIB", "mteFailedReason"), ("DISMAN-EVENT-MIB", "mteHotTargetName"), ("DISMAN-EVENT-MIB", "mteHotContextName"), ("DISMAN-EVENT-MIB", "mteHotTrigger"), ("DISMAN-EVENT-MIB", "mteHotOID"), ) )
if mibBuilder.loadTexts: mteEventSetFailure.setDescription("Notification that an attempt to do a set in response to an\nevent has failed.\n\nThe network manager must enable this notification only with\na certain fear and trembling, as it can easily crowd out more\nimportant information.  It should be used only to help diagnose\na problem that has appeared in the error counters and can not\nbe found otherwise.")

# Groups

dismanEventResourceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 88, 3, 2, 1)).setObjects(*(("DISMAN-EVENT-MIB", "mteResourceSampleInstancesHigh"), ("DISMAN-EVENT-MIB", "mteResourceSampleInstanceLacks"), ("DISMAN-EVENT-MIB", "mteResourceSampleMinimum"), ("DISMAN-EVENT-MIB", "mteResourceSampleInstanceMaximum"), ("DISMAN-EVENT-MIB", "mteResourceSampleInstances"), ) )
if mibBuilder.loadTexts: dismanEventResourceGroup.setDescription("Event resource status and control objects.")
dismanEventTriggerGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 88, 3, 2, 2)).setObjects(*(("DISMAN-EVENT-MIB", "mteTriggerValueID"), ("DISMAN-EVENT-MIB", "mteTriggerBooleanObjects"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdObjects"), ("DISMAN-EVENT-MIB", "mteTriggerTargetTag"), ("DISMAN-EVENT-MIB", "mteTriggerDeltaDiscontinuityID"), ("DISMAN-EVENT-MIB", "mteTriggerDeltaDiscontinuityIDType"), ("DISMAN-EVENT-MIB", "mteTriggerContextName"), ("DISMAN-EVENT-MIB", "mteTriggerExistenceObjects"), ("DISMAN-EVENT-MIB", "mteTriggerExistenceEvent"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdRisingEventOwner"), ("DISMAN-EVENT-MIB", "mteTriggerEnabled"), ("DISMAN-EVENT-MIB", "mteTriggerDeltaDiscontinuityIDWildcard"), ("DISMAN-EVENT-MIB", "mteTriggerExistenceTest"), ("DISMAN-EVENT-MIB", "mteTriggerSampleType"), ("DISMAN-EVENT-MIB", "mteTriggerValueIDWildcard"), ("DISMAN-EVENT-MIB", "mteTriggerBooleanEventOwner"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdDeltaFallingEventOwner"), ("DISMAN-EVENT-MIB", "mteTriggerExistenceObjectsOwner"), ("DISMAN-EVENT-MIB", "mteTriggerBooleanEvent"), ("DISMAN-EVENT-MIB", "mteTriggerExistenceStartup"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdObjectsOwner"), ("DISMAN-EVENT-MIB", "mteTriggerBooleanObjectsOwner"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdRising"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdDeltaFalling"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdFallingEventOwner"), ("DISMAN-EVENT-MIB", "mteTriggerContextNameWildcard"), ("DISMAN-EVENT-MIB", "mteTriggerObjectsOwner"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdDeltaRising"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdDeltaFallingEvent"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdRisingEvent"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdFalling"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdFallingEvent"), ("DISMAN-EVENT-MIB", "mteTriggerFailures"), ("DISMAN-EVENT-MIB", "mteTriggerComment"), ("DISMAN-EVENT-MIB", "mteTriggerExistenceEventOwner"), ("DISMAN-EVENT-MIB", "mteTriggerBooleanValue"), ("DISMAN-EVENT-MIB", "mteTriggerObjects"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdStartup"), ("DISMAN-EVENT-MIB", "mteTriggerBooleanStartup"), ("DISMAN-EVENT-MIB", "mteTriggerFrequency"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdDeltaRisingEvent"), ("DISMAN-EVENT-MIB", "mteTriggerTest"), ("DISMAN-EVENT-MIB", "mteTriggerEntryStatus"), ("DISMAN-EVENT-MIB", "mteTriggerBooleanComparison"), ("DISMAN-EVENT-MIB", "mteTriggerThresholdDeltaRisingEventOwner"), ) )
if mibBuilder.loadTexts: dismanEventTriggerGroup.setDescription("Event triggers.")
dismanEventObjectsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 88, 3, 2, 3)).setObjects(*(("DISMAN-EVENT-MIB", "mteObjectsIDWildcard"), ("DISMAN-EVENT-MIB", "mteObjectsID"), ("DISMAN-EVENT-MIB", "mteObjectsEntryStatus"), ) )
if mibBuilder.loadTexts: dismanEventObjectsGroup.setDescription("Supplemental objects.")
dismanEventEventGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 88, 3, 2, 4)).setObjects(*(("DISMAN-EVENT-MIB", "mteEventNotificationObjects"), ("DISMAN-EVENT-MIB", "mteEventSetObject"), ("DISMAN-EVENT-MIB", "mteEventSetContextNameWildcard"), ("DISMAN-EVENT-MIB", "mteEventNotificationObjectsOwner"), ("DISMAN-EVENT-MIB", "mteEventSetContextName"), ("DISMAN-EVENT-MIB", "mteEventSetObjectWildcard"), ("DISMAN-EVENT-MIB", "mteEventEnabled"), ("DISMAN-EVENT-MIB", "mteEventNotification"), ("DISMAN-EVENT-MIB", "mteEventSetTargetTag"), ("DISMAN-EVENT-MIB", "mteEventActions"), ("DISMAN-EVENT-MIB", "mteEventSetValue"), ("DISMAN-EVENT-MIB", "mteEventFailures"), ("DISMAN-EVENT-MIB", "mteEventComment"), ("DISMAN-EVENT-MIB", "mteEventEntryStatus"), ) )
if mibBuilder.loadTexts: dismanEventEventGroup.setDescription("Events.")
dismanEventNotificationObjectGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 88, 3, 2, 5)).setObjects(*(("DISMAN-EVENT-MIB", "mteHotTargetName"), ("DISMAN-EVENT-MIB", "mteHotTrigger"), ("DISMAN-EVENT-MIB", "mteHotContextName"), ("DISMAN-EVENT-MIB", "mteHotValue"), ("DISMAN-EVENT-MIB", "mteHotOID"), ("DISMAN-EVENT-MIB", "mteFailedReason"), ) )
if mibBuilder.loadTexts: dismanEventNotificationObjectGroup.setDescription("Notification objects.")
dismanEventNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 88, 3, 2, 6)).setObjects(*(("DISMAN-EVENT-MIB", "mteEventSetFailure"), ("DISMAN-EVENT-MIB", "mteTriggerRising"), ("DISMAN-EVENT-MIB", "mteTriggerFailure"), ("DISMAN-EVENT-MIB", "mteTriggerFalling"), ("DISMAN-EVENT-MIB", "mteTriggerFired"), ) )
if mibBuilder.loadTexts: dismanEventNotificationGroup.setDescription("Notifications.")

# Compliances

dismanEventMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 88, 3, 1, 1)).setObjects(*(("DISMAN-EVENT-MIB", "dismanEventNotificationGroup"), ("DISMAN-EVENT-MIB", "dismanEventObjectsGroup"), ("DISMAN-EVENT-MIB", "dismanEventResourceGroup"), ("DISMAN-EVENT-MIB", "dismanEventEventGroup"), ("DISMAN-EVENT-MIB", "dismanEventTriggerGroup"), ("DISMAN-EVENT-MIB", "dismanEventNotificationObjectGroup"), ) )
if mibBuilder.loadTexts: dismanEventMIBCompliance.setDescription("The compliance statement for entities which implement\nthe Event MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("DISMAN-EVENT-MIB", PYSNMP_MODULE_ID=dismanEventMIB)

# Types
mibBuilder.exportSymbols("DISMAN-EVENT-MIB", FailureReason=FailureReason)

# Objects
mibBuilder.exportSymbols("DISMAN-EVENT-MIB", sysUpTimeInstance=sysUpTimeInstance, dismanEventMIB=dismanEventMIB, dismanEventMIBObjects=dismanEventMIBObjects, mteResource=mteResource, mteResourceSampleMinimum=mteResourceSampleMinimum, mteResourceSampleInstanceMaximum=mteResourceSampleInstanceMaximum, mteResourceSampleInstances=mteResourceSampleInstances, mteResourceSampleInstancesHigh=mteResourceSampleInstancesHigh, mteResourceSampleInstanceLacks=mteResourceSampleInstanceLacks, mteTrigger=mteTrigger, mteTriggerFailures=mteTriggerFailures, mteTriggerTable=mteTriggerTable, mteTriggerEntry=mteTriggerEntry, mteOwner=mteOwner, mteTriggerName=mteTriggerName, mteTriggerComment=mteTriggerComment, mteTriggerTest=mteTriggerTest, mteTriggerSampleType=mteTriggerSampleType, mteTriggerValueID=mteTriggerValueID, mteTriggerValueIDWildcard=mteTriggerValueIDWildcard, mteTriggerTargetTag=mteTriggerTargetTag, mteTriggerContextName=mteTriggerContextName, mteTriggerContextNameWildcard=mteTriggerContextNameWildcard, mteTriggerFrequency=mteTriggerFrequency, mteTriggerObjectsOwner=mteTriggerObjectsOwner, mteTriggerObjects=mteTriggerObjects, mteTriggerEnabled=mteTriggerEnabled, mteTriggerEntryStatus=mteTriggerEntryStatus, mteTriggerDeltaTable=mteTriggerDeltaTable, mteTriggerDeltaEntry=mteTriggerDeltaEntry, mteTriggerDeltaDiscontinuityID=mteTriggerDeltaDiscontinuityID, mteTriggerDeltaDiscontinuityIDWildcard=mteTriggerDeltaDiscontinuityIDWildcard, mteTriggerDeltaDiscontinuityIDType=mteTriggerDeltaDiscontinuityIDType, mteTriggerExistenceTable=mteTriggerExistenceTable, mteTriggerExistenceEntry=mteTriggerExistenceEntry, mteTriggerExistenceTest=mteTriggerExistenceTest, mteTriggerExistenceStartup=mteTriggerExistenceStartup, mteTriggerExistenceObjectsOwner=mteTriggerExistenceObjectsOwner, mteTriggerExistenceObjects=mteTriggerExistenceObjects, mteTriggerExistenceEventOwner=mteTriggerExistenceEventOwner, mteTriggerExistenceEvent=mteTriggerExistenceEvent, mteTriggerBooleanTable=mteTriggerBooleanTable, mteTriggerBooleanEntry=mteTriggerBooleanEntry, mteTriggerBooleanComparison=mteTriggerBooleanComparison, mteTriggerBooleanValue=mteTriggerBooleanValue, mteTriggerBooleanStartup=mteTriggerBooleanStartup, mteTriggerBooleanObjectsOwner=mteTriggerBooleanObjectsOwner, mteTriggerBooleanObjects=mteTriggerBooleanObjects, mteTriggerBooleanEventOwner=mteTriggerBooleanEventOwner, mteTriggerBooleanEvent=mteTriggerBooleanEvent, mteTriggerThresholdTable=mteTriggerThresholdTable, mteTriggerThresholdEntry=mteTriggerThresholdEntry, mteTriggerThresholdStartup=mteTriggerThresholdStartup, mteTriggerThresholdRising=mteTriggerThresholdRising, mteTriggerThresholdFalling=mteTriggerThresholdFalling, mteTriggerThresholdDeltaRising=mteTriggerThresholdDeltaRising, mteTriggerThresholdDeltaFalling=mteTriggerThresholdDeltaFalling, mteTriggerThresholdObjectsOwner=mteTriggerThresholdObjectsOwner, mteTriggerThresholdObjects=mteTriggerThresholdObjects, mteTriggerThresholdRisingEventOwner=mteTriggerThresholdRisingEventOwner, mteTriggerThresholdRisingEvent=mteTriggerThresholdRisingEvent, mteTriggerThresholdFallingEventOwner=mteTriggerThresholdFallingEventOwner, mteTriggerThresholdFallingEvent=mteTriggerThresholdFallingEvent, mteTriggerThresholdDeltaRisingEventOwner=mteTriggerThresholdDeltaRisingEventOwner, mteTriggerThresholdDeltaRisingEvent=mteTriggerThresholdDeltaRisingEvent, mteTriggerThresholdDeltaFallingEventOwner=mteTriggerThresholdDeltaFallingEventOwner, mteTriggerThresholdDeltaFallingEvent=mteTriggerThresholdDeltaFallingEvent, mteObjects=mteObjects, mteObjectsTable=mteObjectsTable, mteObjectsEntry=mteObjectsEntry, mteObjectsName=mteObjectsName, mteObjectsIndex=mteObjectsIndex, mteObjectsID=mteObjectsID, mteObjectsIDWildcard=mteObjectsIDWildcard, mteObjectsEntryStatus=mteObjectsEntryStatus, mteEvent=mteEvent, mteEventFailures=mteEventFailures, mteEventTable=mteEventTable, mteEventEntry=mteEventEntry, mteEventName=mteEventName, mteEventComment=mteEventComment, mteEventActions=mteEventActions, mteEventEnabled=mteEventEnabled, mteEventEntryStatus=mteEventEntryStatus, mteEventNotificationTable=mteEventNotificationTable, mteEventNotificationEntry=mteEventNotificationEntry, mteEventNotification=mteEventNotification, mteEventNotificationObjectsOwner=mteEventNotificationObjectsOwner, mteEventNotificationObjects=mteEventNotificationObjects, mteEventSetTable=mteEventSetTable, mteEventSetEntry=mteEventSetEntry, mteEventSetObject=mteEventSetObject, mteEventSetObjectWildcard=mteEventSetObjectWildcard, mteEventSetValue=mteEventSetValue, mteEventSetTargetTag=mteEventSetTargetTag, mteEventSetContextName=mteEventSetContextName, mteEventSetContextNameWildcard=mteEventSetContextNameWildcard, dismanEventMIBNotificationPrefix=dismanEventMIBNotificationPrefix, dismanEventMIBNotifications=dismanEventMIBNotifications, dismanEventMIBNotificationObjects=dismanEventMIBNotificationObjects, mteHotTrigger=mteHotTrigger, mteHotTargetName=mteHotTargetName, mteHotContextName=mteHotContextName, mteHotOID=mteHotOID, mteHotValue=mteHotValue, mteFailedReason=mteFailedReason, dismanEventMIBConformance=dismanEventMIBConformance, dismanEventMIBCompliances=dismanEventMIBCompliances, dismanEventMIBGroups=dismanEventMIBGroups)

# Notifications
mibBuilder.exportSymbols("DISMAN-EVENT-MIB", mteTriggerFired=mteTriggerFired, mteTriggerRising=mteTriggerRising, mteTriggerFalling=mteTriggerFalling, mteTriggerFailure=mteTriggerFailure, mteEventSetFailure=mteEventSetFailure)

# Groups
mibBuilder.exportSymbols("DISMAN-EVENT-MIB", dismanEventResourceGroup=dismanEventResourceGroup, dismanEventTriggerGroup=dismanEventTriggerGroup, dismanEventObjectsGroup=dismanEventObjectsGroup, dismanEventEventGroup=dismanEventEventGroup, dismanEventNotificationObjectGroup=dismanEventNotificationObjectGroup, dismanEventNotificationGroup=dismanEventNotificationGroup)

# Compliances
mibBuilder.exportSymbols("DISMAN-EVENT-MIB", dismanEventMIBCompliance=dismanEventMIBCompliance)
