# PySNMP SMI module. Autogenerated from smidump -f python EBN-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:38:55 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( SnaControlPointName, ) = mibBuilder.importSymbols("APPN-MIB", "SnaControlPointName")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( snanauMIB, ) = mibBuilder.importSymbols("SNA-NAU-MIB", "snanauMIB")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")

# Types

class SnaNAUWildcardName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec+ValueSizeConstraint(1,17)
    

# Objects

ebnMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 34, 7)).setRevisions(("1998-04-28 18:00",))
if mibBuilder.loadTexts: ebnMIB.setOrganization("IETF SNA NAU MIB WG / AIW APPN MIBs SIG")
if mibBuilder.loadTexts: ebnMIB.setContactInfo("\nBob Clouston\nCisco Systems\n7025 Kit Creek Road\nP.O. Box 14987\nResearch Triangle Park, NC 27709, USA\nTel:    1 919 472 2333\nE-mail: clouston@cisco.com\n\nBob Moore\nIBM Corporation\nBRQA/501\nP.O. Box 12195\nResearch Triangle Park, NC 27709, USA\nTel:    1 919 254 4436\nE-mail: remoore@us.ibm.com")
if mibBuilder.loadTexts: ebnMIB.setDescription(" The MIB Module for Extended Border Node")
ebnObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1))
ebnDir = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1, 1))
ebnDirTable = MibTable((1, 3, 6, 1, 2, 1, 34, 7, 1, 1, 1))
if mibBuilder.loadTexts: ebnDirTable.setDescription("The EBN Directory Table.  This table is an extension\nto the APPN MIB's appnDirTable.  Entries in this table\nare in one-to-one correspondence with entries in the\nappnDirTable, with corresponding entries having identical\nvalues for their respective indexes.")
ebnDirEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 7, 1, 1, 1, 1)).setIndexNames((0, "EBN-MIB", "ebnDirLuName"))
if mibBuilder.loadTexts: ebnDirEntry.setDescription("Entry in the EBN Directory Table.")
ebnDirLuName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 1, 1, 1, 1), SnaNAUWildcardName()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ebnDirLuName.setDescription("Fully qualified network LU name in the domain of a serving\nnetwork node.  If this object has the same value as the\nappnDirLuName object in the APPN MIB, then the two objects\nare referring to the same LU.")
ebnDirSubnetAffiliation = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 1, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("native", 1), ("nonNative", 2), ("subarea", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnDirSubnetAffiliation.setDescription("Specifies the subnetwork affiliation of the LU:\n- native(1)    : The LU is in the native APPN subnetwork.\n- nonNative(2) : The LU is in a non-native APPN subnetwork.\n- subarea(3)   : The LU is in a subarea network.")
ebnIsRscv = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1, 2))
ebnIsRscvTable = MibTable((1, 3, 6, 1, 2, 1, 34, 7, 1, 2, 1))
if mibBuilder.loadTexts: ebnIsRscvTable.setDescription("The EBN Intermediate Session RSCV table.  This table is an\nextension to the appnIsInTable.  It contains the RSCV and COS\nused in the direction of the BIND destination.  There is an\nentry in this table for each session that traverses an ISTG\nwhen it enters or leaves this EBN, with corresponding entries\nhaving identical values for their respective indexes.")
ebnIsRscvEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 7, 1, 2, 1, 1)).setIndexNames((0, "EBN-MIB", "ebnIsRscvCpName"), (0, "EBN-MIB", "ebnIsRscvPcid"))
if mibBuilder.loadTexts: ebnIsRscvEntry.setDescription("Entry in ebnIsRscvTable.")
ebnIsRscvCpName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 2, 1, 1, 1), SnaControlPointName()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ebnIsRscvCpName.setDescription("The network-qualified control point name of the node at\nwhich the session and PCID originated.  For APPN and LEN\nnodes, this is either CP name of the APPN node at which\nthe origin LU is located or the CP name of the NN serving\nthe LEN node at which the origin LU is located.  For DLUR\nresources it is the name of the owning SSCP.\n\nIf this object has the same value as the appnIsInFqCpName\nobject in the APPN MIB, then the two objects are referring to\nthe same APPN control point.")
ebnIsRscvPcid = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ebnIsRscvPcid.setDescription("The procedure correlation identifier (PCID) of a session.\nIt is an 8-octet value.\n\nIf this object has the same value as the appnIsInPcid object\nin the APPN MIB, and if the corresponding ebnIsRscvCpName\nobject has the same value as the corresponding\nappnIsInFqCpName object, then the entries indexed by these\nobjects are referring to the same session.")
ebnIsRscvDestinationRoute = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnIsRscvDestinationRoute.setDescription("The route selection control vector (RSCV x'2B') used in the\ndirection towards the SLU.")
ebnIsRscvDestinationCos = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnIsRscvDestinationCos.setDescription("The Class of Service (COS) name used in the direction\ntowards the SLU.\n\nBecause the characters allowed in an SNA COS name come from\na restricted character set, these names are not subject to\ninternationalization.")
ebnDirConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1, 3))
ebnSearchCacheTime = MibScalar((1, 3, 6, 1, 2, 1, 34, 7, 1, 3, 1), Unsigned32()).setMaxAccess("readonly").setUnits("minutes")
if mibBuilder.loadTexts: ebnSearchCacheTime.setDescription("The amount of time in minutes an extended border node will\nretain information about a multi-subnetwork search, once\nthat that search terminates.  A value 0 indicates that the\nEBN has no defined limit, and the number of entries is\nbounded only by memory.")
ebnMaxSearchCache = MibScalar((1, 3, 6, 1, 2, 1, 34, 7, 1, 3, 2), Unsigned32()).setMaxAccess("readonly").setUnits("entries")
if mibBuilder.loadTexts: ebnMaxSearchCache.setDescription("The maximum number of multi-subnet entries to be cached.\nThe value 0 indicates that the local node has no defined\nlimit, and the number of entries is bounded only by\nmemory.")
ebnDefaultSubnetVisitCount = MibScalar((1, 3, 6, 1, 2, 1, 34, 7, 1, 3, 3), Unsigned32()).setMaxAccess("readonly").setUnits("topology subnetworks")
if mibBuilder.loadTexts: ebnDefaultSubnetVisitCount.setDescription("The default maximum number of subnetworks a LOCATE search\nprocedure may traverse.")
ebnCOS = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1, 4))
ebnCosMapTable = MibTable((1, 3, 6, 1, 2, 1, 34, 7, 1, 4, 1))
if mibBuilder.loadTexts: ebnCosMapTable.setDescription("The EBN COS Mapping Table.  This table specifies how non-\nnative COS values are mapped to COS values defined in the\nnative subnetwork.\n\nNote:  The COS mappings that an EBN performs are determined\nby multiple factors, one of which is a set of user-defined\ninitial mappings.  This table returns the COS mappings that\nthe EBN is actually performing at the time it is queried,\nrather than the user-defined initial ones.")
ebnCosMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 7, 1, 4, 1, 1)).setIndexNames((0, "EBN-MIB", "ebnCosMapCpName"), (0, "EBN-MIB", "ebnCosMapNonNativeCos"))
if mibBuilder.loadTexts: ebnCosMapEntry.setDescription("An entry in the EBN COS Mapping table.")
ebnCosMapCpName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 4, 1, 1, 1), SnaNAUWildcardName()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ebnCosMapCpName.setDescription("Fully qualified network CP name for which the COS mapping\napplies.")
ebnCosMapNonNativeCos = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ebnCosMapNonNativeCos.setDescription("This object contains one of the following values:\n\n- An 8-character COS name used in a non-native subnetwork.\n- The single character '*', identifying the entry with the\n  default native COS for a non-native CP name.  This entry\n  is used when there is no entry in the table for a\n  non-native CP name / non-native COS pair.\n\nBecause the characters allowed in an SNA COS name come from\na restricted character set, these names are not subject to\ninternationalization.")
ebnCosMapNativeCos = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnCosMapNativeCos.setDescription("An 8-byte name for the class-of-service, as known in the\nnative subnetwork.\n\nBecause the characters allowed in an SNA COS name come from\na restricted character set, these names are not subject to\ninternationalization.")
ebnSubnetRoutingList = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1, 5))
ebnSubnetSearchTable = MibTable((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 1))
if mibBuilder.loadTexts: ebnSubnetSearchTable.setDescription("This table contains one entry for each fully qualified LU\nname for which an associated subnet routing list has been\ndefined.  An entry in this table contains general\ncharacteristics of the subnet search routing list for an\nLU name.  The routing list itself is represented by a set\nof contiguous entries in the ebnSearchTable.")
ebnSubnetSearchEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 1, 1)).setIndexNames((0, "EBN-MIB", "ebnSubnetSearchLuName"))
if mibBuilder.loadTexts: ebnSubnetSearchEntry.setDescription("An entry for the ebnSubnetSearchTable.  The entry\nrepresents the configured parameters the EBN uses when it\nis determining how to search for the LU identified by the\nebnSubnetSearchLuName object.")
ebnSubnetSearchLuName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 1, 1, 1), SnaNAUWildcardName()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ebnSubnetSearchLuName.setDescription("Fully qualified network LU name.")
ebnSubnetSearchDynamics = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("none", 1), ("limited", 2), ("full", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnSubnetSearchDynamics.setDescription("Indicates whether an EBN may add dynamic entries to a\nsubnetwork routing list.  none(1) means no entries may be\nadded to the subnetwork routing list.  limited(2) means\nonly likely entries may be added to the subnetwork routing\nlist.  full(3) means all native extended border nodes and\nadjacent, non-native EBNs and NNs will be added to the\nsubnetwork routing list.")
ebnSubnetSearchOrdering = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("priority", 1), ("defined", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnSubnetSearchOrdering.setDescription("Indicates whether an EBN may reorder a subnetwork routing\nlist so that entries which are more likely to be successful\nmove to the top of the subnetwork routing list and entries\nwhich are more likely to be unsuccessful move to the bottom\nof the list.\nThe following values are defined:\n\n   - priority(1):  Entries may be reordered.\n   - defined(2):   Entries must not be reordered.")
ebnSearchTable = MibTable((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 2))
if mibBuilder.loadTexts: ebnSearchTable.setDescription("This table indicates the CONFIGURED list of control points\nto which the EBN sends Locate searches for a given fully\nqualified LU name.  Each entry in the table indicates one\ncontrol point that should be included in a multi-subnet\nsearch for a particular LU name.")
ebnSearchEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 2, 1)).setIndexNames((0, "EBN-MIB", "ebnSearchLuName"), (0, "EBN-MIB", "ebnSearchIndex"))
if mibBuilder.loadTexts: ebnSearchEntry.setDescription("An entry in the ebnSearchTable.  An entry can exist in\nthis table only if an entry exists in the\nebnSubnetSearchTable with an ebnSubnetSearchLuName value\nmatching this entry's ebnSearchLuName.\nFor a given ebnSearchLuName value, the ordering of entries\nprovides by the ebnSearchIndex values corresponds to the\norder in which the control points to be searched appear in\nthe CONFIGURED search list for the ebnSearchLuName.")
ebnSearchLuName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 2, 1, 1), SnaNAUWildcardName()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ebnSearchLuName.setDescription("Fully qualified network LU name.  If this object has the\nsame value as the ebnSubnetSearchLuName object, then the\ntwo objects are referring to the same LU.")
ebnSearchIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 2, 1, 2), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ebnSearchIndex.setDescription("Secondary index enumerating the CONFIGURED order in which\na search is forwarded to CPs for a particular LU name.  The\norder for an actual search is determined dynamically by the\nEBN, based on this configured information and on other\nfactors, including whether search dynamics and search\nordering are enabled.  Information on these last two settings\nis available in, respectively, the ebnSubnetSearchDynamics\nand ebnSubnetSearch ordering objects.")
ebnSearchCpName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnSearchCpName.setDescription("This object specifies the CP(s) to which a search should be\nforwarded.  It either follows the SnaNAUWildcardName textual\nconvention or takes one of the following special formats:\n\n   '*' indicates that all native EBNs and all adjacent non-\n   native EBNs and NNs may be added to the routing list\n   dynamically,\n\n   '*SELF' indicates that the EBN should search itself and\n   its native subnetwork at this time during the\n   cross-subnet search,\n\n   '*EBNS' indicates all native EBNs.\n\nBecause the characters allowed in a CP name come from a\nrestricted character set, and because the three formats\nlisted here use no special characters, this object is not\nsubject to internationalization.")
ebnSearchSNVC = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 5, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebnSearchSNVC.setDescription("The maximum number of subnets a Locate search procedure may\ntraverse.  ")
hbn = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 1, 6))
hbnIsInTable = MibTable((1, 3, 6, 1, 2, 1, 34, 7, 1, 6, 1))
if mibBuilder.loadTexts: hbnIsInTable.setDescription("The HBN Intermediate Session table.")
hbnIsInEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 7, 1, 6, 1, 1)).setIndexNames((0, "EBN-MIB", "hbnIsInFqCpName"), (0, "EBN-MIB", "hbnIsInPcid"))
if mibBuilder.loadTexts: hbnIsInEntry.setDescription("Entry of the HBN Intermediate Session Table.  An entry\nexists in this table for every intermediate session being\nrouted between back-to-back RTP connections in the HBN.\n\nWhen an entry for a session exists in this table, the\nNceIds and Tcids for the back-to-back RTP connections are\nmade available in the following four objects:\n\n   RTP connection in the direction of the PLU:\n      - NceId:  appnIsInRtpNceId (in the APPN MIB)\n      - Tcid:   appnIsinRtpTcid (in the APPN MIB).\n\n   RTP connection in the direction of the SLU:\n      - NceId:  hbnIsInRtpNceId (in this table)\n      - Tcid:   hbnIsInRtpTcid (in this table).")
hbnIsInFqCpName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 6, 1, 1, 1), SnaControlPointName()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hbnIsInFqCpName.setDescription("The network-qualified control point name of the node at\nwhich the session and PCID originated.  For APPN and LEN\nnodes, this is either the CP name of the APPN node at\nwhich the origin LU is located or the CP name of the NN\nserving the LEN node at which the origin LU is located.\n\nIf this object has the same value as the appnIsInFqCpName\nobject in the APPN MIB, then the two objects are referring\nto the same APPN control point.")
hbnIsInPcid = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hbnIsInPcid.setDescription("The procedure correlation identifier (PCID) of a session.\nIt is an 8-octet value.\n\nIf this object has the same value as the appnIsInPcid object\nin the APPN MIB, and if the corresponding hbnIsInFqCpName\nobject has the same value as the corresponding\nappnIsInFqCpName object, then the entries indexed by these\nobjects are referring to the same session.")
hbnIsInRtpNceId = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hbnIsInRtpNceId.setDescription("The HPR local Network Connection Endpoint of the session in\nthe direction of the SLU.")
hbnIsInRtpTcid = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 7, 1, 6, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hbnIsInRtpTcid.setDescription("The RTP connection local TCID of the session in the direction\nof the SLU.")
ebnConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 2))
ebnCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 2, 1))
ebnGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 7, 2, 2))

# Augmentions

# Groups

ebnDirectoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 7, 2, 2, 1)).setObjects(*(("EBN-MIB", "ebnDirSubnetAffiliation"), ) )
if mibBuilder.loadTexts: ebnDirectoryGroup.setDescription("The EBN-related directory objects.")
ebnIsRscvGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 7, 2, 2, 2)).setObjects(*(("EBN-MIB", "ebnIsRscvDestinationRoute"), ("EBN-MIB", "ebnIsRscvDestinationCos"), ) )
if mibBuilder.loadTexts: ebnIsRscvGroup.setDescription("Two objects representing RSCV and class of service\ninformation saved by an EBN.")
ebnDirectoryConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 7, 2, 2, 3)).setObjects(*(("EBN-MIB", "ebnSearchCacheTime"), ("EBN-MIB", "ebnMaxSearchCache"), ("EBN-MIB", "ebnDefaultSubnetVisitCount"), ) )
if mibBuilder.loadTexts: ebnDirectoryConfigGroup.setDescription("The EBN Directory Configuration Group.")
ebnCosMappingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 7, 2, 2, 4)).setObjects(*(("EBN-MIB", "ebnCosMapNativeCos"), ) )
if mibBuilder.loadTexts: ebnCosMappingGroup.setDescription("The EBN COS Mapping Group.")
ebnSubnetRoutingListGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 7, 2, 2, 5)).setObjects(*(("EBN-MIB", "ebnSearchSNVC"), ("EBN-MIB", "ebnSubnetSearchDynamics"), ("EBN-MIB", "ebnSubnetSearchOrdering"), ("EBN-MIB", "ebnSearchCpName"), ) )
if mibBuilder.loadTexts: ebnSubnetRoutingListGroup.setDescription("The Subnet Routing List Group.")
hbnIsInGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 7, 2, 2, 6)).setObjects(*(("EBN-MIB", "hbnIsInRtpTcid"), ("EBN-MIB", "hbnIsInRtpNceId"), ) )
if mibBuilder.loadTexts: hbnIsInGroup.setDescription("The HBN-related Intermediate Session Objects.")

# Compliances

ebnCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 34, 7, 2, 1, 1)).setObjects(*(("EBN-MIB", "ebnIsRscvGroup"), ("EBN-MIB", "ebnCosMappingGroup"), ("EBN-MIB", "hbnIsInGroup"), ("EBN-MIB", "ebnDirectoryConfigGroup"), ("EBN-MIB", "ebnSubnetRoutingListGroup"), ("EBN-MIB", "ebnDirectoryGroup"), ) )
if mibBuilder.loadTexts: ebnCompliance.setDescription("The compliance statement for the SNMPv2 entities which\nimplement the ebnMIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("EBN-MIB", PYSNMP_MODULE_ID=ebnMIB)

# Types
mibBuilder.exportSymbols("EBN-MIB", SnaNAUWildcardName=SnaNAUWildcardName)

# Objects
mibBuilder.exportSymbols("EBN-MIB", ebnMIB=ebnMIB, ebnObjects=ebnObjects, ebnDir=ebnDir, ebnDirTable=ebnDirTable, ebnDirEntry=ebnDirEntry, ebnDirLuName=ebnDirLuName, ebnDirSubnetAffiliation=ebnDirSubnetAffiliation, ebnIsRscv=ebnIsRscv, ebnIsRscvTable=ebnIsRscvTable, ebnIsRscvEntry=ebnIsRscvEntry, ebnIsRscvCpName=ebnIsRscvCpName, ebnIsRscvPcid=ebnIsRscvPcid, ebnIsRscvDestinationRoute=ebnIsRscvDestinationRoute, ebnIsRscvDestinationCos=ebnIsRscvDestinationCos, ebnDirConfig=ebnDirConfig, ebnSearchCacheTime=ebnSearchCacheTime, ebnMaxSearchCache=ebnMaxSearchCache, ebnDefaultSubnetVisitCount=ebnDefaultSubnetVisitCount, ebnCOS=ebnCOS, ebnCosMapTable=ebnCosMapTable, ebnCosMapEntry=ebnCosMapEntry, ebnCosMapCpName=ebnCosMapCpName, ebnCosMapNonNativeCos=ebnCosMapNonNativeCos, ebnCosMapNativeCos=ebnCosMapNativeCos, ebnSubnetRoutingList=ebnSubnetRoutingList, ebnSubnetSearchTable=ebnSubnetSearchTable, ebnSubnetSearchEntry=ebnSubnetSearchEntry, ebnSubnetSearchLuName=ebnSubnetSearchLuName, ebnSubnetSearchDynamics=ebnSubnetSearchDynamics, ebnSubnetSearchOrdering=ebnSubnetSearchOrdering, ebnSearchTable=ebnSearchTable, ebnSearchEntry=ebnSearchEntry, ebnSearchLuName=ebnSearchLuName, ebnSearchIndex=ebnSearchIndex, ebnSearchCpName=ebnSearchCpName, ebnSearchSNVC=ebnSearchSNVC, hbn=hbn, hbnIsInTable=hbnIsInTable, hbnIsInEntry=hbnIsInEntry, hbnIsInFqCpName=hbnIsInFqCpName, hbnIsInPcid=hbnIsInPcid, hbnIsInRtpNceId=hbnIsInRtpNceId, hbnIsInRtpTcid=hbnIsInRtpTcid, ebnConformance=ebnConformance, ebnCompliances=ebnCompliances, ebnGroups=ebnGroups)

# Groups
mibBuilder.exportSymbols("EBN-MIB", ebnDirectoryGroup=ebnDirectoryGroup, ebnIsRscvGroup=ebnIsRscvGroup, ebnDirectoryConfigGroup=ebnDirectoryConfigGroup, ebnCosMappingGroup=ebnCosMappingGroup, ebnSubnetRoutingListGroup=ebnSubnetRoutingListGroup, hbnIsInGroup=hbnIsInGroup)

# Compliances
mibBuilder.exportSymbols("EBN-MIB", ebnCompliance=ebnCompliance)
