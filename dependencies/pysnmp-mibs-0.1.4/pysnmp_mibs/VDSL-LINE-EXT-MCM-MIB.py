# PySNMP SMI module. Autogenerated from smidump -f python VDSL-LINE-EXT-MCM-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:48 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, transmission, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "transmission")
( RowStatus, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus")
( vdslLineConfProfileName, ) = mibBuilder.importSymbols("VDSL-LINE-MIB", "vdslLineConfProfileName")

# Objects

vdslExtMCMMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 229)).setRevisions(("2005-04-28 00:00",))
if mibBuilder.loadTexts: vdslExtMCMMIB.setOrganization("ADSLMIB Working Group")
if mibBuilder.loadTexts: vdslExtMCMMIB.setContactInfo("WG-email:  adslmib@ietf.org\nInfo:      https://www1.ietf.org/mailman/listinfo/adslmib\n\nChair:     Mike Sneed\n           Sand Channel Systems\nPostal:    P.O. Box 37324\n           Raleigh NC 27627-732\nEmail:     sneedmike@hotmail.com\nPhone:     +1 206 600 7022\n\nCo-Chair/Co-editor:\n           Bob Ray\n           PESA Switching Systems, Inc.\nPostal:    330-A Wynn Drive\n           Huntsville, AL 35805\n           USA\nEmail:     rray@pesa.com\nPhone:     +1 256 726 9200 ext.  142\n\n\n\n\nCo-editor: Menachem Dodge\n           ECI Telecom Ltd.\nPostal:    30 hasivim St.\n           Petach Tikva 49517,\n           Israel.\nEmail:     mbdodge@ieee.org\nPhone:     +972 3 926 8421")
if mibBuilder.loadTexts: vdslExtMCMMIB.setDescription("The VDSL-LINE-MIB found in RFC 3728 defines objects for\nthe management of a pair of VDSL transceivers at each end of\nthe VDSL line.  The VDSL-LINE-MIB configures and monitors the\nline code independent parameters (TC layer) of the VDSL line.\nThis MIB module is an optional extension of the VDSL-LINE-MIB\nand defines objects for configuration and monitoring of the\nline code specific (LCS) elements (PMD layer) for VDSL lines\nusing MCM coding.  The objects in this extension MIB MUST NOT\nbe used for VDSL lines using Single Carrier Modulation (SCM)\nline coding.  If an object in this extension MIB is referenced\nby a line which does not use MCM, it has no effect on the\noperation of that line.\n\nNaming Conventions:\n    Vtuc -- (VTUC) transceiver at near (Central) end of line\n    Vtur -- (VTUR) transceiver at Remote end of line\n    Vtu  -- One of either Vtuc or Vtur\n    Curr -- Current\n    LCS  -- Line Code Specific\n    Max  -- Maximum\n    PSD  -- Power Spectral Density\n    Rx   -- Receive\n    Tx   -- Transmit\n\nCopyright (C) The Internet Society (2005).  This version\nof this MIB module is part of RFC 4070: see the RFC\nitself for full legal notices.")
vdslLineExtMCMMib = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 229, 1))
vdslLineExtMCMMibObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 229, 1, 1))
vdslLineMCMConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 1))
if mibBuilder.loadTexts: vdslLineMCMConfProfileTable.setDescription("This table contains additional information on multiple\ncarrier VDSL lines.  One entry in this table reflects a\nprofile defined by a manager which can be used to\nconfigure the VDSL line.\n\nIf an entry in this table is referenced by a line which\ndoes not use MCM, it has no effect on the operation of that\nline.\n\nAll read-create-objects defined in this table SHOULD be\nstored persistently.")
vdslLineMCMConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 1, 1)).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"))
if mibBuilder.loadTexts: vdslLineMCMConfProfileEntry.setDescription("Each entry consists of a list of parameters that\nrepresents the configuration of a multiple carrier\nmodulation VDSL modem.")
vdslLineMCMConfProfileTxWindowLength = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxWindowLength.setDescription("Specifies the length of the transmit window, counted\nin samples at the sampling rate corresponding to the\nnegotiated value of N.")
vdslLineMCMConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileRowStatus.setDescription("This object is used to create a new row or modify or\ndelete an existing row in this table.\n\nA profile is activated by setting this object to `active'.\nWhen `active' is set, the system will validate the profile.\n\nNone of the columns in this row may be modified while the\nrow is in the 'active' state.\n\nBefore a profile can be deleted or taken out of\nservice, (by setting this object to `destroy' or\n`notInService') it must first be unreferenced\nfrom all associated lines.")
vdslLineMCMConfProfileTxBandTable = MibTable((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2))
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandTable.setDescription("This table contains transmit band descriptor configuration\ninformation for a VDSL line.  Each entry in this table\nreflects the configuration for one of possibly many bands\nwith a multiple carrier modulation (MCM) VDSL line.\nThese entries are defined by a manager and can be used to\nconfigure the VDSL line.\n\nIf an entry in this table is referenced by a line which\ndoes not use MCM, it has no effect on the operation of that\nline.\n\nAll read-create-objects defined in this table SHOULD be\nstored persistently.")
vdslLineMCMConfProfileTxBandEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1)).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"), (0, "VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxBandNumber"))
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandEntry.setDescription("Each entry consists of a transmit band descriptor, which\nis defined by a start and a stop tone index.")
vdslLineMCMConfProfileTxBandNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandNumber.setDescription("The index for this band descriptor entry.")
vdslLineMCMConfProfileTxBandStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandStart.setDescription("Start tone index for this band.")
vdslLineMCMConfProfileTxBandStop = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandStop.setDescription("Stop tone index for this band.")
vdslLineMCMConfProfileTxBandRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandRowStatus.setDescription("This object is used to create a new row or modify or\ndelete an existing row in this table.\nA profile is activated by setting this object to `active'.\nWhen `active' is set, the system will validate the profile.\n\n\n\n\nEach entry must be internally consistent, the Stop Tone must\nbe greater than the Start Tone.  Each entry must also be\nexternally consistent, all entries indexed by a specific\nprofile must not overlap.  Validation of the profile will\ncheck both internal and external consistency.\n\nNone of the columns in this row may be modified while the\nrow is in the 'active' state.\n\nBefore a profile can be deleted or taken out of\nservice, (by setting this object to `destroy' or\n`notInService') it must be first unreferenced\nfrom all associated lines.")
vdslLineMCMConfProfileRxBandTable = MibTable((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3))
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandTable.setDescription("This table contains receive band descriptor configuration\ninformation for a VDSL line.  Each entry in this table\nreflects the configuration for one of possibly many bands\nwith a multiple carrier modulation (MCM) VDSL line.\nThese entries are defined by a manager and can be used to\nconfigure the VDSL line.\n\nIf an entry in this table is referenced by a line which\ndoes not use MCM, it has no effect on the operation of that\nline.\n\nAll read-create-objects defined in this table SHOULD be\nstored persistently.")
vdslLineMCMConfProfileRxBandEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1)).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"), (0, "VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileRxBandNumber"))
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandEntry.setDescription("Each entry consists of a transmit band descriptor, which\nis defined by a start and a stop tone index.")
vdslLineMCMConfProfileRxBandNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandNumber.setDescription("The index for this band descriptor entry.")
vdslLineMCMConfProfileRxBandStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandStart.setDescription("Start tone index for this band.")
vdslLineMCMConfProfileRxBandStop = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandStop.setDescription("Stop tone index for this band.")
vdslLineMCMConfProfileRxBandRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandRowStatus.setDescription("This object is used to create a new row or modify or\ndelete an existing row in this table.\n\nA profile is activated by setting this object to `active'.\nWhen `active' is set, the system will validate the profile.\nEach entry must be internally consistent, the Stop Tone must\nbe greater than the Start Tone.  Each entry must also be\nexternally consistent, all entries indexed by a specific\n\n\n\nprofile must not overlap.  Validation of the profile will\ncheck both internal and external consistency.\n\nNone of the columns in this row may be modified while the\nrow is in the 'active' state.\n\nBefore a profile can be deleted or taken out of\nservice, (by setting this object to `destroy' or\n`notInService') it must be first unreferenced\nfrom all associated lines.")
vdslLineMCMConfProfileTxPSDTable = MibTable((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4))
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDTable.setDescription("This table contains transmit PSD mask descriptor\nconfiguration information for a VDSL line.  Each entry in\nthis table reflects the configuration for one tone within\na multiple carrier modulation (MCM) VDSL line.  These\nentries are defined by a manager and can be used to\nconfigure the VDSL line.\n\nIf an entry in this table is referenced by a line which\ndoes not use MCM, it has no effect on the operation of that\nline.\n\nAll read-create-objects defined in this table SHOULD be\nstored persistently.")
vdslLineMCMConfProfileTxPSDEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1)).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"), (0, "VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxPSDNumber"))
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDEntry.setDescription("Each entry consists of a transmit PSD mask descriptor,\nwhich defines the power spectral density (PSD) for a tone.")
vdslLineMCMConfProfileTxPSDNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDNumber.setDescription("The index for this mask descriptor entry.")
vdslLineMCMConfProfileTxPSDTone = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDTone.setDescription("The tone index for which the PSD is being specified.")
vdslLineMCMConfProfileTxPSDPSD = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDPSD.setDescription("Power Spectral Density level in steps of 0.5dBm/Hz with\nan offset of -140dBm/Hz.")
vdslLineMCMConfProfileTxPSDRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDRowStatus.setDescription("This object is used to create a new row or modify or\ndelete an existing row in this table.\n\nA profile is activated by setting this object to `active'.\nWhen `active' is set, the system will validate the profile.\n\nNone of the columns in this row may be modified while the\nrow is in the 'active' state.\n\nBefore a profile can be deleted or taken out of\n\n\n\nservice, (by setting this object to `destroy' or\n`notInService') it must be first unreferenced\nfrom all associated lines.")
vdslLineMCMConfProfileMaxTxPSDTable = MibTable((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5))
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDTable.setDescription("This table contains transmit maximum PSD mask descriptor\nconfiguration information for a VDSL line.  Each entry in\nthis table reflects the configuration for one tone within\na multiple carrier modulation (MCM) VDSL modem.  These\nentries are defined by a manager and can be used to\nconfigure the VDSL line.\n\nIf an entry in this table is referenced by a line which\ndoes not use MCM, it has no effect on the operation of that\nline.\n\nAll read-create-objects defined in this table SHOULD be\nstored persistently.")
vdslLineMCMConfProfileMaxTxPSDEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1)).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"), (0, "VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxTxPSDNumber"))
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDEntry.setDescription("Each entry consists of a transmit PSD mask descriptor,\nwhich defines the maximum power spectral density (PSD)\nfor a tone.")
vdslLineMCMConfProfileMaxTxPSDNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDNumber.setDescription("The index for this band descriptor entry.")
vdslLineMCMConfProfileMaxTxPSDTone = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDTone.setDescription("The tone index for which the PSD is being specified.\nThere must not be multiple rows defined, for a particular\nprofile, with the same value for this field.")
vdslLineMCMConfProfileMaxTxPSDPSD = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDPSD.setDescription("Power Spectral Density level in steps of 0.5dBm/Hz with\nan offset of -140dBm/Hz.")
vdslLineMCMConfProfileMaxTxPSDRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDRowStatus.setDescription("This object is used to create a new row or modify or\ndelete an existing row in this table.\nA profile is activated by setting this object to `active'.\nWhen `active' is set, the system will validate the profile.\nThere must be only one entry in this table for each tone\nassociated with a specific profile.  This will be checked\nduring the validation process.\n\nNone of the columns in this row may be modified while the\nrow is in the 'active' state.\n\nBefore a profile can be deleted or taken out of\nservice, (by setting this object to `destroy' or\n`notInService') it must be first unreferenced\nfrom all associated lines.")
vdslLineMCMConfProfileMaxRxPSDTable = MibTable((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6))
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDTable.setDescription("This table contains maximum receive PSD mask descriptor\nconfiguration information for a VDSL line.  Each entry in\nthis table reflects the configuration for one tone within\na multiple carrier modulation (MCM) VDSL modem.  These\nentries are defined by a manager and can be used to\nconfigure the VDSL line.\n\nIf an entry in this table is referenced by a line which\ndoes not use MCM, it has no effect on the operation of that\nline.\n\nAll read-create-objects defined in this table SHOULD be\nstored persistently.")
vdslLineMCMConfProfileMaxRxPSDEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1)).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"), (0, "VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxRxPSDNumber"))
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDEntry.setDescription("Each entry consists of a transmit PSD mask descriptor,\nwhich defines the power spectral density (PSD) for a\ntone.")
vdslLineMCMConfProfileMaxRxPSDNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDNumber.setDescription("The index for this band descriptor entry.")
vdslLineMCMConfProfileMaxRxPSDTone = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDTone.setDescription("The tone index for which the PSD is being specified.\nThere must not be multiple rows defined, for a particular\nprofile, with the same value for this field.")
vdslLineMCMConfProfileMaxRxPSDPSD = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDPSD.setDescription("Power Spectral Density level in steps of 0.5dBm/Hz with\nan offset of -140dBm/Hz.")
vdslLineMCMConfProfileMaxRxPSDRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDRowStatus.setDescription("This object is used to create a new row or modify or\ndelete an existing row in this table.\n\nA profile is activated by setting this object to `active'.\nWhen `active' is set, the system will validate the profile.\nThere must be only one entry in this table for each tone\nassociated with a specific profile.  This will be checked\nduring the validation process.\n\nNone of the columns in this row may be modified while the\nrow is in the 'active' state.\n\nBefore a profile can be deleted or taken out of\nservice, (by setting this object to `destroy' or\n`notInService') it must be first unreferenced\nfrom all associated lines.")
vdslLineExtMCMConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 229, 1, 2))
vdslLineExtMCMGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 229, 1, 2, 1))
vdslLineExtMCMCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 229, 1, 2, 2))

# Augmentions

# Groups

vdslLineExtMCMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 229, 1, 2, 1, 1)).setObjects(*(("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxTxPSDPSD"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileRxBandStop"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxTxPSDTone"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxRxPSDRowStatus"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxTxPSDRowStatus"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxBandStop"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxRxPSDTone"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxPSDPSD"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxBandStart"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileRxBandStart"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxBandRowStatus"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxRxPSDPSD"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxWindowLength"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileRowStatus"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileRxBandRowStatus"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxPSDRowStatus"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxPSDTone"), ) )
if mibBuilder.loadTexts: vdslLineExtMCMGroup.setDescription("A collection of objects providing configuration\n\n\n\ninformation for a VDSL line based upon multiple\ncarrier modulation modem.")

# Compliances

vdslLineExtMCMMibCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 229, 1, 2, 2, 1)).setObjects(*(("VDSL-LINE-EXT-MCM-MIB", "vdslLineExtMCMGroup"), ) )
if mibBuilder.loadTexts: vdslLineExtMCMMibCompliance.setDescription("The compliance statement for SNMP entities which\nmanage VDSL interfaces.")

# Exports

# Module identity
mibBuilder.exportSymbols("VDSL-LINE-EXT-MCM-MIB", PYSNMP_MODULE_ID=vdslExtMCMMIB)

# Objects
mibBuilder.exportSymbols("VDSL-LINE-EXT-MCM-MIB", vdslExtMCMMIB=vdslExtMCMMIB, vdslLineExtMCMMib=vdslLineExtMCMMib, vdslLineExtMCMMibObjects=vdslLineExtMCMMibObjects, vdslLineMCMConfProfileTable=vdslLineMCMConfProfileTable, vdslLineMCMConfProfileEntry=vdslLineMCMConfProfileEntry, vdslLineMCMConfProfileTxWindowLength=vdslLineMCMConfProfileTxWindowLength, vdslLineMCMConfProfileRowStatus=vdslLineMCMConfProfileRowStatus, vdslLineMCMConfProfileTxBandTable=vdslLineMCMConfProfileTxBandTable, vdslLineMCMConfProfileTxBandEntry=vdslLineMCMConfProfileTxBandEntry, vdslLineMCMConfProfileTxBandNumber=vdslLineMCMConfProfileTxBandNumber, vdslLineMCMConfProfileTxBandStart=vdslLineMCMConfProfileTxBandStart, vdslLineMCMConfProfileTxBandStop=vdslLineMCMConfProfileTxBandStop, vdslLineMCMConfProfileTxBandRowStatus=vdslLineMCMConfProfileTxBandRowStatus, vdslLineMCMConfProfileRxBandTable=vdslLineMCMConfProfileRxBandTable, vdslLineMCMConfProfileRxBandEntry=vdslLineMCMConfProfileRxBandEntry, vdslLineMCMConfProfileRxBandNumber=vdslLineMCMConfProfileRxBandNumber, vdslLineMCMConfProfileRxBandStart=vdslLineMCMConfProfileRxBandStart, vdslLineMCMConfProfileRxBandStop=vdslLineMCMConfProfileRxBandStop, vdslLineMCMConfProfileRxBandRowStatus=vdslLineMCMConfProfileRxBandRowStatus, vdslLineMCMConfProfileTxPSDTable=vdslLineMCMConfProfileTxPSDTable, vdslLineMCMConfProfileTxPSDEntry=vdslLineMCMConfProfileTxPSDEntry, vdslLineMCMConfProfileTxPSDNumber=vdslLineMCMConfProfileTxPSDNumber, vdslLineMCMConfProfileTxPSDTone=vdslLineMCMConfProfileTxPSDTone, vdslLineMCMConfProfileTxPSDPSD=vdslLineMCMConfProfileTxPSDPSD, vdslLineMCMConfProfileTxPSDRowStatus=vdslLineMCMConfProfileTxPSDRowStatus, vdslLineMCMConfProfileMaxTxPSDTable=vdslLineMCMConfProfileMaxTxPSDTable, vdslLineMCMConfProfileMaxTxPSDEntry=vdslLineMCMConfProfileMaxTxPSDEntry, vdslLineMCMConfProfileMaxTxPSDNumber=vdslLineMCMConfProfileMaxTxPSDNumber, vdslLineMCMConfProfileMaxTxPSDTone=vdslLineMCMConfProfileMaxTxPSDTone, vdslLineMCMConfProfileMaxTxPSDPSD=vdslLineMCMConfProfileMaxTxPSDPSD, vdslLineMCMConfProfileMaxTxPSDRowStatus=vdslLineMCMConfProfileMaxTxPSDRowStatus, vdslLineMCMConfProfileMaxRxPSDTable=vdslLineMCMConfProfileMaxRxPSDTable, vdslLineMCMConfProfileMaxRxPSDEntry=vdslLineMCMConfProfileMaxRxPSDEntry, vdslLineMCMConfProfileMaxRxPSDNumber=vdslLineMCMConfProfileMaxRxPSDNumber, vdslLineMCMConfProfileMaxRxPSDTone=vdslLineMCMConfProfileMaxRxPSDTone, vdslLineMCMConfProfileMaxRxPSDPSD=vdslLineMCMConfProfileMaxRxPSDPSD, vdslLineMCMConfProfileMaxRxPSDRowStatus=vdslLineMCMConfProfileMaxRxPSDRowStatus, vdslLineExtMCMConformance=vdslLineExtMCMConformance, vdslLineExtMCMGroups=vdslLineExtMCMGroups, vdslLineExtMCMCompliances=vdslLineExtMCMCompliances)

# Groups
mibBuilder.exportSymbols("VDSL-LINE-EXT-MCM-MIB", vdslLineExtMCMGroup=vdslLineExtMCMGroup)

# Compliances
mibBuilder.exportSymbols("VDSL-LINE-EXT-MCM-MIB", vdslLineExtMCMMibCompliance=vdslLineExtMCMMibCompliance)
