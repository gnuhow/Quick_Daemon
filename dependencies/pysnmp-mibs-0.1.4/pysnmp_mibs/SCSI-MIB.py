# PySNMP SMI module. Autogenerated from smidump -f python SCSI-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:36 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Counter64, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2")
( AutonomousType, RowPointer, RowStatus, StorageType, TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "RowPointer", "RowStatus", "StorageType", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class ScsiDeviceOrPort(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,1,2,)
    namedValues = NamedValues(("device", 1), ("port", 2), ("other", 3), )
    
class ScsiHrSWInstalledIndexOrZero(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,2147483647)
    
class ScsiIdAssociation(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,3)
    
class ScsiIdCodeSet(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,15)
    
class ScsiIdType(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,15)
    
class ScsiIdValue(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,255)
    
class ScsiIdentifier(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,262)
    
class ScsiIndexValue(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,4294967295)
    
class ScsiIndexValueOrZero(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,4294967295)
    
class ScsiLUN(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ConstraintsUnion(ValueSizeConstraint(2,2),ValueSizeConstraint(8,8),)
    
class ScsiLuNameOrZero(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(8,8),)
    
class ScsiName(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,262)
    
class ScsiPortIndexValueOrZero(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,4294967295)
    

# Objects

scsiMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 139)).setRevisions(("2006-03-30 00:00",))
if mibBuilder.loadTexts: scsiMIB.setOrganization("IETF")
if mibBuilder.loadTexts: scsiMIB.setContactInfo("\nMichele Hallak-Stamler\n\n\n\nSanrad Intelligent Network\n27 Habarzel Street\nTel Aviv, Israel\nPhone: +972 3 7674809\nE-mail: michele@sanrad.com\n\nYaron Lederman\nSiliquent Technologies Ltd.\n21 Etzel Street\nRamat Gan, Israel\nPhone: +972 54 5308833\nE-mail: yaronled@bezeqint.net\n\nMark Bakke\nPostal: Cisco Systems, Inc\n7900 International Drive, Suite 400\nBloomington, MN\nUSA 55425\nE-mail: mbakke@cisco.com\n\nMarjorie Krueger\nPostal: Hewlett-Packard\n8000 Foothills Blvd.\nRoseville, CA 95747\nE-mail: marjorie_krueger@hp.com\n\nKeith McCloghrie\nCisco Systems, Inc.\nPostal: 170 West Tasman Drive\nSan Jose, CA USA 95134\nPhone: +1 408 526-5260\nE-mail: kzm@cisco.com")
if mibBuilder.loadTexts: scsiMIB.setDescription("The SCSI MIB Module.\nCopyright (C) The Internet Society (2006).  This version of\nthis MIB module is part of RFC 4455; see the RFC\nitself for full legal notices.")
scsiNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 0))
scsiNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 0, 0))
scsiAdmin = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 1))
scsiTransportTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 1, 1))
scsiTransportOther = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 1))
if mibBuilder.loadTexts: scsiTransportOther.setDescription("This identity identifies a transport that has no identity; it\nmight happen because the transport is unknown or might not\nhave been defined when this MIB module was created.")
scsiTransportSPI = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 2))
if mibBuilder.loadTexts: scsiTransportSPI.setDescription("This identity identifies a parallel SCSI transport.")
scsiTransportFCP = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 3))
if mibBuilder.loadTexts: scsiTransportFCP.setDescription("This identity identifies a Fibre Channel Protocol for SCSI,\nSecond Version.")
scsiTransportSRP = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 4))
if mibBuilder.loadTexts: scsiTransportSRP.setDescription("This identity identifies a protocol for transporting SCSI over\nRemote Direct Memory Access (RDMA) interfaces, e.g., InfiniBand\n(tm).")
scsiTransportISCSI = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 5))
if mibBuilder.loadTexts: scsiTransportISCSI.setDescription("This identity identifies an iSCSI transport.")
scsiTransportSBP = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 6))
if mibBuilder.loadTexts: scsiTransportSBP.setDescription("This identity identifies the Serial Bus Protocol 3.")
scsiTransportSAS = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 7))
if mibBuilder.loadTexts: scsiTransportSAS.setDescription("This identity identifies the Serial Attach SCSI Protocol.")
scsiObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2))
scsiGeneral = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 1))
scsiInstanceTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 1, 1))
if mibBuilder.loadTexts: scsiInstanceTable.setDescription("A list of SCSI instances present on the system.\nThe SCSI instance is the top-level entity, to which everything\nelse belongs.  An SNMP agent could represent more than one\ninstance if it represents either a stack of devices, or virtual\npartitions of a larger device, or a host running multiple SCSI\nimplementations from different vendors.")
scsiInstanceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"))
if mibBuilder.loadTexts: scsiInstanceEntry.setDescription("An entry (row) containing management information applicable to\na particular SCSI instance.")
scsiInstIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 1), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiInstIndex.setDescription("This object represents an arbitrary integer used to uniquely\nidentify a particular SCSI instance.")
scsiInstAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstAlias.setDescription("This object represents an administrative string, configured by\nthe administrator.  It can be a zero-length string.")
scsiInstSoftwareIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 3), ScsiHrSWInstalledIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiInstSoftwareIndex.setDescription("If this management instance corresponds to an installed\nsoftware module, then this object's value is the value of the\nhrSWInstalledIndex of that module.  If there is no\ncorrespondence to an installed software module (or no module\nthat has an hrSWInstalledIndex value), then the value of this\nobject is zero.")
scsiInstVendorVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiInstVendorVersion.setDescription("This object represents a text string set by the manufacturer\ndescribing the version of this instance.  The format of this\nstring is determined solely by the manufacturer and is for\ninformational purposes only.  It is unrelated to the SCSI\nspecification version numbers.")
scsiInstScsiNotificationsEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstScsiNotificationsEnable.setDescription("This object indicates whether notifications defined in this\nMIB module will be generated.")
scsiInstStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstStorageType.setDescription("This object specifies the memory realization for\nthis SCSI entity.\nSpecifically, each row in the following tables:\n\n           scsiIntrDevTable\n           scsiDscTgtTable\n           scsiAuthorizedIntrTable\n           scsiLunMapTable\n\nhas a StorageType as specified by the instance of\nthis object that is INDEXed by the same value of\nscsiInstIndex.\nThis value of this object is also used to indicate\nthe persistence across reboots of writable values in\nits row of the scsiInstanceTable.\nConceptual rows having the value 'permanent' need not\nallow write-access to any columnar objects in the row,\nnor to any object belonging to a table whose entry is\nINDEXed by the same value of scsiInstIndex.")
scsiDeviceTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 1, 2))
if mibBuilder.loadTexts: scsiDeviceTable.setDescription("A list of SCSI devices contained in each of the SCSI manageable\ninstances that this agent is reporting.")
scsiDeviceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiDeviceEntry.setDescription("An entry (row) containing management information applicable to\na particular SCSI device included in this SCSI manageable\ninstance identifiable by the value of scsiInstIndex.")
scsiDeviceIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1, 1), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiDeviceIndex.setDescription("This object is an arbitrary integer used to uniquely identify\na particular device within a particular SCSI instance.")
scsiDeviceAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiDeviceAlias.setDescription("This object contains an administrative name for this device.\nIf no name is assigned, the value of this object is the\nzero-length string.\nThe StorageType of this object is specified by the instance\nof scsiInstStorageType that is INDEXed by the same value of\nscsiInstIndex.")
scsiDeviceRole = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1, 3), Bits().subtype(namedValues=NamedValues(("target", 0), ("initiator", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDeviceRole.setDescription("This object determines whether this device is acting as a\nSCSI initiator device, or as a SCSI target device, or as both.")
scsiDevicePortNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDevicePortNumber.setDescription("This object represents the number of ports contained in this\ndevice.")
scsiPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 1, 3))
if mibBuilder.loadTexts: scsiPortTable.setDescription("A list of SCSI ports for each SCSI device in each instance.")
scsiPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiPortEntry.setDescription("An entry (row) containing management information applicable to\na particular SCSI port of a particular SCSI device in a\nparticular SCSI instance.")
scsiPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1, 1), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiPortIndex.setDescription("An arbitrary integer used to uniquely identify a particular\nport of a given device within a particular SCSI instance.")
scsiPortRole = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1, 2), Bits().subtype(namedValues=NamedValues(("target", 0), ("initiator", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortRole.setDescription("This object indicates whether this port is acting as a\nSCSI initiator port, or as a SCSI target port or as both.")
scsiPortTransportPtr = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortTransportPtr.setDescription("This object is a pointer to the corresponding row in the\nscsiTransportTable.  This row contains information on the\ntransport such as transport type and port name.")
scsiPortBusyStatuses = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortBusyStatuses.setDescription("This object represents the number of port busy statuses sent or\nreceived by this port.  Note: Initiator ports only receive busy\nstatus and SCSI target ports only send busy status.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system.")
scsiTransportTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 1, 5))
if mibBuilder.loadTexts: scsiTransportTable.setDescription("This table contains the device transport-specific information\nfor each transport connected to each device in\nscsiDeviceTable.")
scsiTransportEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiTransportIndex"))
if mibBuilder.loadTexts: scsiTransportEntry.setDescription("An entry (row) containing parameters applicable to a transport\nused by a particular device of a particular SCSI manageable\ninstance.")
scsiTransportIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1, 1), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiTransportIndex.setDescription("An arbitrary integer used to uniquely identify a particular\ntransport within a given device within a particular SCSI\ninstance.")
scsiTransportType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTransportType.setDescription("This object identifies the transport type of this row of the\ntransport table.  For example, if this object has the value\nscsiTransportFCP, then the identified transport is FCP.")
scsiTransportPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTransportPointer.setDescription("This object represents a pointer to a conceptual row in a\n'transport' MIB module allowing a manager to get useful\ninformation for the transport described by this entry.\nFor example, if the transport of this device is iSCSI, this\nobject will point to the iSCSI Instance of the iSCSI MIB\nmodule.\nIf there is no MIB for this transport, this object has the\nvalue 0.0.")
scsiTransportDevName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1, 4), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTransportDevName.setDescription("This object represents the name of this device in one of the\nformat(s) appropriate for this type of transport.")
scsiInitiatorDevice = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 2))
scsiIntrDevTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 1))
if mibBuilder.loadTexts: scsiIntrDevTable.setDescription("This table contains information for each local SCSI initiator\ndevice in each instance.")
scsiIntrDevEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 1, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiIntrDevEntry.setDescription("An entry (row) containing information applicable to a SCSI\ninitiator device within a particular SCSI instance.")
scsiIntrDevTgtAccessMode = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("autoEnable", 2), ("manualEnable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiIntrDevTgtAccessMode.setDescription("This object controls whether or not a discovered SCSI target\ndevice is immediately authorized:\n    - autoEnable (2) means that when a SCSI initiator device\n    discovers a SCSI target device, it can use it immediately.\n    - manualEnable (3) means that the SCSI initiator device\n    must wait for an operator to set scsiIntrDscTgtConfigured\n    = true before it is authorized.\nThe StorageType of this object is specified by the instance\nof scsiInstStorageType that is INDEXed by the same value of\nscsiInstIndex.")
scsiIntrDevOutResets = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrDevOutResets.setDescription("This object represents the total number of times that this SCSI\ninitiator device has issued\n- a LOGICAL UNIT RESET or TARGET RESET task management request,\n  or\n- any other SCSI transport protocol-specific action or event\n  that causes a Logical Unit Reset or a Hard Reset at one or\n  more SCSI target ports ([SAM2] chapters 5.9.6, 5.9.7).\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system.")
scsiIntrPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 2))
if mibBuilder.loadTexts: scsiIntrPortTable.setDescription("This table contains all the SCSI initiator ports for each\nlocal SCSI initiator or target/initiator devices in each SCSI\ninstance.")
scsiIntrPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiIntrPortEntry.setDescription("An entry (row) containing information applicable to a\nparticular SCSI initiator port of a particular SCSI device\nwithin a SCSI instance.")
scsiIntrPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 1), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortName.setDescription("This object represents the name of the port assigned for use\nby the SCSI protocol.  The format will depend on the type of\ntransport this port is using.")
scsiIntrPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 2), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortIdentifier.setDescription("This object represents the identifier of the port in one of\nthe format(s) appropriate for the type of transport in use.")
scsiIntrPortOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortOutCommands.setDescription("This object represents the number of commands sent by this\nSCSI initiator port.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system.")
scsiIntrPortWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortWrittenMegaBytes.setDescription("This object represents the amount of data in megabytes sent\nby this SCSI initiator port.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system.")
scsiIntrPortReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortReadMegaBytes.setDescription("This object represents the amount of data in megabytes\nreceived by this SCSI initiator port.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system.")
scsiIntrPortHSOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortHSOutCommands.setDescription("This object represents the number of commands sent by this\nSCSI initiator port.  This object provides support for systems\nthat can quickly generate a large number of commands because\nthey run at high speed.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system.")
scsiRemoteTgtDev = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 2, 3))
scsiDscTgtTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1))
if mibBuilder.loadTexts: scsiDscTgtTable.setDescription("This table includes all the remote (not in the local system)\nSCSI target ports that are authorized to attach to each local\nSCSI initiator port of this SCSI instance.")
scsiDscTgtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"))
if mibBuilder.loadTexts: scsiDscTgtEntry.setDescription("Each entry (row) contains information about the SCSI target\ndevice or port to which this SCSI initiator port (or all SCSI\ninitiator ports in the SCSI initiator entry indexed by\nscsiInstIndex, scsiDeviceIndex) will attempt to attach.  The\nentry is either for all local ports (if scsiDscTgtIntrPortIndex\nis zero) or only for the specific SCSI initiator port\nidentified by scsiDscTgtIntrPortIndex.  Note that if an entry in\nthis table is deleted, any corresponding entries in the\nscsiDscLunsTable must be deleted as well.\nThe StorageType of a row in this table is specified by the\ninstance of scsiInstStorageType that is INDEXed by the same\nvalue of scsiInstIndex.")
scsiDscTgtIntrPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 1), ScsiPortIndexValueOrZero()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiDscTgtIntrPortIndex.setDescription("This object relates to a particular local device within a\nparticular SCSI instance and specifies\n- the index of the local SCSI initiator port,\n- or zero, if this entry refers to the local device and\ntherefore refers to all the local SCSI initiator ports.")
scsiDscTgtIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 2), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiDscTgtIndex.setDescription("This object is an arbitrary integer used to uniquely identify\na particular SCSI target device either discovered by, or\nconfigured for use with, one or more ports scsiDscTgtName of\na particular device within a particular SCSI instance.")
scsiDscTgtDevOrPort = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 3), ScsiDeviceOrPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtDevOrPort.setDescription("This object indicates whether this entry describes a\nconfigured SCSI target device name (and applies to all ports\non the identified SCSI target device) or an individual SCSI\ntarget port.")
scsiDscTgtName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 4), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtName.setDescription("This object represents the name of this configured or\ndiscovered SCSI target device or port depending on the value\nof scsiDscTgtDevOrPort.")
scsiDscTgtConfigured = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtConfigured.setDescription("This object means\n-true(1): this entry has been configured by an administrator.\n-false(2): this entry has been added from a discovery\nmechanism (e.g., SendTargets, SLP, iSNS).\nAn administrator can modify this value from false to true.")
scsiDscTgtDiscovered = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtDiscovered.setDescription("This object means\n-true(1): this entry has been discovered by the SCSI instance\nas result of an automatic discovery process.\n-false(2):this entry has been added by manual configuration.\nThis entry is read-only because an administrator cannot change\nit.\nNote that it is an implementation decision to determine how\nlong to retain a row with configured=false, such as when the\nSCSI target device is no longer visible/accessible to the local\nSCSI initiator device.")
scsiDscTgtInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtInCommands.setDescription("This object represents the number of commands received from\nthis SCSI target port or device.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiDscTgtLastCreation.")
scsiDscTgtWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtWrittenMegaBytes.setDescription("This object represents the amount of megabytes of data sent as\nthe result of WRITE commands to this SCSI target port or device.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiDscTgtLastCreation.")
scsiDscTgtReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtReadMegaBytes.setDescription("This object represents the amount of megabytes received as the\nresult of READ commands to this SCSI target port or device.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiDscTgtLastCreation.")
scsiDscTgtHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtHSInCommands.setDescription("This object represents the number of commands received by this\nSCSI target port or device.  This object provides support for\nsystem that can quickly generate a large number of commands\nbecause they run at high speed.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiDscTgtLastCreation.")
scsiDscTgtLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtLastCreation.setDescription("This object represents the value of sysUpTime when this row\nwas created.")
scsiDscTgtRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtRowStatus.setDescription("This object allows an administrator to configure dynamically a\nnew entry in this table via SNMP or eventually delete it.\nAn administrator is not allowed to delete an entry for which\nthe value of the object scsiIntrDscTgtDiscovered is equal to\ntrue.\nNote that when an entry in this table is deleted, then any\ncorresponding entries in the scsiDscLunsTable must also be\nautomatically deleted.\n\nA newly created row cannot be made active until a value has\nbeen set for scsiDscTgtName.  In this case, the value of the\ncorresponding instance of the scsiDscTgtRowStatus column will\nstay 'notReady'.\nThe RowStatus TC [RFC2579] requires that this DESCRIPTION\nclause states under which circumstances other objects in this\nrow can be modified:\nThe value of this object has no effect on whether other objects\nin this conceptual row can be modified.")
scsiDscLunTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 2))
if mibBuilder.loadTexts: scsiDscLunTable.setDescription("This table includes all the remote (not in the local system)\nlogical unit numbers (LUNs) discovered via each local SCSI\ninitiator port of each local device within a particular SCSI\ninstance.")
scsiDscLunEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 2, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"), (0, "SCSI-MIB", "scsiDscLunIndex"))
if mibBuilder.loadTexts: scsiDscLunEntry.setDescription("An entry (row) represents a discovered LUN at a particular\nSCSI target device (scsiDscTgtIndex), where the LUN was\ndiscovered by a particular local SCSI initiator device within a\nparticular SCSI instance, possibly via a particular local\nSCSI initiator port.\nNote that when an entry in the scsiDscTgtTable is deleted,\nall corresponding entries in this table should automatically be\ndeleted.")
scsiDscLunIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 2, 1, 1), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiDscLunIndex.setDescription("This object is an arbitrary integer used to uniquely identify\na particular LUN discovered by a particular SCSI initiator port\nor a particular SCSI initiator device within a particular SCSI\ninstance.\nEntries in the scsiDscLunIdTable are associated with a LUN by\nhaving the value of this object in their INDEX.")
scsiDscLunLun = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 2, 1, 2), ScsiLUN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunLun.setDescription("This object contains the Logical Unit Number (LUN) of the\ndiscovered logical unit.")
scsiDscLunIdTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3))
if mibBuilder.loadTexts: scsiDscLunIdTable.setDescription("This table includes all the known LU identifiers of the remote\n(not in the local system) logical units discovered via each\nlocal SCSI initiator port or device of this SCSI instance.")
scsiDscLunIdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"), (0, "SCSI-MIB", "scsiDscLunIndex"), (0, "SCSI-MIB", "scsiDscLunIdIndex"))
if mibBuilder.loadTexts: scsiDscLunIdEntry.setDescription("An entry (row) represents the LU identifier of a discovered\nLUN at a particular SCSI target device (scsiDscTgtIndex), where\nthe LUN was discovered by a particular local SCSI initiator\ndevice within a particular SCSI instance, possibly via a\nparticular local SCSI initiator port.")
scsiDscLunIdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 1), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiDscLunIdIndex.setDescription("This object is an arbitrary integer used to uniquely identify\na particular LUN identifier discovered by each SCSI initiator\ndevice or particular SCSI initiator port within a particular\nSCSI instance.")
scsiDscLunIdCodeSet = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 2), ScsiIdCodeSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdCodeSet.setDescription("This object specifies the code set in use with this\nidentifier.  The value is represented in the same format as\nis contained in the identifier's Identification Descriptor\nwithin the logical unit's Device Identification Page.")
scsiDscLunIdAssociation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 3), ScsiIdAssociation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdAssociation.setDescription("This object specifies what the identifier is associated with\n(e.g., with the addressed physical/logical device or with a\nparticular port).  The value is represented in the same format\nas is contained in the identifier's Identification Descriptor\nwithin the logical unit's Device Identification Page.")
scsiDscLunIdType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 4), ScsiIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdType.setDescription("This object specifies the type of the identifier.\nThe value is represented in the same format as is contained in\nthe identifier's Identification Descriptor within the logical\nunit's Device Identification Page.")
scsiDscLunIdValue = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 5), ScsiIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdValue.setDescription("This object represents the actual value of this identifier.\nThe format is defined by the objects scsiDscLunIdCodeSet,\nscsiDscLunIdAssociation, scsiDscLunIdType.\nThe value is represented in the same format as is contained in\nthe identifier's Identification Descriptor within the logical\nunit's Device Identification Page.")
scsiAttTgtPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4))
if mibBuilder.loadTexts: scsiAttTgtPortTable.setDescription("This table includes all the remote (not in the local system)\nSCSI target ports that are currently attached to each local\nSCSI initiator port of this SCSI instance.")
scsiAttTgtPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"), (0, "SCSI-MIB", "scsiAttTgtPortIndex"))
if mibBuilder.loadTexts: scsiAttTgtPortEntry.setDescription("An entry (row) represents a remote SCSI target port\n(scsiAttTgtPortIndex) currently attached to a particular\nSCSI initiator port (scsiPortIndex) of a particular SCSI\ninitiator device within a particular SCSI instance.")
scsiAttTgtPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1, 1), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiAttTgtPortIndex.setDescription("An arbitrary integer used to uniquely identify a particular\nSCSI target currently attached to a particular SCSI initiator\nport of a particular SCSI initiator device within a particular\nSCSI instance.")
scsiAttTgtPortDscTgtIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1, 2), ScsiIndexValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortDscTgtIdx.setDescription("This object contains the value of the scsiDscTgtIntrPortIndex\nindex variable for the row in the scsiDscTgtTable representing\nthis currently attached SCSI target port.  If the currently\nattached SCSI target port is not represented in the\nscsiDscTgtTable, then the value of this object is zero.")
scsiAttTgtPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1, 3), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortName.setDescription("This object contains the name of the attached SCSI target\nport.")
scsiAttTgtPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1, 4), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortIdentifier.setDescription("This object contains the identifier of the attached SCSI\ntarget port.")
scsiTargetDevice = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 3))
scsiTgtDevTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 3, 1))
if mibBuilder.loadTexts: scsiTgtDevTable.setDescription("This table contains information about each local SCSI target\ndevice.")
scsiTgtDevEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiTgtDevEntry.setDescription("An entry (row) containing information applicable to a\nparticular local SCSI target device within a particular SCSI\ninstance.")
scsiTgtDevNumberOfLUs = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevNumberOfLUs.setDescription("This object is the number of logical units accessible via this\nlocal SCSI target device.")
scsiTgtDeviceStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,4,6,7,1,8,5,)).subtype(namedValues=NamedValues(("unknown", 1), ("available", 2), ("broken", 3), ("readying", 4), ("abnormal", 5), ("nonAddrFailure", 6), ("nonAddrFailReadying", 7), ("nonAddrFailAbnormal", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDeviceStatus.setDescription("This object represents the status of this SCSI device,\nsummarizing the state of both the addressable devices (i.e.,\nthe logical units) and the non-addressable devices within this\nSCSI device:\n     - unknown(1): This value is used when the status cannot be\n     determined\n     - available(2): All addressable and non-addressable\n     devices within the SCSI device are fully operational (i.e.,\n     no logical units have an abnormal status).\n     - broken(3): The SCSI device is not operational and cannot\n     be made operational without external intervention.\n     - readying(4): One or more logical units within the SCSI\n     device are being initialized and access to the SCSI device\n     is temporarily limited (i.e., one or more of the logical\n     units have a readying status).\n     - abnormal(5): One or more addressable devices within the\n     SCSI device are indicating a status other than available;\n     nevertheless, the SCSI device is operational (i.e., one or\n     more of the logical units have an abnormal status).\n     - nonAddrFailure(6): One or more non-addressable devices\n     within the SCSI device have failed; nevertheless, the SCSI\n     device is operational (i.e., no logical units have an\n     abnormal or readying status).\n\n\n\n     - nonAddrFailReadying(7): One or more non-addressable\n     devices within the SCSI device have failed; nevertheless,\n     one or more logical units within the SCSI device are being\n     initialized and access to the SCSI device is temporarily\n     limited.\n     - nonAddrFailAbnormal(8): One or more non-addressable\n     devices within the SCSI device have failed and one or more\n     addressable devices within the SCSI device are indicating a\n     status other than available; however, the SCSI device is\n     operational.")
scsiTgtDevNonAccessibleLUs = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevNonAccessibleLUs.setDescription("This object is the number of logical units existing but not\ncurrently accessible via this local SCSI target device.")
scsiTgtDevResets = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevResets.setDescription("This object counts the number of hard resets encountered\nby this SCSI target device.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system.")
scsiTgtPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 3, 2))
if mibBuilder.loadTexts: scsiTgtPortTable.setDescription("This table includes all the local SCSI target ports of all the\nlocal SCSI target devices.")
scsiTgtPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiTgtPortEntry.setDescription("An entry (row) containing information applicable to a\nparticular local SCSI target port of a particular local SCSI\ntarget device within a particular SCSI instance.")
scsiTgtPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 1), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortName.setDescription("This object represents the name of the port assigned for use\nin the SCSI protocol.")
scsiTgtPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 2), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortIdentifier.setDescription("This object represents the identifier of the port in one of\nthe format(s) appropriate for the type of transport.")
scsiTgtPortInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortInCommands.setDescription("This object represents the number of commands received by this\nSCSI target port.\n\n\n\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system.")
scsiTgtPortWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortWrittenMegaBytes.setDescription("This object represents the amount of data written in megabytes\nby this SCSI target port.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system.")
scsiTgtPortReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortReadMegaBytes.setDescription("This object represents the amount of data read in megabytes by\nthis SCSI target port.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system.")
scsiTgtPortHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortHSInCommands.setDescription("This object represents the number of commands received.  This\nobject provides support for systems that can quickly generate a\nlarge number of commands because they run at high speed.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system.")
scsiRemoteIntrDev = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 3, 3))
scsiAuthorizedIntrTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1))
if mibBuilder.loadTexts: scsiAuthorizedIntrTable.setDescription("This table includes all the authorized SCSI initiator devices\nor ports that may attach a SCSI target device\n(ScsiAuthIntrTgtPortIndex = 0) or port (ScsiAuthIntrTgtPortIndex\ndifferent than 0) of the local SCSI instance.  Statistics are\nkept for each such authorization; thus, the authorizations\nshould be configured in the manner that will cause the desired\nset of statistics to be collected and that will determine the\ncorrect LUN map.")
scsiAuthorizedIntrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiAuthIntrTgtPortIndex"), (0, "SCSI-MIB", "scsiAuthIntrIndex"))
if mibBuilder.loadTexts: scsiAuthorizedIntrEntry.setDescription("An entry (row) represents a remote SCSI initiator port or\nremote SCSI initiator device that may attach to the local SCSI\ntarget port or device within a particular SCSI instance.\nThe StorageType of a row in this table is specified by the\ninstance of scsiInstStorageType that is INDEXed by the same\nvalue of scsiInstIndex.")
scsiAuthIntrTgtPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 1), ScsiPortIndexValueOrZero()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiAuthIntrTgtPortIndex.setDescription("This object contains either the index of the port or zero, to\nindicate any port, on the particular local SCSI target device.")
scsiAuthIntrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 2), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiAuthIntrIndex.setDescription("This object is an arbitrary integer used to uniquely identify\na SCSI initiator device or port that is authorized to attach\nto a particular local SCSI target device or port of a particular\nSCSI instance.")
scsiAuthIntrDevOrPort = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 3), ScsiDeviceOrPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrDevOrPort.setDescription("This object specifies whether this entry refers to a remote\nSCSI initiator port or to a SCSI initiator device.\nA value of device(1) means that the authorized remote initiator\nis a SCSI initiator device and includes all of its ports.\nA value of port(2) means that the authorized remote initiator\nis a SCSI initiator port.")
scsiAuthIntrName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 4), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrName.setDescription("This object represents the name of the remote SCSI initiator\ndevice or port authorized by this row.")
scsiAuthIntrLunMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 5), ScsiIndexValueOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrLunMapIndex.setDescription("This object identifies the set of entries in the\nscsiLunMapTable for which scsiLunMapIndex has the same value as\nthe value of this object.  The identified set of entries\n\n\n\nconstitutes the LUN map to be used for accessing logical units\nwhen the remote SCSI initiator port or device corresponding to\nthis entry is attached to any local SCSI target port or device\ncorresponding to this entry.\nNote that this object has a value of zero if this entry should\nuse the default LUN map.")
scsiAuthIntrAttachedTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrAttachedTimes.setDescription("This object indicates the number of times that this remote\nSCSI initiator device or port has transitioned from unattached\nto attached to this local SCSI target device or port.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiAuthIntrLastCreation.")
scsiAuthIntrOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrOutCommands.setDescription("This object indicates the number of commands that the remote\nSCSI initiator device or port corresponding to this entry has\nsent to the local SCSI target device or port corresponding to\nthis entry.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiAuthIntrLastCreation.")
scsiAuthIntrReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrReadMegaBytes.setDescription("This object indicates the amount of data in megabytes that\nthe remote SCSI initiator device or port corresponding to this\nentry has read from the local SCSI target device or port\ncorresponding to this entry.\nDiscontinuities in the value of this counter can occur at re-\n\n\n\ninitialization of the management system, and at other times as\nindicated by the value of scsiAuthIntrLastCreation.")
scsiAuthIntrWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrWrittenMegaBytes.setDescription("This object indicates the amount of data in megabytes that the\nremote SCSI initiator device or port corresponding to this\nentry has written to the local SCSI target device or port\ncorresponding to this entry.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiAuthIntrLastCreation.")
scsiAuthIntrHSOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrHSOutCommands.setDescription("This object represents the number of commands sent by the\nremote SCSI initiator device or port corresponding to this\nentry to the local SCSI target device or port corresponding to\nthis entry.  This object provides support for systems that can\nquickly generate a large number of commands because they run at\nhigh speed.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiAuthIntrLastCreation.")
scsiAuthIntrLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrLastCreation.setDescription("This object indicates the value of sysUpTime when this row was\nlast created.")
scsiAuthIntrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrRowStatus.setDescription("This object allows an administrator to create or delete this\nentry.\nA newly created row cannot be made active until a value has\nbeen set for scsiAuthIntrName.  In this case, the value of the\ncorresponding instance of the scsiAuthIntrRowStatus column will\nstay 'notReady'.\nThe RowStatus TC [RFC2579] requires that this DESCRIPTION\nclause states under which circumstances other objects in this\nrow can be modified:\nThe value of this object has no effect on whether other objects\nin this conceptual row can be modified.")
scsiAttIntrPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2))
if mibBuilder.loadTexts: scsiAttIntrPortTable.setDescription("This table includes all the remote SCSI initiator ports that\nare currently attached to a local SCSI target port of all local\ndevices within all SCSI instances.")
scsiAttIntrPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"), (0, "SCSI-MIB", "scsiAttIntrPortIndex"))
if mibBuilder.loadTexts: scsiAttIntrPortEntry.setDescription("An entry (row) represents a remote SCSI initiator port\ncurrently attached to a particular local SCSI target port of a\nparticular SCSI target device of a particular SCSI instance.")
scsiAttIntrPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1, 1), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiAttIntrPortIndex.setDescription("This object represents an arbitrary integer used to uniquely\nidentify a particular attached remote initiator port to a\nparticular SCSI target port within a particular SCSI target\ndevice within a particular SCSI instance.")
scsiAttIntrPortAuthIntrIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1, 2), ScsiIndexValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPortAuthIntrIdx.setDescription("This object is the corresponding index in the\nscsiAuthorizedIntrTable for this current attached remote\nSCSI initiator device or zero if this remote attached SCSI\ninitiator device is not configured in that table.")
scsiAttIntrPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1, 3), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPortName.setDescription("This object represents the name of the remote SCSI initiator\ndevice attached to this local SCSI target port.")
scsiAttIntrPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1, 4), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPortIdentifier.setDescription("This object represents the identifier of the remote SCSI\ninitiator device attached to this local SCSI target port.")
scsiLogicalUnit = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 4))
scsiLuTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 4, 1))
if mibBuilder.loadTexts: scsiLuTable.setDescription("This table contains the logical units exposed by local SCSI\ntarget devices.\n\n\n\nIt includes attributes for the World Wide Name (WWN),\nscsiLuVendorId, scsiLuProductId, and scsiLuRevisionId, which may\nalso appear in the scsiLuIdTable.  If an implementation exposes\na WWN as a LuIdTable entry, it must match the scsiLuWwnName in\nthis table.  If an implementation exposes a (vendor, product,\nrevision) identifier as an LuIdTable entry, each of these fields\nmust match the scsiLuVendorId, scsiLuProductId, and\nscsiLuRevisionId attributes in this table.")
scsiLuEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLuIndex"))
if mibBuilder.loadTexts: scsiLuEntry.setDescription("An entry (row) contains information applicable to a particular\nlogical unit of a particular local SCSI target device within a\nparticular SCSI instance.")
scsiLuIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 1), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiLuIndex.setDescription("This object represents an arbitrary integer used to uniquely\nidentify a particular logical unit within a particular SCSI\ntarget device within a particular SCSI instance.")
scsiLuDefaultLun = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 2), ScsiLUN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuDefaultLun.setDescription("This object represents the default Logical Unit Number (LUN)\nfor this logical unit; if a SCSI initiator device has not been\nconfigured to view this logical unit via an entry in the\nScsiLunMapTable, the LU will be visible as scsiLuDefaultLun.\nIf this logical unit does not have a default LUN, it will only\nbe visible if specified via the ScsiLunMapTable, and this\nobject will contain a zero-length string.")
scsiLuWwnName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 3), ScsiLuNameOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuWwnName.setDescription("This object represents the World Wide Name of this LU that is\nthe device identifier of the Vital Product Data (VPD) page name;\nif there is no WWN for this LU, this object will contain a\nzero-length string.  If there is more than one identifier, they\nwill be listed in the scsiLuIdTable and this object will contain\na zero-length string.")
scsiLuVendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuVendorId.setDescription("This object represents a string identifying the vendor of this\nLU as reported in the Standard INQUIRY data.")
scsiLuProductId = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuProductId.setDescription("This object represents a string identifying the product for\nthis LU as reported in the Standard INQUIRY data.")
scsiLuRevisionId = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuRevisionId.setDescription("This object represents a string defining the product revision\nof this LU as reported in the Standard INQUIRY data.")
scsiLuPeripheralType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuPeripheralType.setDescription("This object is the value returned by SCSI Standard INQUIRY\ndata.  It can be: direct-access device, sequential-access\ndevice, printer, communication device and so on.\nThe values that can be returned here are defined in SCSI\nPrimary Commands -2.")
scsiLuStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,6,4,5,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 3), ("broken", 4), ("readying", 5), ("abnormal", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuStatus.setDescription("This object represents the status of this logical unit:\n- unknown(1): The status of this logical unit cannot be\ndetermined.\n- available(2): The logical unit is fully operational (i.e.,\naccepts media access SCSI commands and has no state\ninformation to report).\n- notAvailable(3): The logical unit is capable of being\nsupported but is not available (i.e., no logical unit is\ncurrently present or the logical unit is present but not\nconfigured for use).\n- broken(4): The logical unit has failed and cannot respond\nto SCSI commands.\n- readying(5): The logical unit is being initialized and\n\n\n\naccess is temporarily limited.\n- abnormal(6): The logical unit has state information\navailable that indicates it is operating with limits.  The\nscsiLuState indicates what those limits are.")
scsiLuState = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 9), Bits().subtype(namedValues=NamedValues(("dataLost", 0), ("dynamicReconfigurationInProgress", 1), ("verifyInProgress", 10), ("exposed", 2), ("fractionallyExposed", 3), ("partiallyExposed", 4), ("protectedRebuild", 5), ("protectionDisabled", 6), ("rebuild", 7), ("recalculate", 8), ("spareInUse", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuState.setDescription("This object represents the state of a logical unit and its\nmeaning according to the bit position:\n     0 Data lost: Within the logical unit data has been lost.\n     1 Dynamic reconfiguration in progress: The logical unit is\n          being reconfigured.  In this state all data is still\n          protected.\n     2 Exposed: Within the logical unit data is not protected.\n          In this state all data is still valid; however, loss\n          of data or data availability is unavoidable in the\n          event of a failure.\n     3 Fractionally exposed: Within the logical unit part of\n          the data is not protected.  In this state all data is\n          still valid; however, a failure may cause a loss of\n          data or a loss of data availability.\n     4 Partially exposed: Within the logical unit one or more\n          underlying storage devices have failed.  In this state\n          all data is still protected.\n     5 Protected rebuild: The logical unit is in the process of\n          a rebuild operation.  In this state all data is\n          protected.\n     6 Protection disabled: Within the logical unit the data\n\n\n\n          protection method has been disabled.\n          In this state all data is still valid; however,\n          loss of data or data availability is unavoidable\n          in the event of a failure.\n     7 Rebuild: The data protection method is in the process of\n          rebuilding data.  In this state data is not protected.\n     8 Recalculate: The logical unit is in the process of a\n          recalculate operation.\n     9 Spare in use: Within the logical unit a storage device\n          in full or part is being used to store data.  In this\n          state all data is still protected.\n     10 Verify in progress: Within the logical unit data is\n          being verified.")
scsiLuInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuInCommands.setDescription("This object represents the number of commands received by this\nlogical unit.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiLuLastCreation.")
scsiLuReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuReadMegaBytes.setDescription("This object represents the amount of data in megabytes read\nfrom this logical unit.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiLuLastCreation.")
scsiLuWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuWrittenMegaBytes.setDescription("This object represents the amount of data in megabytes written\nto this logical unit.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiLuLastCreation.")
scsiLuInResets = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuInResets.setDescription("This object represents the number of times that this logical\nunit received\n- a LOGICAL UNIT RESET or TARGET RESET task management request,\nor\n- any other SCSI transport protocol-specific action or event\nthat causes a Logical Unit Reset or a Hard Reset at a SCSI\ntarget port of the containing device\n([SAM2] Chapters 5.9.6, 5.9.7).\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiLuLastCreation.")
scsiLuOutTaskSetFullStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuOutTaskSetFullStatus.setDescription("This object represents the number of Task Set full statuses\nissued for this logical unit.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiLuLastCreation.")
scsiLuHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuHSInCommands.setDescription("This object represents the number of commands received by this\nlogical unit.  This object provides support for systems that can\nquickly generate a large number of commands because they run at\nhigh speed.\nDiscontinuities in the value of this counter can occur at re-\ninitialization of the management system, and at other times as\nindicated by the value of scsiLuLastCreation.")
scsiLuLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuLastCreation.setDescription("This object indicates the value of sysUpTime when this row was\nlast created.")
scsiLuIdTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 4, 2))
if mibBuilder.loadTexts: scsiLuIdTable.setDescription("A table of identifiers for all logical units exposed by the\nlocal SCSI target device.")
scsiLuIdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLuIndex"), (0, "SCSI-MIB", "scsiLuIdIndex"))
if mibBuilder.loadTexts: scsiLuIdEntry.setDescription("An entry (row) containing information applicable to a\nparticular identifier for a particular logical unit of a\nparticular SCSI target device within a particular SCSI\ninstance.")
scsiLuIdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 1), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiLuIdIndex.setDescription("This object represents an arbitrary integer used to uniquely\nidentify a particular LU identifier within a particular logical\nunit within a particular SCSI target device within a particular\nSCSI instance.")
scsiLuIdCodeSet = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 2), ScsiIdCodeSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdCodeSet.setDescription("This object specifies the code set in use with this\nidentifier.  The value is represented in the same format as is\ncontained in the identifier's Identification Descriptor within\nthe logical unit's Device Identification Page.")
scsiLuIdAssociation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 3), ScsiIdAssociation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdAssociation.setDescription("This object specifies what the identifier is associated with\n(e.g., with the addressed physical/logical device or with a\nparticular port).  The value is represented in the same format\nas is contained in the identifier's Identification Descriptor\nwithin the logical unit's Device Identification Page.")
scsiLuIdType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 4), ScsiIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdType.setDescription("This object specifies the type of the identifier.\n\n\n\nThe value is represented in the same format as is contained in\nthe identifier's Identification Descriptor within the logical\nunit's Device Identification Page.")
scsiLuIdValue = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 5), ScsiIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdValue.setDescription("This object represents the actual value of this identifier.\nThe format is defined by the objects scsiLuIdCodeSet,\nscsiLuIdAssociation, scsiLuIdType.\nThe value is represented in the same format as is contained in\nthe identifier's Identification Descriptor within the logical\nunit's Device Identification Page.")
scsiLunMapTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 4, 3))
if mibBuilder.loadTexts: scsiLunMapTable.setDescription("This table provides the ability to present a logical unit\nusing different Logical Unit Numbers for different SCSI\ninitiator devices.\nThis table provides a mapping between a logical unit and a\nLogical Unit Number, and can be referenced by a\nScsiAuthorizedIntrEntry to specify the LUN map for that\ninitiator.")
scsiLunMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1)).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLunMapIndex"), (0, "SCSI-MIB", "scsiLunMapLun"))
if mibBuilder.loadTexts: scsiLunMapEntry.setDescription("An entry containing information about the mapping of a\n\n\n\nparticular logical unit to a particular LUN.  The set of\nentries that all have the same values of scsiInstIndex,\nscsiDeviceIndex and scsiLunMapIndex constitutes a LUN map\nwithin a particular SCSI instance.\nThe StorageType of a row in this table is specified by\nthe instance of scsiInstStorageType that is INDEX-ed by\nthe same value of scsiInstIndex.")
scsiLunMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1, 1), ScsiIndexValue()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiLunMapIndex.setDescription("This object represents an arbitrary integer used to uniquely\nidentify a particular LunMap within a particular SCSI target\ndevice within a particular SCSI instance.")
scsiLunMapLun = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1, 2), ScsiLUN()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: scsiLunMapLun.setDescription("This object specifies the Logical Unit Number, to which a\nlogical unit is mapped by this row.")
scsiLunMapLuIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1, 3), ScsiIndexValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLunMapLuIndex.setDescription("This object identifies the logical unit for which the value of\nscsiLuIndex is the same as the value of this object.  The\nidentified logical unit is the one mapped to a LUN by this\nrow.")
scsiLunMapRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLunMapRowStatus.setDescription("This object allows an administrator to create and delete this\nentry.")
scsiConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 3))
scsiCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 3, 1))
scsiGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 3, 2))

# Augmentions

# Notifications

scsiTgtDeviceStatusChanged = NotificationType((1, 3, 6, 1, 2, 1, 139, 0, 0, 1)).setObjects(*(("SCSI-MIB", "scsiTgtDeviceStatus"), ) )
if mibBuilder.loadTexts: scsiTgtDeviceStatusChanged.setDescription("This notification will be generated for each occurrence of the\nabnormal status (e.g., if the SCSI target device's current\nstatus is abnormal) providing that the SCSI instance's value of\nscsiInstScsiNotificationsEnable is enabled.\nAn SNMP agent implementing the SCSI MIB module should not send\nmore than three SCSI identical notifications in any 10-second\nperiod.")
scsiLuStatusChanged = NotificationType((1, 3, 6, 1, 2, 1, 139, 0, 0, 2)).setObjects(*(("SCSI-MIB", "scsiLuStatus"), ) )
if mibBuilder.loadTexts: scsiLuStatusChanged.setDescription("This notification will be generated each time that\nscsiLuStatus changes providing that the SCSI instance's value\nof scsiInstScsiNotificationsEnable is enabled.\nAn SNMP agent implementing the SCSI MIB module should not send\nmore than three SCSI identical notifications in any 10-second\nperiod.")

# Groups

scsiDeviceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 1)).setObjects(*(("SCSI-MIB", "scsiDeviceRole"), ("SCSI-MIB", "scsiInstAlias"), ("SCSI-MIB", "scsiTransportDevName"), ("SCSI-MIB", "scsiInstSoftwareIndex"), ("SCSI-MIB", "scsiTransportType"), ("SCSI-MIB", "scsiInstScsiNotificationsEnable"), ("SCSI-MIB", "scsiTransportPointer"), ("SCSI-MIB", "scsiInstStorageType"), ("SCSI-MIB", "scsiDevicePortNumber"), ("SCSI-MIB", "scsiDeviceAlias"), ("SCSI-MIB", "scsiPortTransportPtr"), ("SCSI-MIB", "scsiInstVendorVersion"), ("SCSI-MIB", "scsiPortRole"), ) )
if mibBuilder.loadTexts: scsiDeviceGroup.setDescription("A collection of objects providing information about SCSI\ninstances, devices, and ports.")
scsiInitiatorDeviceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 2)).setObjects(*(("SCSI-MIB", "scsiAttTgtPortDscTgtIdx"), ("SCSI-MIB", "scsiIntrPortIdentifier"), ("SCSI-MIB", "scsiAttTgtPortName"), ("SCSI-MIB", "scsiIntrDevTgtAccessMode"), ("SCSI-MIB", "scsiAttTgtPortIdentifier"), ("SCSI-MIB", "scsiIntrPortName"), ) )
if mibBuilder.loadTexts: scsiInitiatorDeviceGroup.setDescription("This group is relevant for s SCSI initiator device and port.")
scsiDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 3)).setObjects(*(("SCSI-MIB", "scsiDscTgtName"), ("SCSI-MIB", "scsiDscTgtRowStatus"), ("SCSI-MIB", "scsiDscLunIdAssociation"), ("SCSI-MIB", "scsiDscTgtDiscovered"), ("SCSI-MIB", "scsiDscTgtLastCreation"), ("SCSI-MIB", "scsiDscLunIdCodeSet"), ("SCSI-MIB", "scsiDscLunIdType"), ("SCSI-MIB", "scsiDscLunLun"), ("SCSI-MIB", "scsiDscLunIdValue"), ("SCSI-MIB", "scsiDscTgtConfigured"), ("SCSI-MIB", "scsiDscTgtDevOrPort"), ) )
if mibBuilder.loadTexts: scsiDiscoveryGroup.setDescription("This group is relevant for the discovered SCSI target devices\nby a SCSI initiator port.")
scsiTargetDeviceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 4)).setObjects(*(("SCSI-MIB", "scsiLuIdType"), ("SCSI-MIB", "scsiTgtDevNumberOfLUs"), ("SCSI-MIB", "scsiAttIntrPortName"), ("SCSI-MIB", "scsiTgtPortName"), ("SCSI-MIB", "scsiLuStatus"), ("SCSI-MIB", "scsiTgtPortIdentifier"), ("SCSI-MIB", "scsiLuWwnName"), ("SCSI-MIB", "scsiLuProductId"), ("SCSI-MIB", "scsiLuLastCreation"), ("SCSI-MIB", "scsiAttIntrPortAuthIntrIdx"), ("SCSI-MIB", "scsiLuState"), ("SCSI-MIB", "scsiTgtDevNonAccessibleLUs"), ("SCSI-MIB", "scsiLuPeripheralType"), ("SCSI-MIB", "scsiLuVendorId"), ("SCSI-MIB", "scsiLuRevisionId"), ("SCSI-MIB", "scsiLuDefaultLun"), ("SCSI-MIB", "scsiTgtDeviceStatus"), ("SCSI-MIB", "scsiAttIntrPortIdentifier"), ("SCSI-MIB", "scsiLuIdValue"), ("SCSI-MIB", "scsiLuIdAssociation"), ("SCSI-MIB", "scsiLuIdCodeSet"), ) )
if mibBuilder.loadTexts: scsiTargetDeviceGroup.setDescription("This group is relevant for a SCSI target device and port.")
scsiLunMapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 5)).setObjects(*(("SCSI-MIB", "scsiLunMapLuIndex"), ("SCSI-MIB", "scsiAuthIntrLastCreation"), ("SCSI-MIB", "scsiAuthIntrRowStatus"), ("SCSI-MIB", "scsiLunMapRowStatus"), ("SCSI-MIB", "scsiAuthIntrName"), ("SCSI-MIB", "scsiAuthIntrLunMapIndex"), ("SCSI-MIB", "scsiAuthIntrDevOrPort"), ) )
if mibBuilder.loadTexts: scsiLunMapGroup.setDescription("This group is a collection of attributes regarding the mapping\nbetween Logical Unit Number, logical unit, and target device.")
scsiTargetDevStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 6)).setObjects(*(("SCSI-MIB", "scsiLuOutTaskSetFullStatus"), ("SCSI-MIB", "scsiLuReadMegaBytes"), ("SCSI-MIB", "scsiTgtPortInCommands"), ("SCSI-MIB", "scsiTgtPortReadMegaBytes"), ("SCSI-MIB", "scsiLuWrittenMegaBytes"), ("SCSI-MIB", "scsiLuInCommands"), ("SCSI-MIB", "scsiLuInResets"), ("SCSI-MIB", "scsiTgtDevResets"), ("SCSI-MIB", "scsiTgtPortWrittenMegaBytes"), ) )
if mibBuilder.loadTexts: scsiTargetDevStatsGroup.setDescription("This group is a collection of statistics for all\nimplementations of the SCSI MIB module that contain SCSI target\ndevices.")
scsiTargetDevHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 7)).setObjects(*(("SCSI-MIB", "scsiTgtPortHSInCommands"), ("SCSI-MIB", "scsiLuHSInCommands"), ) )
if mibBuilder.loadTexts: scsiTargetDevHSStatsGroup.setDescription("This group is a collection of high speed statistics for all\nimplementations of the SCSI MIB module that contain SCSI target\ndevices.")
scsiLunMapStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 8)).setObjects(*(("SCSI-MIB", "scsiAuthIntrAttachedTimes"), ("SCSI-MIB", "scsiAuthIntrWrittenMegaBytes"), ("SCSI-MIB", "scsiAuthIntrOutCommands"), ("SCSI-MIB", "scsiAuthIntrReadMegaBytes"), ) )
if mibBuilder.loadTexts: scsiLunMapStatsGroup.setDescription("This group is a collection of statistics regarding SCSI\ninitiator devices authorized to attach local logical unit and\nSCSI target device.")
scsiLunMapHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 9)).setObjects(*(("SCSI-MIB", "scsiAuthIntrHSOutCommands"), ) )
if mibBuilder.loadTexts: scsiLunMapHSStatsGroup.setDescription("This group is a collection of high speed statistics regarding\nSCSI initiator devices authorized to attach local logical unit\nand SCSI target device.")
scsiInitiatorDevStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 10)).setObjects(*(("SCSI-MIB", "scsiIntrPortWrittenMegaBytes"), ("SCSI-MIB", "scsiIntrPortReadMegaBytes"), ("SCSI-MIB", "scsiIntrPortOutCommands"), ("SCSI-MIB", "scsiIntrDevOutResets"), ) )
if mibBuilder.loadTexts: scsiInitiatorDevStatsGroup.setDescription("This group is a collection of statistics for all\nimplementations of the SCSI MIB module that contain SCSI\ninitiator devices.")
scsiInitiatorDevHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 11)).setObjects(*(("SCSI-MIB", "scsiIntrPortHSOutCommands"), ) )
if mibBuilder.loadTexts: scsiInitiatorDevHSStatsGroup.setDescription("This group is a collection of high speed statistics for all\n\n\n\nimplementations of the SCSI MIB module that contain SCSI\ninitiator devices.")
scsiDiscoveryStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 12)).setObjects(*(("SCSI-MIB", "scsiDscTgtInCommands"), ("SCSI-MIB", "scsiDscTgtReadMegaBytes"), ("SCSI-MIB", "scsiDscTgtWrittenMegaBytes"), ) )
if mibBuilder.loadTexts: scsiDiscoveryStatsGroup.setDescription("This group is a collection of statistics for all\nimplementations of the SCSI MIB module that contain discovered\nSCSI initiator devices.")
scsiDiscoveryHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 13)).setObjects(*(("SCSI-MIB", "scsiDscTgtHSInCommands"), ) )
if mibBuilder.loadTexts: scsiDiscoveryHSStatsGroup.setDescription("This group is a collection of high speed statistics for all\nimplementations of the SCSI MIB module that contain discovered\nSCSI initiator devices.")
scsiDeviceStatGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 14)).setObjects(*(("SCSI-MIB", "scsiPortBusyStatuses"), ) )
if mibBuilder.loadTexts: scsiDeviceStatGroup.setDescription("A collection of statistics regarding SCSI devices and\nports.")
scsiTgtDevLuNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 15)).setObjects(*(("SCSI-MIB", "scsiLuStatusChanged"), ("SCSI-MIB", "scsiTgtDeviceStatusChanged"), ) )
if mibBuilder.loadTexts: scsiTgtDevLuNotificationsGroup.setDescription("A collection of notifications regarding status change of SCSI\ntarget devices and logical units.")

# Compliances

scsiCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 139, 3, 1, 1)).setObjects(*(("SCSI-MIB", "scsiLunMapHSStatsGroup"), ("SCSI-MIB", "scsiDeviceStatGroup"), ("SCSI-MIB", "scsiDeviceGroup"), ("SCSI-MIB", "scsiTargetDeviceGroup"), ("SCSI-MIB", "scsiInitiatorDevHSStatsGroup"), ("SCSI-MIB", "scsiDiscoveryGroup"), ("SCSI-MIB", "scsiInitiatorDeviceGroup"), ("SCSI-MIB", "scsiTargetDevHSStatsGroup"), ("SCSI-MIB", "scsiDiscoveryHSStatsGroup"), ("SCSI-MIB", "scsiTargetDevStatsGroup"), ("SCSI-MIB", "scsiInitiatorDevStatsGroup"), ("SCSI-MIB", "scsiTgtDevLuNotificationsGroup"), ("SCSI-MIB", "scsiLunMapGroup"), ("SCSI-MIB", "scsiLunMapStatsGroup"), ("SCSI-MIB", "scsiDiscoveryStatsGroup"), ) )
if mibBuilder.loadTexts: scsiCompliance.setDescription("Describes the requirements for compliance to this SCSI MIB\nmodule.\nIf an implementation can be both a SCSI target device and a SCSI\ninitiator device, all groups are mandatory.")

# Exports

# Module identity
mibBuilder.exportSymbols("SCSI-MIB", PYSNMP_MODULE_ID=scsiMIB)

# Types
mibBuilder.exportSymbols("SCSI-MIB", ScsiDeviceOrPort=ScsiDeviceOrPort, ScsiHrSWInstalledIndexOrZero=ScsiHrSWInstalledIndexOrZero, ScsiIdAssociation=ScsiIdAssociation, ScsiIdCodeSet=ScsiIdCodeSet, ScsiIdType=ScsiIdType, ScsiIdValue=ScsiIdValue, ScsiIdentifier=ScsiIdentifier, ScsiIndexValue=ScsiIndexValue, ScsiIndexValueOrZero=ScsiIndexValueOrZero, ScsiLUN=ScsiLUN, ScsiLuNameOrZero=ScsiLuNameOrZero, ScsiName=ScsiName, ScsiPortIndexValueOrZero=ScsiPortIndexValueOrZero)

# Objects
mibBuilder.exportSymbols("SCSI-MIB", scsiMIB=scsiMIB, scsiNotifications=scsiNotifications, scsiNotificationsPrefix=scsiNotificationsPrefix, scsiAdmin=scsiAdmin, scsiTransportTypes=scsiTransportTypes, scsiTransportOther=scsiTransportOther, scsiTransportSPI=scsiTransportSPI, scsiTransportFCP=scsiTransportFCP, scsiTransportSRP=scsiTransportSRP, scsiTransportISCSI=scsiTransportISCSI, scsiTransportSBP=scsiTransportSBP, scsiTransportSAS=scsiTransportSAS, scsiObjects=scsiObjects, scsiGeneral=scsiGeneral, scsiInstanceTable=scsiInstanceTable, scsiInstanceEntry=scsiInstanceEntry, scsiInstIndex=scsiInstIndex, scsiInstAlias=scsiInstAlias, scsiInstSoftwareIndex=scsiInstSoftwareIndex, scsiInstVendorVersion=scsiInstVendorVersion, scsiInstScsiNotificationsEnable=scsiInstScsiNotificationsEnable, scsiInstStorageType=scsiInstStorageType, scsiDeviceTable=scsiDeviceTable, scsiDeviceEntry=scsiDeviceEntry, scsiDeviceIndex=scsiDeviceIndex, scsiDeviceAlias=scsiDeviceAlias, scsiDeviceRole=scsiDeviceRole, scsiDevicePortNumber=scsiDevicePortNumber, scsiPortTable=scsiPortTable, scsiPortEntry=scsiPortEntry, scsiPortIndex=scsiPortIndex, scsiPortRole=scsiPortRole, scsiPortTransportPtr=scsiPortTransportPtr, scsiPortBusyStatuses=scsiPortBusyStatuses, scsiTransportTable=scsiTransportTable, scsiTransportEntry=scsiTransportEntry, scsiTransportIndex=scsiTransportIndex, scsiTransportType=scsiTransportType, scsiTransportPointer=scsiTransportPointer, scsiTransportDevName=scsiTransportDevName, scsiInitiatorDevice=scsiInitiatorDevice, scsiIntrDevTable=scsiIntrDevTable, scsiIntrDevEntry=scsiIntrDevEntry, scsiIntrDevTgtAccessMode=scsiIntrDevTgtAccessMode, scsiIntrDevOutResets=scsiIntrDevOutResets, scsiIntrPortTable=scsiIntrPortTable, scsiIntrPortEntry=scsiIntrPortEntry, scsiIntrPortName=scsiIntrPortName, scsiIntrPortIdentifier=scsiIntrPortIdentifier, scsiIntrPortOutCommands=scsiIntrPortOutCommands, scsiIntrPortWrittenMegaBytes=scsiIntrPortWrittenMegaBytes, scsiIntrPortReadMegaBytes=scsiIntrPortReadMegaBytes, scsiIntrPortHSOutCommands=scsiIntrPortHSOutCommands, scsiRemoteTgtDev=scsiRemoteTgtDev, scsiDscTgtTable=scsiDscTgtTable, scsiDscTgtEntry=scsiDscTgtEntry, scsiDscTgtIntrPortIndex=scsiDscTgtIntrPortIndex, scsiDscTgtIndex=scsiDscTgtIndex, scsiDscTgtDevOrPort=scsiDscTgtDevOrPort, scsiDscTgtName=scsiDscTgtName, scsiDscTgtConfigured=scsiDscTgtConfigured, scsiDscTgtDiscovered=scsiDscTgtDiscovered, scsiDscTgtInCommands=scsiDscTgtInCommands, scsiDscTgtWrittenMegaBytes=scsiDscTgtWrittenMegaBytes, scsiDscTgtReadMegaBytes=scsiDscTgtReadMegaBytes, scsiDscTgtHSInCommands=scsiDscTgtHSInCommands, scsiDscTgtLastCreation=scsiDscTgtLastCreation, scsiDscTgtRowStatus=scsiDscTgtRowStatus, scsiDscLunTable=scsiDscLunTable, scsiDscLunEntry=scsiDscLunEntry, scsiDscLunIndex=scsiDscLunIndex, scsiDscLunLun=scsiDscLunLun, scsiDscLunIdTable=scsiDscLunIdTable, scsiDscLunIdEntry=scsiDscLunIdEntry, scsiDscLunIdIndex=scsiDscLunIdIndex, scsiDscLunIdCodeSet=scsiDscLunIdCodeSet, scsiDscLunIdAssociation=scsiDscLunIdAssociation, scsiDscLunIdType=scsiDscLunIdType, scsiDscLunIdValue=scsiDscLunIdValue, scsiAttTgtPortTable=scsiAttTgtPortTable, scsiAttTgtPortEntry=scsiAttTgtPortEntry, scsiAttTgtPortIndex=scsiAttTgtPortIndex, scsiAttTgtPortDscTgtIdx=scsiAttTgtPortDscTgtIdx, scsiAttTgtPortName=scsiAttTgtPortName, scsiAttTgtPortIdentifier=scsiAttTgtPortIdentifier, scsiTargetDevice=scsiTargetDevice, scsiTgtDevTable=scsiTgtDevTable, scsiTgtDevEntry=scsiTgtDevEntry, scsiTgtDevNumberOfLUs=scsiTgtDevNumberOfLUs, scsiTgtDeviceStatus=scsiTgtDeviceStatus, scsiTgtDevNonAccessibleLUs=scsiTgtDevNonAccessibleLUs, scsiTgtDevResets=scsiTgtDevResets, scsiTgtPortTable=scsiTgtPortTable, scsiTgtPortEntry=scsiTgtPortEntry, scsiTgtPortName=scsiTgtPortName, scsiTgtPortIdentifier=scsiTgtPortIdentifier, scsiTgtPortInCommands=scsiTgtPortInCommands, scsiTgtPortWrittenMegaBytes=scsiTgtPortWrittenMegaBytes, scsiTgtPortReadMegaBytes=scsiTgtPortReadMegaBytes, scsiTgtPortHSInCommands=scsiTgtPortHSInCommands, scsiRemoteIntrDev=scsiRemoteIntrDev, scsiAuthorizedIntrTable=scsiAuthorizedIntrTable, scsiAuthorizedIntrEntry=scsiAuthorizedIntrEntry, scsiAuthIntrTgtPortIndex=scsiAuthIntrTgtPortIndex, scsiAuthIntrIndex=scsiAuthIntrIndex, scsiAuthIntrDevOrPort=scsiAuthIntrDevOrPort, scsiAuthIntrName=scsiAuthIntrName, scsiAuthIntrLunMapIndex=scsiAuthIntrLunMapIndex, scsiAuthIntrAttachedTimes=scsiAuthIntrAttachedTimes, scsiAuthIntrOutCommands=scsiAuthIntrOutCommands, scsiAuthIntrReadMegaBytes=scsiAuthIntrReadMegaBytes, scsiAuthIntrWrittenMegaBytes=scsiAuthIntrWrittenMegaBytes, scsiAuthIntrHSOutCommands=scsiAuthIntrHSOutCommands, scsiAuthIntrLastCreation=scsiAuthIntrLastCreation, scsiAuthIntrRowStatus=scsiAuthIntrRowStatus, scsiAttIntrPortTable=scsiAttIntrPortTable, scsiAttIntrPortEntry=scsiAttIntrPortEntry, scsiAttIntrPortIndex=scsiAttIntrPortIndex, scsiAttIntrPortAuthIntrIdx=scsiAttIntrPortAuthIntrIdx, scsiAttIntrPortName=scsiAttIntrPortName, scsiAttIntrPortIdentifier=scsiAttIntrPortIdentifier, scsiLogicalUnit=scsiLogicalUnit, scsiLuTable=scsiLuTable, scsiLuEntry=scsiLuEntry, scsiLuIndex=scsiLuIndex, scsiLuDefaultLun=scsiLuDefaultLun)
mibBuilder.exportSymbols("SCSI-MIB", scsiLuWwnName=scsiLuWwnName, scsiLuVendorId=scsiLuVendorId, scsiLuProductId=scsiLuProductId, scsiLuRevisionId=scsiLuRevisionId, scsiLuPeripheralType=scsiLuPeripheralType, scsiLuStatus=scsiLuStatus, scsiLuState=scsiLuState, scsiLuInCommands=scsiLuInCommands, scsiLuReadMegaBytes=scsiLuReadMegaBytes, scsiLuWrittenMegaBytes=scsiLuWrittenMegaBytes, scsiLuInResets=scsiLuInResets, scsiLuOutTaskSetFullStatus=scsiLuOutTaskSetFullStatus, scsiLuHSInCommands=scsiLuHSInCommands, scsiLuLastCreation=scsiLuLastCreation, scsiLuIdTable=scsiLuIdTable, scsiLuIdEntry=scsiLuIdEntry, scsiLuIdIndex=scsiLuIdIndex, scsiLuIdCodeSet=scsiLuIdCodeSet, scsiLuIdAssociation=scsiLuIdAssociation, scsiLuIdType=scsiLuIdType, scsiLuIdValue=scsiLuIdValue, scsiLunMapTable=scsiLunMapTable, scsiLunMapEntry=scsiLunMapEntry, scsiLunMapIndex=scsiLunMapIndex, scsiLunMapLun=scsiLunMapLun, scsiLunMapLuIndex=scsiLunMapLuIndex, scsiLunMapRowStatus=scsiLunMapRowStatus, scsiConformance=scsiConformance, scsiCompliances=scsiCompliances, scsiGroups=scsiGroups)

# Notifications
mibBuilder.exportSymbols("SCSI-MIB", scsiTgtDeviceStatusChanged=scsiTgtDeviceStatusChanged, scsiLuStatusChanged=scsiLuStatusChanged)

# Groups
mibBuilder.exportSymbols("SCSI-MIB", scsiDeviceGroup=scsiDeviceGroup, scsiInitiatorDeviceGroup=scsiInitiatorDeviceGroup, scsiDiscoveryGroup=scsiDiscoveryGroup, scsiTargetDeviceGroup=scsiTargetDeviceGroup, scsiLunMapGroup=scsiLunMapGroup, scsiTargetDevStatsGroup=scsiTargetDevStatsGroup, scsiTargetDevHSStatsGroup=scsiTargetDevHSStatsGroup, scsiLunMapStatsGroup=scsiLunMapStatsGroup, scsiLunMapHSStatsGroup=scsiLunMapHSStatsGroup, scsiInitiatorDevStatsGroup=scsiInitiatorDevStatsGroup, scsiInitiatorDevHSStatsGroup=scsiInitiatorDevHSStatsGroup, scsiDiscoveryStatsGroup=scsiDiscoveryStatsGroup, scsiDiscoveryHSStatsGroup=scsiDiscoveryHSStatsGroup, scsiDeviceStatGroup=scsiDeviceStatGroup, scsiTgtDevLuNotificationsGroup=scsiTgtDevLuNotificationsGroup)

# Compliances
mibBuilder.exportSymbols("SCSI-MIB", scsiCompliance=scsiCompliance)
