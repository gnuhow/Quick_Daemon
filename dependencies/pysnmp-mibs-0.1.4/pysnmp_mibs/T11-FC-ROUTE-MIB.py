# PySNMP SMI module. Autogenerated from smidump -f python T11-FC-ROUTE-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:42 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( FcAddressIdOrZero, FcDomainIdOrZero, fcmInstanceIndex, fcmSwitchIndex, ) = mibBuilder.importSymbols("FC-MGMT-MIB", "FcAddressIdOrZero", "FcDomainIdOrZero", "fcmInstanceIndex", "fcmSwitchIndex")
( InterfaceIndex, InterfaceIndexOrZero, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2")
( RowStatus, StorageType, TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "StorageType", "TimeStamp")
( T11FabricIndex, ) = mibBuilder.importSymbols("T11-TC-MIB", "T11FabricIndex")

# Objects

t11FcRouteMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 144)).setRevisions(("2006-08-14 00:00",))
if mibBuilder.loadTexts: t11FcRouteMIB.setOrganization("T11")
if mibBuilder.loadTexts: t11FcRouteMIB.setContactInfo("     Claudio DeSanti\nCisco Systems, Inc.\n170 West Tasman Drive\nSan Jose, CA 95134 USA\nEMail: cds@cisco.com\n\n\nKeith McCloghrie\nCisco Systems, Inc.\n170 West Tasman Drive\nSan Jose, CA USA 95134\nEmail: kzm@cisco.com")
if mibBuilder.loadTexts: t11FcRouteMIB.setDescription("The MIB module for configuring and displaying Fibre\nChannel Route Information.\n\nCopyright (C) The Internet Society (2006).  This version\nof this MIB module is part of RFC 4625;  see the RFC\nitself for full legal notices.")
t11FcRouteNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 144, 0))
t11FcRouteObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 144, 1))
t11FcRouteFabricTable = MibTable((1, 3, 6, 1, 2, 1, 144, 1, 1))
if mibBuilder.loadTexts: t11FcRouteFabricTable.setDescription("The table containing Fibre Channel Routing information\nthat is specific to a Fabric.")
t11FcRouteFabricEntry = MibTableRow((1, 3, 6, 1, 2, 1, 144, 1, 1, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteFabricIndex"))
if mibBuilder.loadTexts: t11FcRouteFabricEntry.setDescription("Each entry contains routing information specific to a\nparticular Fabric on a particular switch (identified by\nvalues of fcmInstanceIndex and fcmSwitchIndex).")
t11FcRouteFabricIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 1, 1, 1), T11FabricIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcRouteFabricIndex.setDescription("A unique index value that uniquely identifies a\nparticular Fabric.\n\nIn a Fabric conformant to FC-SW-3, only a single Fabric\n\n\n\ncan operate within a physical infrastructure, and thus\nthe value of this Fabric Index will always be 1.\n\nIn a Fabric conformant to FC-SW-4, multiple Virtual Fabrics\ncan operate within one (or more) physical infrastructures.\nIn such a case, index value is used to uniquely identify a\nparticular Fabric within a physical infrastructure.")
t11FcRouteFabricLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcRouteFabricLastChange.setDescription("The value of sysUpTime at the most recent time when any\ncorresponding row in the t11FcRouteTable was created,\nmodified, or deleted.  A corresponding row in the\nt11FcRouteTable is for the same management instance,\nthe same switch, and same Fabric as the row in this table.\n\nIf no change has occurred since the last restart of the\nmanagement system, then the value of this object is 0.")
t11FcRouteTable = MibTable((1, 3, 6, 1, 2, 1, 144, 1, 2))
if mibBuilder.loadTexts: t11FcRouteTable.setDescription("The Fibre Channel Routing tables for the\nlocally managed switches.  This table lists all the\nroutes that are configured in and/or computed by any\nlocal switch for any Fabric.\n\nSuch routes are used by a switch to forward frames (of user\ndata) on a Fabric.  The conceptual process is based on\nextracting the Destination Fibre Channel Address Identifier\n(D_ID) out of a received frame (of user data) and comparing\nit to each entry of this table that is applicable to the\ngiven switch and Fabric.  Such comparison consists of first\nperforming a logical-AND of the extracted D_ID with a mask\n(the value of t11FcRouteDestMask) and second comparing the\nresult of that 'AND' operation to the value of\nt11FcRouteDestAddrId.  A similar comparison is made of the\nSource Fibre Channel Address Identifier (S_ID) of a frame\n\n\n\nagainst the t11FcRouteSrcAddrId and t11FcRouteSrcMask values\nof an entry.  If an entry's value of t11FcRouteInInterface\nis non-zero, then a further comparison determines if the\nframe was received on the appropriate interface.  If all of\nthese comparisons for a particular entry are successful,\nthen that entry represents a potential route for forwarding\nthe received frame.\n\nFor entries configured by a user, t11FcRouteProto has\nthe value 'netmgmt'; only entries of this type can be\ndeleted by the user.")
t11FcRouteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 144, 1, 2, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteFabricIndex"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteDestAddrId"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteDestMask"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteSrcAddrId"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteSrcMask"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteInInterface"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteProto"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteOutInterface"))
if mibBuilder.loadTexts: t11FcRouteEntry.setDescription("Each entry contains a route to a particular destination,\npossibly from a particular subset of source addresses,\non a particular Fabric via a particular output interface\nand learned in a particular manner.")
t11FcRouteDestAddrId = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 1), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcRouteDestAddrId.setDescription("The destination Fibre Channel Address Identifier of\nthis route.  A zero-length string for this field is\nnot allowed.")
t11FcRouteDestMask = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 2), FcAddressIdOrZero()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcRouteDestMask.setDescription("The mask to be logical-ANDed with a destination\nFibre Channel Address Identifier before it is compared\nto the value in the t11FcRouteDestAddrId field.\nAllowed values are 255.255.255, 255.255.0, or 255.0.0.\nFSPF's definition generates routes to a Domain_ID,\nso the mask for all FSPF-generated routes is 255.0.0.\nThe zero-length value has the same meaning as 0.0.0.")
t11FcRouteSrcAddrId = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 3), FcAddressIdOrZero()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcRouteSrcAddrId.setDescription("The source Fibre Channel Address Identifier of this\nroute.  Note that if this object and the corresponding\ninstance of t11FcRouteSrcMask both have a value of 0.0.0,\nthen this route matches all source addresses.  The\nzero-length value has the same meaning as 0.0.0.")
t11FcRouteSrcMask = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 4), FcAddressIdOrZero()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcRouteSrcMask.setDescription("The mask to be logical-ANDed with a source\nFibre Channel Address Identifier before it is compared\nto the value in the t11FcRouteSrcAddrId field.  Allowed\nvalues are 255.255.255, 255.255.0, 255.0.0, or 0.0.0.\nThe zero-length value has the same meaning as 0.0.0.")
t11FcRouteInInterface = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 5), InterfaceIndexOrZero()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcRouteInInterface.setDescription("If the value of this object is non-zero, it is the\nvalue of ifIndex that identifies the local\nFibre Channel interface through which a frame\nmust have been received in order to match with\nthis entry.  If the value of this object is zero,\nthe matching does not require that the frame be\nreceived on any specific interface.")
t11FcRouteProto = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,2,3,)).subtype(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("fspf", 4), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcRouteProto.setDescription("The mechanism via which this route was learned:\nother(1)  - not specified\nlocal(2)  - local interface\nnetmgmt(3)- static route\nfspf(4)   - Fibre Shortest Path First")
t11FcRouteOutInterface = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 7), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcRouteOutInterface.setDescription("The value of ifIndex that identifies the local\nFibre Channel interface through which the next hop\nof this route is to be reached.")
t11FcRouteDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 8), FcDomainIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcRouteDomainId.setDescription("The domain_ID of next hop switch.\n\nThis object can have a value of zero if the value\n\n\n\nof t11FcRouteProto is 'local'.")
t11FcRouteMetric = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcRouteMetric.setDescription("The routing metric for this route.\n\nThe use of this object is dependent on t11FcRouteProto.")
t11FcRouteType = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("local", 1), ("remote", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcRouteType.setDescription("The type of route.\n\nlocal(1)  - a route for which the next Fibre Channel\n            port is the final destination;\nremote(2) - a route for which the next Fibre Channel\n           port is not the final destination.")
t11FcRouteIfDown = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("remove", 1), ("retain", 2), )).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcRouteIfDown.setDescription("The value of this object indicates what happens to\nthis route when the output interface (given by the\ncorresponding value of t11FcRouteOutInterface) is\noperationally 'down'.  If this object's value is 'retain',\nthe route is to be retained in this table.  If this\nobject's value is 'remove', the route is to be removed\nfrom this table.")
t11FcRouteStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 12), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcRouteStorageType.setDescription("The storage type for this conceptual row.\nConceptual rows having the value 'permanent' need not\nallow write-access to any columnar objects in the row.")
t11FcRouteRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcRouteRowStatus.setDescription("The status of this conceptual row.\nThe only rows that can be deleted by setting this object to\n'destroy' are those for which t11FcRouteProto has the value\n'netmgmt'.")
t11FcRouteConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 144, 2))
t11FcRouteCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 144, 2, 1))
t11FcRouteGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 144, 2, 2))

# Augmentions

# Groups

t11FcRouteGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 144, 2, 2, 1)).setObjects(*(("T11-FC-ROUTE-MIB", "t11FcRouteRowStatus"), ("T11-FC-ROUTE-MIB", "t11FcRouteIfDown"), ("T11-FC-ROUTE-MIB", "t11FcRouteType"), ("T11-FC-ROUTE-MIB", "t11FcRouteDomainId"), ("T11-FC-ROUTE-MIB", "t11FcRouteMetric"), ("T11-FC-ROUTE-MIB", "t11FcRouteFabricLastChange"), ("T11-FC-ROUTE-MIB", "t11FcRouteStorageType"), ) )
if mibBuilder.loadTexts: t11FcRouteGroup.setDescription("A collection of objects for displaying and configuring\nroutes.")

# Compliances

t11FcRouteCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 144, 2, 1, 1)).setObjects(*(("T11-FC-ROUTE-MIB", "t11FcRouteGroup"), ) )
if mibBuilder.loadTexts: t11FcRouteCompliance.setDescription("The compliance statement for entities that\nimplement the T11-FC-ROUTE-MIB.\n--\n-- Note: The next four OBJECT clauses are for auxiliary objects, and the\n-- SMIv2 does not permit inclusion of objects that are not accessible\n-- in an OBJECT clause (see Sections 3.1 & 5.4.3 in STD 58, RFC 2580).\n-- Thus, these four clauses cannot be included below in the normal\n-- location for OBJECT clauses.\n--\n--      OBJECT     t11FcRouteSrcAddrId\n--      SYNTAX     FcAddressIdOrZero (SIZE (0))\n--      DESCRIPTION\n--             'Support is not required for routes that\n--             match only a subset of possible source\n\n\n\n--             addresses.'\n--\n--      OBJECT     t11FcRouteSrcMask\n--      SYNTAX     FcAddressIdOrZero (SIZE (0))\n--      DESCRIPTION\n--             'Support is not required for routes that\n--             match only a subset of possible source\n--             addresses.'\n--\n--      OBJECT     t11FcRouteDestMask\n--      DESCRIPTION\n--             'Support is mandatory only for FSPF-generated\n--             routes.  Since FSPF's definition generates\n--             routes to a Domain_ID, the mask for all\n--             FSPF-generated routes is 255.0.0.  Thus,\n--             support is only required for 255.0.0.'\n--\n--      OBJECT     t11FcRouteInInterface\n--      SYNTAX     InterfaceIndexOrZero (0)\n--      DESCRIPTION\n--             'Support for routes specific to particular\n--             source interfaces is not required.'")

# Exports

# Module identity
mibBuilder.exportSymbols("T11-FC-ROUTE-MIB", PYSNMP_MODULE_ID=t11FcRouteMIB)

# Objects
mibBuilder.exportSymbols("T11-FC-ROUTE-MIB", t11FcRouteMIB=t11FcRouteMIB, t11FcRouteNotifications=t11FcRouteNotifications, t11FcRouteObjects=t11FcRouteObjects, t11FcRouteFabricTable=t11FcRouteFabricTable, t11FcRouteFabricEntry=t11FcRouteFabricEntry, t11FcRouteFabricIndex=t11FcRouteFabricIndex, t11FcRouteFabricLastChange=t11FcRouteFabricLastChange, t11FcRouteTable=t11FcRouteTable, t11FcRouteEntry=t11FcRouteEntry, t11FcRouteDestAddrId=t11FcRouteDestAddrId, t11FcRouteDestMask=t11FcRouteDestMask, t11FcRouteSrcAddrId=t11FcRouteSrcAddrId, t11FcRouteSrcMask=t11FcRouteSrcMask, t11FcRouteInInterface=t11FcRouteInInterface, t11FcRouteProto=t11FcRouteProto, t11FcRouteOutInterface=t11FcRouteOutInterface, t11FcRouteDomainId=t11FcRouteDomainId, t11FcRouteMetric=t11FcRouteMetric, t11FcRouteType=t11FcRouteType, t11FcRouteIfDown=t11FcRouteIfDown, t11FcRouteStorageType=t11FcRouteStorageType, t11FcRouteRowStatus=t11FcRouteRowStatus, t11FcRouteConformance=t11FcRouteConformance, t11FcRouteCompliances=t11FcRouteCompliances, t11FcRouteGroups=t11FcRouteGroups)

# Groups
mibBuilder.exportSymbols("T11-FC-ROUTE-MIB", t11FcRouteGroup=t11FcRouteGroup)

# Compliances
mibBuilder.exportSymbols("T11-FC-ROUTE-MIB", t11FcRouteCompliance=t11FcRouteCompliance)
