# PySNMP SMI module. Autogenerated from smidump -f python OSPF-TRAP-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:25 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ospf, ospfAddressLessIf, ospfAreaId, ospfAreaNssaTranslatorState, ospfExtLsdbLimit, ospfIfIpAddress, ospfIfState, ospfLsdbAreaId, ospfLsdbLsid, ospfLsdbRouterId, ospfLsdbType, ospfNbrAddressLessIndex, ospfNbrIpAddr, ospfNbrRestartHelperAge, ospfNbrRestartHelperExitReason, ospfNbrRestartHelperStatus, ospfNbrRtrId, ospfNbrState, ospfRestartExitReason, ospfRestartInterval, ospfRestartStatus, ospfRouterId, ospfVirtIfAreaId, ospfVirtIfNeighbor, ospfVirtIfState, ospfVirtNbrArea, ospfVirtNbrRestartHelperAge, ospfVirtNbrRestartHelperExitReason, ospfVirtNbrRestartHelperStatus, ospfVirtNbrRtrId, ospfVirtNbrState, ) = mibBuilder.importSymbols("OSPF-MIB", "ospf", "ospfAddressLessIf", "ospfAreaId", "ospfAreaNssaTranslatorState", "ospfExtLsdbLimit", "ospfIfIpAddress", "ospfIfState", "ospfLsdbAreaId", "ospfLsdbLsid", "ospfLsdbRouterId", "ospfLsdbType", "ospfNbrAddressLessIndex", "ospfNbrIpAddr", "ospfNbrRestartHelperAge", "ospfNbrRestartHelperExitReason", "ospfNbrRestartHelperStatus", "ospfNbrRtrId", "ospfNbrState", "ospfRestartExitReason", "ospfRestartInterval", "ospfRestartStatus", "ospfRouterId", "ospfVirtIfAreaId", "ospfVirtIfNeighbor", "ospfVirtIfState", "ospfVirtNbrArea", "ospfVirtNbrRestartHelperAge", "ospfVirtNbrRestartHelperExitReason", "ospfVirtNbrRestartHelperStatus", "ospfVirtNbrRtrId", "ospfVirtNbrState")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")

# Objects

ospfTrap = ModuleIdentity((1, 3, 6, 1, 2, 1, 14, 16)).setRevisions(("2006-11-10 00:00","1995-01-20 12:25",))
if mibBuilder.loadTexts: ospfTrap.setOrganization("IETF OSPF Working Group")
if mibBuilder.loadTexts: ospfTrap.setContactInfo("WG E-Mail: ospf@ietf.org\n\nWG Chairs: acee@cisco.com\n           rohit@gmail.com\n\nEditors:   Dan Joyal\n           Nortel\n           600 Technology Park Drive\n           Billerica, MA  01821\n           djoyal@nortel.com\n\n           Piotr Galecki\n           Airvana\n           19 Alpha Road\n           Chelmsford, MA 01824\n           pgalecki@airvana.com\n\n           Spencer Giacalone\n           CSFB\n           Eleven Madison Ave\n           New York, NY 10010-3629\n\n\n           spencer.giacalone@gmail.com")
if mibBuilder.loadTexts: ospfTrap.setDescription("The MIB module to describe traps for the OSPF\nVersion 2 Protocol.\n\nCopyright (C) The IETF Trust (2006).\nThis version of this MIB module is part of\nRFC 4750;  see the RFC itself for full legal\nnotices.")
ospfTrapControl = MibIdentifier((1, 3, 6, 1, 2, 1, 14, 16, 1))
ospfSetTrap = MibScalar((1, 3, 6, 1, 2, 1, 14, 16, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfSetTrap.setDescription("A 4-octet string serving as a bit map for\nthe trap events defined by the OSPF traps.  This\nobject is used to enable and disable specific\nOSPF traps where a 1 in the bit field\nrepresents enabled.  The right-most bit (least\nsignificant) represents trap 0.\n\nThis object is persistent and when written\n\n\n\nthe entity SHOULD save the change to non-volatile\nstorage.")
ospfConfigErrorType = MibScalar((1, 3, 6, 1, 2, 1, 14, 16, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(9,11,7,4,8,2,5,3,1,6,12,10,13,)).subtype(namedValues=NamedValues(("badVersion", 1), ("optionMismatch", 10), ("mtuMismatch", 11), ("duplicateRouterId", 12), ("noError", 13), ("areaMismatch", 2), ("unknownNbmaNbr", 3), ("unknownVirtualNbr", 4), ("authTypeMismatch", 5), ("authFailure", 6), ("netMaskMismatch", 7), ("helloIntervalMismatch", 8), ("deadIntervalMismatch", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfConfigErrorType.setDescription("Potential types of configuration conflicts.\nUsed by the ospfConfigError and\nospfConfigVirtError traps.  When the last value\nof a trap using this object is needed, but no\ntraps of that type have been sent, this value\npertaining to this object should be returned as\nnoError.")
ospfPacketType = MibScalar((1, 3, 6, 1, 2, 1, 14, 16, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,6,4,2,1,)).subtype(namedValues=NamedValues(("hello", 1), ("dbDescript", 2), ("lsReq", 3), ("lsUpdate", 4), ("lsAck", 5), ("nullPacket", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfPacketType.setDescription("OSPF packet types.  When the last value of a trap\nusing this object is needed, but no traps of\nthat type have been sent, this value pertaining\nto this object should be returned as nullPacket.")
ospfPacketSrc = MibScalar((1, 3, 6, 1, 2, 1, 14, 16, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfPacketSrc.setDescription("The IP address of an inbound packet that cannot\nbe identified by a neighbor instance.  When\nthe last value of a trap using this object is\nneeded, but no traps of that type have been sent,\nthis value pertaining to this object should\nbe returned as 0.0.0.0.")
ospfTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 14, 16, 2))
ospfTrapConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 14, 16, 3))
ospfTrapGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 14, 16, 3, 1))
ospfTrapCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 14, 16, 3, 2))

# Augmentions

# Notifications

ospfVirtIfStateChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 1)).setObjects(*(("OSPF-MIB", "ospfVirtIfAreaId"), ("OSPF-MIB", "ospfVirtIfNeighbor"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfVirtIfState"), ) )
if mibBuilder.loadTexts: ospfVirtIfStateChange.setDescription("An ospfVirtIfStateChange trap signifies that there\nhas been a change in the state of an OSPF virtual\ninterface.\n\nThis trap should be generated when the interface\nstate regresses (e.g., goes from Point-to-Point to Down)\nor progresses to a terminal state\n(i.e., Point-to-Point).")
ospfNbrStateChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 2)).setObjects(*(("OSPF-MIB", "ospfNbrAddressLessIndex"), ("OSPF-MIB", "ospfNbrState"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfNbrIpAddr"), ("OSPF-MIB", "ospfNbrRtrId"), ) )
if mibBuilder.loadTexts: ospfNbrStateChange.setDescription("An ospfNbrStateChange trap signifies that\nthere has been a change in the state of a\nnon-virtual OSPF neighbor.  This trap should be\ngenerated when the neighbor state regresses\n(e.g., goes from Attempt or Full to 1-Way or\nDown) or progresses to a terminal state (e.g.,\n\n\n\n2-Way or Full).  When an neighbor transitions\nfrom or to Full on non-broadcast multi-access\nand broadcast networks, the trap should be\ngenerated by the designated router.  A designated\nrouter transitioning to Down will be noted by\nospfIfStateChange.")
ospfVirtNbrStateChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 3)).setObjects(*(("OSPF-MIB", "ospfVirtNbrRtrId"), ("OSPF-MIB", "ospfVirtNbrState"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfVirtNbrArea"), ) )
if mibBuilder.loadTexts: ospfVirtNbrStateChange.setDescription("An ospfVirtNbrStateChange trap signifies that there\nhas been a change in the state of an OSPF virtual\nneighbor.  This trap should be generated\nwhen the neighbor state regresses (e.g., goes\nfrom Attempt or Full to 1-Way or Down) or\nprogresses to a terminal state (e.g., Full).")
ospfIfConfigError = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 4)).setObjects(*(("OSPF-MIB", "ospfIfIpAddress"), ("OSPF-TRAP-MIB", "ospfPacketType"), ("OSPF-TRAP-MIB", "ospfConfigErrorType"), ("OSPF-MIB", "ospfAddressLessIf"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-TRAP-MIB", "ospfPacketSrc"), ) )
if mibBuilder.loadTexts: ospfIfConfigError.setDescription("An ospfIfConfigError trap signifies that a\npacket has been received on a non-virtual\ninterface from a router whose configuration\nparameters conflict with this router's\nconfiguration parameters.  Note that the event\noptionMismatch should cause a trap only if it\nprevents an adjacency from forming.")
ospfVirtIfConfigError = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 5)).setObjects(*(("OSPF-MIB", "ospfVirtIfAreaId"), ("OSPF-MIB", "ospfVirtIfNeighbor"), ("OSPF-TRAP-MIB", "ospfConfigErrorType"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-TRAP-MIB", "ospfPacketType"), ) )
if mibBuilder.loadTexts: ospfVirtIfConfigError.setDescription("An ospfVirtIfConfigError trap signifies that a\npacket has been received on a virtual interface\nfrom a router whose configuration parameters\nconflict with this router's configuration\nparameters.  Note that the event optionMismatch\nshould cause a trap only if it prevents an\nadjacency from forming.")
ospfIfAuthFailure = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 6)).setObjects(*(("OSPF-MIB", "ospfIfIpAddress"), ("OSPF-TRAP-MIB", "ospfPacketType"), ("OSPF-TRAP-MIB", "ospfConfigErrorType"), ("OSPF-MIB", "ospfAddressLessIf"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-TRAP-MIB", "ospfPacketSrc"), ) )
if mibBuilder.loadTexts: ospfIfAuthFailure.setDescription("An ospfIfAuthFailure trap signifies that a\npacket has been received on a non-virtual\ninterface from a router whose authentication key\nor authentication type conflicts with this\nrouter's authentication key or authentication\ntype.")
ospfVirtIfAuthFailure = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 7)).setObjects(*(("OSPF-MIB", "ospfVirtIfAreaId"), ("OSPF-MIB", "ospfVirtIfNeighbor"), ("OSPF-TRAP-MIB", "ospfConfigErrorType"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-TRAP-MIB", "ospfPacketType"), ) )
if mibBuilder.loadTexts: ospfVirtIfAuthFailure.setDescription("An ospfVirtIfAuthFailure trap signifies that a\npacket has been received on a virtual interface\nfrom a router whose authentication key or\nauthentication type conflicts with this router's\nauthentication key or authentication type.")
ospfIfRxBadPacket = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 8)).setObjects(*(("OSPF-TRAP-MIB", "ospfPacketSrc"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfIfIpAddress"), ("OSPF-TRAP-MIB", "ospfPacketType"), ("OSPF-MIB", "ospfAddressLessIf"), ) )
if mibBuilder.loadTexts: ospfIfRxBadPacket.setDescription("An ospfIfRxBadPacket trap signifies that an\nOSPF packet has been received on a non-virtual\ninterface that cannot be parsed.")
ospfVirtIfRxBadPacket = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 9)).setObjects(*(("OSPF-MIB", "ospfVirtIfAreaId"), ("OSPF-MIB", "ospfVirtIfNeighbor"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-TRAP-MIB", "ospfPacketType"), ) )
if mibBuilder.loadTexts: ospfVirtIfRxBadPacket.setDescription("An ospfVirtIfRxBadPacket trap signifies that an OSPF\npacket has been received on a virtual interface\nthat cannot be parsed.")
ospfTxRetransmit = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 10)).setObjects(*(("OSPF-MIB", "ospfLsdbRouterId"), ("OSPF-MIB", "ospfIfIpAddress"), ("OSPF-TRAP-MIB", "ospfPacketType"), ("OSPF-MIB", "ospfLsdbLsid"), ("OSPF-MIB", "ospfLsdbType"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfNbrRtrId"), ("OSPF-MIB", "ospfAddressLessIf"), ) )
if mibBuilder.loadTexts: ospfTxRetransmit.setDescription("An ospfTxRetransmit trap signifies than an\nOSPF packet has been retransmitted on a\nnon-virtual interface.  All packets that may be\nretransmitted are associated with an LSDB entry.\nThe LS type, LS ID, and Router ID are used to\nidentify the LSDB entry.")
ospfVirtIfTxRetransmit = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 11)).setObjects(*(("OSPF-TRAP-MIB", "ospfPacketType"), ("OSPF-MIB", "ospfLsdbLsid"), ("OSPF-MIB", "ospfLsdbType"), ("OSPF-MIB", "ospfVirtIfNeighbor"), ("OSPF-MIB", "ospfLsdbRouterId"), ("OSPF-MIB", "ospfVirtIfAreaId"), ("OSPF-MIB", "ospfRouterId"), ) )
if mibBuilder.loadTexts: ospfVirtIfTxRetransmit.setDescription("An ospfVirtIfTxRetransmit trap signifies than an\nOSPF packet has been retransmitted on a virtual\ninterface.  All packets that may be retransmitted\nare associated with an LSDB entry.  The LS\ntype, LS ID, and Router ID are used to identify\nthe LSDB entry.")
ospfOriginateLsa = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 12)).setObjects(*(("OSPF-MIB", "ospfLsdbLsid"), ("OSPF-MIB", "ospfLsdbRouterId"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfLsdbType"), ("OSPF-MIB", "ospfLsdbAreaId"), ) )
if mibBuilder.loadTexts: ospfOriginateLsa.setDescription("An ospfOriginateLsa trap signifies that a new\nLSA has been originated by this router.  This\ntrap should not be invoked for simple refreshes\nof LSAs (which happens every 30 minutes), but\ninstead will only be invoked when an LSA is\n(re)originated due to a topology change.\nAdditionally, this trap does not include LSAs that\nare being flushed because they have reached\nMaxAge.")
ospfMaxAgeLsa = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 13)).setObjects(*(("OSPF-MIB", "ospfLsdbLsid"), ("OSPF-MIB", "ospfLsdbRouterId"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfLsdbType"), ("OSPF-MIB", "ospfLsdbAreaId"), ) )
if mibBuilder.loadTexts: ospfMaxAgeLsa.setDescription("An ospfMaxAgeLsa trap signifies that one of\nthe LSAs in the router's link state database has\naged to MaxAge.")
ospfLsdbOverflow = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 14)).setObjects(*(("OSPF-MIB", "ospfExtLsdbLimit"), ("OSPF-MIB", "ospfRouterId"), ) )
if mibBuilder.loadTexts: ospfLsdbOverflow.setDescription("An ospfLsdbOverflow trap signifies that the\nnumber of LSAs in the router's link state\ndatabase has exceeded ospfExtLsdbLimit.")
ospfLsdbApproachingOverflow = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 15)).setObjects(*(("OSPF-MIB", "ospfExtLsdbLimit"), ("OSPF-MIB", "ospfRouterId"), ) )
if mibBuilder.loadTexts: ospfLsdbApproachingOverflow.setDescription("An ospfLsdbApproachingOverflow trap signifies\nthat the number of LSAs in the router's\nlink state database has exceeded ninety percent of\nospfExtLsdbLimit.")
ospfIfStateChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 16)).setObjects(*(("OSPF-MIB", "ospfIfState"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfIfIpAddress"), ("OSPF-MIB", "ospfAddressLessIf"), ) )
if mibBuilder.loadTexts: ospfIfStateChange.setDescription("An ospfIfStateChange trap signifies that there\nhas been a change in the state of a non-virtual\nOSPF interface.  This trap should be generated\nwhen the interface state regresses (e.g., goes\nfrom Dr to Down) or progresses to a terminal\nstate (i.e., Point-to-Point, DR Other, Dr, or\nBackup).")
ospfNssaTranslatorStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 17)).setObjects(*(("OSPF-MIB", "ospfAreaNssaTranslatorState"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfAreaId"), ) )
if mibBuilder.loadTexts: ospfNssaTranslatorStatusChange.setDescription("An ospfNssaTranslatorStatusChange trap indicates that\nthere has been a change in the router's ability to\ntranslate OSPF type-7 LSAs into OSPF type-5 LSAs.\nThis trap should be generated when the translator\nstatus transitions from or to any defined status on\na per-area basis.")
ospfRestartStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 18)).setObjects(*(("OSPF-MIB", "ospfRestartExitReason"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfRestartInterval"), ("OSPF-MIB", "ospfRestartStatus"), ) )
if mibBuilder.loadTexts: ospfRestartStatusChange.setDescription("An ospfRestartStatusChange trap signifies that\nthere has been a change in the graceful restart\nstate for the router.  This trap should be\ngenerated when the router restart status\nchanges.")
ospfNbrRestartHelperStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 19)).setObjects(*(("OSPF-MIB", "ospfNbrRestartHelperStatus"), ("OSPF-MIB", "ospfNbrRestartHelperExitReason"), ("OSPF-MIB", "ospfNbrRtrId"), ("OSPF-MIB", "ospfNbrAddressLessIndex"), ("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfNbrIpAddr"), ("OSPF-MIB", "ospfNbrRestartHelperAge"), ) )
if mibBuilder.loadTexts: ospfNbrRestartHelperStatusChange.setDescription("An ospfNbrRestartHelperStatusChange trap signifies that\nthere has been a change in the graceful restart\nhelper state for the neighbor.  This trap should be\ngenerated when the neighbor restart helper status\ntransitions for a neighbor.")
ospfVirtNbrRestartHelperStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 14, 16, 2, 20)).setObjects(*(("OSPF-MIB", "ospfVirtNbrRtrId"), ("OSPF-MIB", "ospfVirtNbrArea"), ("OSPF-MIB", "ospfVirtNbrRestartHelperStatus"), ("OSPF-MIB", "ospfVirtNbrRestartHelperAge"), ("OSPF-MIB", "ospfVirtNbrRestartHelperExitReason"), ("OSPF-MIB", "ospfRouterId"), ) )
if mibBuilder.loadTexts: ospfVirtNbrRestartHelperStatusChange.setDescription("An ospfVirtNbrRestartHelperStatusChange trap signifies\nthat there has been a change in the graceful restart\nhelper state for the virtual neighbor.  This trap should\nbe generated when the virtual neighbor restart helper\nstatus transitions for a virtual neighbor.")

# Groups

ospfTrapControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 14, 16, 3, 1, 1)).setObjects(*(("OSPF-TRAP-MIB", "ospfSetTrap"), ("OSPF-TRAP-MIB", "ospfConfigErrorType"), ("OSPF-TRAP-MIB", "ospfPacketType"), ("OSPF-TRAP-MIB", "ospfPacketSrc"), ) )
if mibBuilder.loadTexts: ospfTrapControlGroup.setDescription("These objects are required to control traps\nfrom OSPF systems.")
ospfTrapEventGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 14, 16, 3, 1, 2)).setObjects(*(("OSPF-TRAP-MIB", "ospfLsdbOverflow"), ("OSPF-TRAP-MIB", "ospfVirtIfRxBadPacket"), ("OSPF-TRAP-MIB", "ospfNbrStateChange"), ("OSPF-TRAP-MIB", "ospfVirtIfTxRetransmit"), ("OSPF-TRAP-MIB", "ospfVirtNbrStateChange"), ("OSPF-TRAP-MIB", "ospfNssaTranslatorStatusChange"), ("OSPF-TRAP-MIB", "ospfVirtNbrRestartHelperStatusChange"), ("OSPF-TRAP-MIB", "ospfVirtIfAuthFailure"), ("OSPF-TRAP-MIB", "ospfVirtIfStateChange"), ("OSPF-TRAP-MIB", "ospfVirtIfConfigError"), ("OSPF-TRAP-MIB", "ospfIfConfigError"), ("OSPF-TRAP-MIB", "ospfTxRetransmit"), ("OSPF-TRAP-MIB", "ospfRestartStatusChange"), ("OSPF-TRAP-MIB", "ospfIfAuthFailure"), ("OSPF-TRAP-MIB", "ospfIfStateChange"), ("OSPF-TRAP-MIB", "ospfMaxAgeLsa"), ("OSPF-TRAP-MIB", "ospfIfRxBadPacket"), ("OSPF-TRAP-MIB", "ospfLsdbApproachingOverflow"), ("OSPF-TRAP-MIB", "ospfOriginateLsa"), ("OSPF-TRAP-MIB", "ospfNbrRestartHelperStatusChange"), ) )
if mibBuilder.loadTexts: ospfTrapEventGroup.setDescription("A grouping of OSPF trap events, as specified\nin NOTIFICATION-TYPE constructs.")

# Compliances

ospfTrapCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 14, 16, 3, 2, 1)).setObjects(*(("OSPF-TRAP-MIB", "ospfTrapControlGroup"), ) )
if mibBuilder.loadTexts: ospfTrapCompliance.setDescription("The compliance statement.")
ospfTrapCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 14, 16, 3, 2, 2)).setObjects(*(("OSPF-TRAP-MIB", "ospfTrapControlGroup"), ("OSPF-TRAP-MIB", "ospfTrapEventGroup"), ) )
if mibBuilder.loadTexts: ospfTrapCompliance2.setDescription("The compliance statement.")

# Exports

# Module identity
mibBuilder.exportSymbols("OSPF-TRAP-MIB", PYSNMP_MODULE_ID=ospfTrap)

# Objects
mibBuilder.exportSymbols("OSPF-TRAP-MIB", ospfTrap=ospfTrap, ospfTrapControl=ospfTrapControl, ospfSetTrap=ospfSetTrap, ospfConfigErrorType=ospfConfigErrorType, ospfPacketType=ospfPacketType, ospfPacketSrc=ospfPacketSrc, ospfTraps=ospfTraps, ospfTrapConformance=ospfTrapConformance, ospfTrapGroups=ospfTrapGroups, ospfTrapCompliances=ospfTrapCompliances)

# Notifications
mibBuilder.exportSymbols("OSPF-TRAP-MIB", ospfVirtIfStateChange=ospfVirtIfStateChange, ospfNbrStateChange=ospfNbrStateChange, ospfVirtNbrStateChange=ospfVirtNbrStateChange, ospfIfConfigError=ospfIfConfigError, ospfVirtIfConfigError=ospfVirtIfConfigError, ospfIfAuthFailure=ospfIfAuthFailure, ospfVirtIfAuthFailure=ospfVirtIfAuthFailure, ospfIfRxBadPacket=ospfIfRxBadPacket, ospfVirtIfRxBadPacket=ospfVirtIfRxBadPacket, ospfTxRetransmit=ospfTxRetransmit, ospfVirtIfTxRetransmit=ospfVirtIfTxRetransmit, ospfOriginateLsa=ospfOriginateLsa, ospfMaxAgeLsa=ospfMaxAgeLsa, ospfLsdbOverflow=ospfLsdbOverflow, ospfLsdbApproachingOverflow=ospfLsdbApproachingOverflow, ospfIfStateChange=ospfIfStateChange, ospfNssaTranslatorStatusChange=ospfNssaTranslatorStatusChange, ospfRestartStatusChange=ospfRestartStatusChange, ospfNbrRestartHelperStatusChange=ospfNbrRestartHelperStatusChange, ospfVirtNbrRestartHelperStatusChange=ospfVirtNbrRestartHelperStatusChange)

# Groups
mibBuilder.exportSymbols("OSPF-TRAP-MIB", ospfTrapControlGroup=ospfTrapControlGroup, ospfTrapEventGroup=ospfTrapEventGroup)

# Compliances
mibBuilder.exportSymbols("OSPF-TRAP-MIB", ospfTrapCompliance=ospfTrapCompliance, ospfTrapCompliance2=ospfTrapCompliance2)
