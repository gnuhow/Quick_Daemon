# PySNMP SMI module. Autogenerated from smidump -f python INTEGRATED-SERVICES-GUARANTEED-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:09 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( intSrv, ) = mibBuilder.importSymbols("INTEGRATED-SERVICES-MIB", "intSrv")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( RowStatus, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus")

# Objects

intSrvGuaranteed = ModuleIdentity((1, 3, 6, 1, 2, 1, 52, 5)).setRevisions(("1995-11-03 05:00",))
if mibBuilder.loadTexts: intSrvGuaranteed.setOrganization("IETF Integrated Services Working Group")
if mibBuilder.loadTexts: intSrvGuaranteed.setContactInfo("       Fred Baker\nPostal: Cisco Systems\n        519 Lado Drive\n        Santa Barbara, California 93111\nTel:    +1 805 681 0115\nE-Mail: fred@cisco.com")
if mibBuilder.loadTexts: intSrvGuaranteed.setDescription("The MIB module to describe the Guaranteed Service of\nthe Integrated Services Protocol")
intSrvGuaranteedObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 52, 5, 1))
intSrvGuaranteedIfTable = MibTable((1, 3, 6, 1, 2, 1, 52, 5, 1, 1))
if mibBuilder.loadTexts: intSrvGuaranteedIfTable.setDescription("The attributes of the system's interfaces  ex-\nported by the Guaranteed Service.")
intSrvGuaranteedIfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 52, 5, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: intSrvGuaranteedIfEntry.setDescription("The reservable attributes of  a  given  inter-\nface.")
intSrvGuaranteedIfBacklog = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 268435455))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvGuaranteedIfBacklog.setDescription("The Backlog  parameter  is  the  data  backlog\nresulting  from  the vagaries of how a specific\nimplementation deviates from a  strict  bit-by-\nbit  service.  So, for instance, for packetized\nweighted fair queueing, Backlog is set  to  the\nMaximum Packet Size.\n\nThe Backlog term is measured in units of bytes.\nAn  individual  element can advertise a Backlog\nvalue between 1 and 2**28 (a  little  over  250\nmegabytes)  and  the  total added over all ele-\nments can range as high as  (2**32)-1.   Should\nthe  sum of the different elements delay exceed\n(2**32)-1, the end-to-end error term should  be\n(2**32)-1.")
intSrvGuaranteedIfDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 268435455))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvGuaranteedIfDelay.setDescription("The Delay parameter at  each  service  element\nshould  be  set  to the maximum packet transfer\ndelay (independent of bucket size) through  the\nservice  element.   For  instance,  in a simple\nrouter, one might compute the worst case amount\nof  time  it  make  take  for a datagram to get\nthrough the input interface to  the  processor,\nand how long it would take to get from the pro-\ncessor to the outbound interface (assuming  the\nqueueing  schemes work correctly).  For an Eth-\nernet, it might represent the worst case  delay\nif  the maximum number of collisions is experi-\nenced.\n\nThe Delay term is measured in units of one  mi-\ncrosecond.  An individual element can advertise\na delay value between  1  and  2**28  (somewhat\nover two minutes) and the total delay added all\nelements  can  range  as  high  as   (2**32)-1.\nShould  the sum of the different elements delay\nexceed (2**32)-1, the end-to-end  delay  should\nbe (2**32)-1.")
intSrvGuaranteedIfSlack = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 268435455))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvGuaranteedIfSlack.setDescription("If a network element uses a certain amount  of\nslack,  Si,  to  reduce the amount of resources\nthat it has reserved for a particular flow,  i,\nthe  value  Si  should be stored at the network\nelement.   Subsequently,  if  reservation   re-\nfreshes  are  received  for flow i, the network\nelement must use the same slack Si without  any\nfurther computation. This guarantees consisten-\ncy in the reservation process.\n\nAs an example for the use of  the  slack  term,\nconsider the case where the required end-to-end\ndelay, Dreq, is larger than the  maximum  delay\nof the fluid flow system.  In this, Ctot is the\nsum of the Backlog terms end to end,  and  Dtot\nis the sum of the delay terms end to end.  Dreq\nis obtained by setting R=r in the  fluid  delay\nformula, and is given by\n\n             b/r + Ctot/r + Dtot.\n\nIn this case the slack term is\n\n       S = Dreq - (b/r + Ctot/r + Dtot).\n\nThe slack term may be used by the network  ele-\nments  to  adjust  their local reservations, so\nthat they can admit flows that would  otherwise\nhave been rejected. A service element at an in-\ntermediate network element that can  internally\ndifferentiate between delay and rate guarantees\ncan now take advantage of this  information  to\nlower the amount of resources allocated to this\nflow. For example, by taking an amount of slack\ns  <= S, an RCSD scheduler [5] can increase the\nlocal delay bound, d, assigned to the flow,  to\nd+s. Given an RSpec, (Rin, Sin), it would do so\nby setting Rout = Rin and Sout = Sin - s.\n\nSimilarly,  a  network  element  using  a   WFQ\nscheduler  can  decrease  its local reservation\nfrom Rin to Rout by using some of the slack  in\nthe  RSpec.  This  can be accomplished by using\nthe transformation rules given in the  previous\nsection,  that ensure that the reduced reserva-\ntion level will not increase the  overall  end-\nto-end delay.")
intSrvGuaranteedIfStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 52, 5, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: intSrvGuaranteedIfStatus.setDescription("'valid' on interfaces that are configured  for\nthe Guaranteed Service.")
intSrvGuaranteedNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 52, 5, 2))
intSrvGuaranteedConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 52, 5, 3))
intSrvGuaranteedGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 52, 5, 3, 1))
intSrvGuaranteedCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 52, 5, 3, 2))

# Augmentions

# Groups

intSrvGuaranteedIfAttribGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 52, 5, 3, 1, 2)).setObjects(*(("INTEGRATED-SERVICES-GUARANTEED-MIB", "intSrvGuaranteedIfSlack"), ("INTEGRATED-SERVICES-GUARANTEED-MIB", "intSrvGuaranteedIfDelay"), ("INTEGRATED-SERVICES-GUARANTEED-MIB", "intSrvGuaranteedIfBacklog"), ("INTEGRATED-SERVICES-GUARANTEED-MIB", "intSrvGuaranteedIfStatus"), ) )
if mibBuilder.loadTexts: intSrvGuaranteedIfAttribGroup.setDescription("These objects are required  for  Systems  sup-\nporting the Guaranteed Service of the Integrat-\ned Services Architecture.")

# Compliances

intSrvGuaranteedCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 52, 5, 3, 2, 1)).setObjects(*(("INTEGRATED-SERVICES-GUARANTEED-MIB", "intSrvGuaranteedIfAttribGroup"), ) )
if mibBuilder.loadTexts: intSrvGuaranteedCompliance.setDescription("The compliance statement ")

# Exports

# Module identity
mibBuilder.exportSymbols("INTEGRATED-SERVICES-GUARANTEED-MIB", PYSNMP_MODULE_ID=intSrvGuaranteed)

# Objects
mibBuilder.exportSymbols("INTEGRATED-SERVICES-GUARANTEED-MIB", intSrvGuaranteed=intSrvGuaranteed, intSrvGuaranteedObjects=intSrvGuaranteedObjects, intSrvGuaranteedIfTable=intSrvGuaranteedIfTable, intSrvGuaranteedIfEntry=intSrvGuaranteedIfEntry, intSrvGuaranteedIfBacklog=intSrvGuaranteedIfBacklog, intSrvGuaranteedIfDelay=intSrvGuaranteedIfDelay, intSrvGuaranteedIfSlack=intSrvGuaranteedIfSlack, intSrvGuaranteedIfStatus=intSrvGuaranteedIfStatus, intSrvGuaranteedNotifications=intSrvGuaranteedNotifications, intSrvGuaranteedConformance=intSrvGuaranteedConformance, intSrvGuaranteedGroups=intSrvGuaranteedGroups, intSrvGuaranteedCompliances=intSrvGuaranteedCompliances)

# Groups
mibBuilder.exportSymbols("INTEGRATED-SERVICES-GUARANTEED-MIB", intSrvGuaranteedIfAttribGroup=intSrvGuaranteedIfAttribGroup)

# Compliances
mibBuilder.exportSymbols("INTEGRATED-SERVICES-GUARANTEED-MIB", intSrvGuaranteedCompliance=intSrvGuaranteedCompliance)
