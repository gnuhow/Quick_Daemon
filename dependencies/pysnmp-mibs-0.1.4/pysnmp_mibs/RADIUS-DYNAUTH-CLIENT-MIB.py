# PySNMP SMI module. Autogenerated from smidump -f python RADIUS-DYNAUTH-CLIENT-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:31 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InetAddress, InetAddressType, InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "mib-2")

# Objects

radiusDynAuthClientMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 145)).setRevisions(("2006-09-29 00:00","2006-08-29 00:00",))
if mibBuilder.loadTexts: radiusDynAuthClientMIB.setOrganization("IETF RADEXT Working Group")
if mibBuilder.loadTexts: radiusDynAuthClientMIB.setContactInfo(" Stefaan De Cnodder\n\n\n\nAlcatel\nFrancis Wellesplein 1\nB-2018 Antwerp\nBelgium\n\nPhone: +32 3 240 85 15\nEMail: stefaan.de_cnodder@alcatel.be\n\nNagi Reddy Jonnala\nCisco Systems, Inc.\nDivyasree Chambers, B Wing,\nO'Shaugnessy Road,\nBangalore-560027, India.\n\nPhone: +91 94487 60828\nEMail: njonnala@cisco.com\n\nMurtaza Chiba\nCisco Systems, Inc.\n170 West Tasman Dr.\nSan Jose CA, 95134\n\nPhone: +1 408 525 7198\nEMail: mchiba@cisco.com ")
if mibBuilder.loadTexts: radiusDynAuthClientMIB.setDescription("The MIB module for entities implementing the client\nside of the Dynamic Authorization Extensions to the\nRemote Authentication Dial-In User Service (RADIUS)\nprotocol. Copyright (C) The Internet Society (2006).\nInitial version as published in RFC 4672;\nfor full legal notices see the RFC itself.")
radiusDynAuthClientMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 145, 1))
radiusDynAuthClientScalars = MibIdentifier((1, 3, 6, 1, 2, 1, 145, 1, 1))
radiusDynAuthClientDisconInvalidServerAddresses = MibScalar((1, 3, 6, 1, 2, 1, 145, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientDisconInvalidServerAddresses.setDescription("The number of Disconnect-Ack and Disconnect-NAK packets\n\n\n\nreceived from unknown addresses.  This counter may\nexperience a discontinuity when the DAC module\n(re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientCoAInvalidServerAddresses = MibScalar((1, 3, 6, 1, 2, 1, 145, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCoAInvalidServerAddresses.setDescription("The number of CoA-Ack and CoA-NAK packets received from\nunknown addresses.  Disconnect-NAK packets received\nfrom unknown addresses.  This counter may experience a\ndiscontinuity when the DAC module (re)starts, as\nindicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthServerTable = MibTable((1, 3, 6, 1, 2, 1, 145, 1, 2))
if mibBuilder.loadTexts: radiusDynAuthServerTable.setDescription("The (conceptual) table listing the RADIUS Dynamic\nAuthorization Servers with which the client shares a\nsecret.")
radiusDynAuthServerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 145, 1, 2, 1)).setIndexNames((0, "RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthServerIndex"))
if mibBuilder.loadTexts: radiusDynAuthServerEntry.setDescription("An entry (conceptual row) representing one Dynamic\nAuthorization Server with which the client shares a\nsecret.")
radiusDynAuthServerIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: radiusDynAuthServerIndex.setDescription("A number uniquely identifying each RADIUS Dynamic\nAuthorization Server with which this Dynamic\nAuthorization Client communicates.  This number is\nallocated by the agent implementing this MIB module\nand is unique in this context.")
radiusDynAuthServerAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthServerAddressType.setDescription("The type of IP address of the RADIUS Dynamic\nAuthorization Server referred to in this table entry.")
radiusDynAuthServerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthServerAddress.setDescription("The IP address value of the RADIUS Dynamic\nAuthorization Server referred to in this table entry\nusing the version neutral IP address format.  The type\nof this address is determined by the value of the\nradiusDynAuthServerAddressType object.")
radiusDynAuthServerClientPortNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 4), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthServerClientPortNumber.setDescription("The UDP destination port that the RADIUS Dynamic\nAuthorization Client is using to send requests to this\nserver.  The value zero is invalid.")
radiusDynAuthServerID = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthServerID.setDescription("The NAS-Identifier of the RADIUS Dynamic Authorization\nServer referred to in this table entry.  This is not\nnecessarily the same as sysName in MIB II.")
radiusDynAuthClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientRoundTripTime.setDescription("The time interval (in hundredths of a second) between\nthe most recent Disconnect or CoA request and the\nreceipt of the corresponding Disconnect or CoA reply.\nA value of zero is returned if no reply has been\nreceived yet from this server.")
radiusDynAuthClientDisconRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientDisconRequests.setDescription("The number of RADIUS Disconnect-Requests sent\nto this Dynamic Authorization Server.  This also\nincludes the RADIUS Disconnect-Requests that have a\nService-Type attribute with value 'Authorize Only'.\nDisconnect-NAK packets received from unknown addresses.\nThis counter may experience a discontinuity when the\nDAC module (re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientDisconAuthOnlyRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientDisconAuthOnlyRequests.setDescription("The number of RADIUS Disconnect-Requests that include a\nService-Type attribute with value 'Authorize Only'\nsent to this Dynamic Authorization Server.\nDisconnect-NAK packets received from unknown addresses.\nThis counter may experience a discontinuity when the\nDAC module (re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientDisconRetransmissions = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientDisconRetransmissions.setDescription("The number of RADIUS Disconnect-request packets\nretransmitted to this RADIUS Dynamic Authorization\nServer.  Disconnect-NAK packets received from unknown\naddresses.  This counter may experience a discontinuity\nwhen the DAC module (re)starts, as indicated by the\nvalue of radiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientDisconAcks = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientDisconAcks.setDescription("The number of RADIUS Disconnect-ACK packets\nreceived from this Dynamic Authorization Server.  This\ncounter may experience a discontinuity when the DAC\nmodule (re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientDisconNaks = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientDisconNaks.setDescription("The number of RADIUS Disconnect-NAK packets\nreceived from this Dynamic Authorization Server.\nThis includes the RADIUS Disconnect-NAK packets\nreceived with a Service-Type attribute with value\n'Authorize Only' and the RADIUS Disconnect-NAK\npackets received if no session context was found.  This\ncounter may experience a discontinuity when the DAC\nmodule (re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientDisconNakAuthOnlyRequest = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientDisconNakAuthOnlyRequest.setDescription("The number of RADIUS Disconnect-NAK packets\nthat include a Service-Type attribute with value\n'Authorize Only' received from this Dynamic\nAuthorization Server.  This counter may experience a\ndiscontinuity when the DAC module (re)starts, as\n\n\n\nindicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientDisconNakSessNoContext = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientDisconNakSessNoContext.setDescription("The number of RADIUS Disconnect-NAK packets\nreceived from this Dynamic Authorization Server\nbecause no session context was found; i.e., it\nincludes an Error-Cause attribute with value 503\n('Session Context Not Found').  This counter may\nexperience a discontinuity when the DAC module\n(re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientMalformedDisconResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientMalformedDisconResponses.setDescription("The number of malformed RADIUS Disconnect-Ack and\nDisconnect-NAK packets received from this Dynamic\nAuthorization Server.  Bad authenticators and unknown\ntypes are not included as malformed Disconnect-Ack and\nDisconnect-NAK packets.  This counter may experience a\ndiscontinuity when the DAC module (re)starts, as\nindicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientDisconBadAuthenticators = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientDisconBadAuthenticators.setDescription("The number of RADIUS Disconnect-Ack and Disconnect-NAK\npackets that contained invalid Authenticator field\nreceived from this Dynamic Authorization Server.  This\ncounter may experience a discontinuity when the DAC\nmodule (re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientDisconPendingRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientDisconPendingRequests.setDescription("The number of RADIUS Disconnect-request packets\ndestined for this server that have not yet timed out\nor received a response.  This variable is incremented\nwhen an Disconnect-Request is sent and decremented\ndue to receipt of a Disconnect-Ack, a Disconnect-NAK,\na timeout, or a retransmission.")
radiusDynAuthClientDisconTimeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientDisconTimeouts.setDescription("The number of Disconnect request timeouts to this\nserver.  After a timeout, the client may retry to the\nsame server or give up.  A retry to the same server is\ncounted as a retransmit and as a timeout.  A send\nto a different server is counted as a\nDisconnect-Request and as a timeout.  This counter\nmay experience a discontinuity when the DAC module\n(re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientDisconPacketsDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientDisconPacketsDropped.setDescription("The number of incoming Disconnect-Ack and\nDisconnect-NAK packets from this Dynamic Authorization\nServer silently discarded by the client application for\nsome reason other than malformed, bad authenticators,\nor unknown types.  This counter may experience a\ndiscontinuity when the DAC module (re)starts, as\nindicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientCoARequests = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCoARequests.setDescription("The number of RADIUS CoA-Requests sent to this\nDynamic Authorization Server.  This also includes\nCoA requests that have a Service-Type attribute\nwith value 'Authorize Only'.  This counter may\nexperience a discontinuity when the DAC module\n(re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientCoAAuthOnlyRequest = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCoAAuthOnlyRequest.setDescription("The number of RADIUS CoA-requests that include a\nService-Type attribute with value 'Authorize Only'\nsent to this Dynamic Authorization Client.  This\ncounter may experience a discontinuity when the DAC\nmodule (re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientCoARetransmissions = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCoARetransmissions.setDescription("The number of RADIUS CoA-request packets\nretransmitted to this RADIUS Dynamic Authorization\nServer.  This counter may experience a discontinuity\nwhen the DAC module (re)starts, as indicated by the\nvalue of radiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientCoAAcks = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCoAAcks.setDescription("The number of RADIUS CoA-ACK packets received from\nthis Dynamic Authorization Server.  This counter may\nexperience a discontinuity when the DAC module\n(re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientCoANaks = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCoANaks.setDescription("The number of RADIUS CoA-NAK packets received from\nthis Dynamic Authorization Server.  This includes the\nRADIUS CoA-NAK packets received with a Service-Type\nattribute with value 'Authorize Only' and the RADIUS\nCoA-NAK packets received because no session context\n\n\n\nwas found.  This counter may experience a discontinuity\nwhen the DAC module (re)starts, as indicated by the\nvalue of radiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientCoANakAuthOnlyRequest = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCoANakAuthOnlyRequest.setDescription("The number of RADIUS CoA-NAK packets that include a\nService-Type attribute with value 'Authorize Only'\nreceived from this Dynamic Authorization Server.  This\ncounter may experience a discontinuity when the DAC\nmodule (re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientCoANakSessNoContext = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCoANakSessNoContext.setDescription("The number of RADIUS CoA-NAK packets received from\nthis Dynamic Authorization Server because no session\ncontext was found; i.e., it includes an Error-Cause\nattribute with value 503 ('Session Context Not Found').\nThis counter may experience a discontinuity when the\nDAC module (re)starts as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientMalformedCoAResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientMalformedCoAResponses.setDescription("The number of malformed RADIUS CoA-Ack and CoA-NAK\npackets received from this Dynamic Authorization\nServer.  Bad authenticators and unknown types are\nnot included as malformed CoA-Ack and CoA-NAK packets.\nThis counter may experience a discontinuity when the\nDAC module (re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientCoABadAuthenticators = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCoABadAuthenticators.setDescription("The number of RADIUS CoA-Ack and CoA-NAK packets\nthat contained invalid Authenticator field\nreceived from this Dynamic Authorization Server.\nThis counter may experience a discontinuity when the\nDAC module (re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientCoAPendingRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCoAPendingRequests.setDescription("The number of RADIUS CoA-request packets destined for\nthis server that have not yet timed out or received a\nresponse.  This variable is incremented when an\nCoA-Request is sent and decremented due to receipt of\na CoA-Ack, a CoA-NAK, or a timeout, or a\nretransmission.")
radiusDynAuthClientCoATimeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCoATimeouts.setDescription("The number of CoA request timeouts to this server.\nAfter a timeout, the client may retry to the same\nserver or give up.  A retry to the same server is\ncounted as a retransmit and as a timeout.  A send to\na different server is counted as a CoA-Request and\nas a timeout.  This counter may experience a\ndiscontinuity when the DAC module (re)starts, as\nindicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientCoAPacketsDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCoAPacketsDropped.setDescription("The number of incoming CoA-Ack and CoA-NAK from this\nDynamic Authorization Server silently discarded by the\nclient application for some reason other than\nmalformed, bad authenticators, or unknown types.  This\ncounter may experience a discontinuity when the DAC\nmodule (re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientUnknownTypes.setDescription("The number of incoming packets of unknown types\nthat were received on the Dynamic Authorization port.\nThis counter may experience a discontinuity when the\nDAC module (re)starts, as indicated by the value of\nradiusDynAuthClientCounterDiscontinuity.")
radiusDynAuthClientCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 32), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusDynAuthClientCounterDiscontinuity.setDescription("The time (in hundredths of a second) since the\nlast counter discontinuity.  A discontinuity may\nbe the result of a reinitialization of the DAC\nmodule within the managed entity.")
radiusDynAuthClientMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 145, 2))
radiusDynAuthClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 145, 2, 1))
radiusDynAuthClientMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 145, 2, 2))

# Augmentions

# Groups

radiusDynAuthClientMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 145, 2, 2, 1)).setObjects(*(("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCoARequests"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthServerID"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCoABadAuthenticators"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientDisconTimeouts"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientDisconRetransmissions"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientDisconBadAuthenticators"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientUnknownTypes"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCoANaks"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCoAAcks"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientMalformedDisconResponses"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthServerClientPortNumber"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCoAPacketsDropped"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientDisconInvalidServerAddresses"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientDisconPacketsDropped"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientDisconPendingRequests"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCoAPendingRequests"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCoARetransmissions"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCounterDiscontinuity"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientDisconAcks"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientDisconRequests"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientMalformedCoAResponses"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCoATimeouts"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientRoundTripTime"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCoAInvalidServerAddresses"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientDisconNaks"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthServerAddressType"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthServerAddress"), ) )
if mibBuilder.loadTexts: radiusDynAuthClientMIBGroup.setDescription("The collection of objects providing management of\na RADIUS Dynamic Authorization Client.")
radiusDynAuthClientAuthOnlyGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 145, 2, 2, 2)).setObjects(*(("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCoAAuthOnlyRequest"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCoANakAuthOnlyRequest"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientDisconNakAuthOnlyRequest"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientDisconAuthOnlyRequests"), ) )
if mibBuilder.loadTexts: radiusDynAuthClientAuthOnlyGroup.setDescription("The collection of objects supporting the RADIUS\nmessages including Service-Type attribute with\nvalue 'Authorize Only'.")
radiusDynAuthClientNoSessGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 145, 2, 2, 3)).setObjects(*(("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientDisconNakSessNoContext"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientCoANakSessNoContext"), ) )
if mibBuilder.loadTexts: radiusDynAuthClientNoSessGroup.setDescription("The collection of objects supporting the RADIUS\nmessages that are referring to non-existing sessions.")

# Compliances

radiusDynAuthClientMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 145, 2, 1, 1)).setObjects(*(("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientNoSessGroup"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientAuthOnlyGroup"), ("RADIUS-DYNAUTH-CLIENT-MIB", "radiusDynAuthClientMIBGroup"), ) )
if mibBuilder.loadTexts: radiusDynAuthClientMIBCompliance.setDescription("The compliance statement for entities implementing\nthe RADIUS Dynamic Authorization Client.\nImplementation of this module is for entities that\nsupport IPv4 and/or IPv6.")

# Exports

# Module identity
mibBuilder.exportSymbols("RADIUS-DYNAUTH-CLIENT-MIB", PYSNMP_MODULE_ID=radiusDynAuthClientMIB)

# Objects
mibBuilder.exportSymbols("RADIUS-DYNAUTH-CLIENT-MIB", radiusDynAuthClientMIB=radiusDynAuthClientMIB, radiusDynAuthClientMIBObjects=radiusDynAuthClientMIBObjects, radiusDynAuthClientScalars=radiusDynAuthClientScalars, radiusDynAuthClientDisconInvalidServerAddresses=radiusDynAuthClientDisconInvalidServerAddresses, radiusDynAuthClientCoAInvalidServerAddresses=radiusDynAuthClientCoAInvalidServerAddresses, radiusDynAuthServerTable=radiusDynAuthServerTable, radiusDynAuthServerEntry=radiusDynAuthServerEntry, radiusDynAuthServerIndex=radiusDynAuthServerIndex, radiusDynAuthServerAddressType=radiusDynAuthServerAddressType, radiusDynAuthServerAddress=radiusDynAuthServerAddress, radiusDynAuthServerClientPortNumber=radiusDynAuthServerClientPortNumber, radiusDynAuthServerID=radiusDynAuthServerID, radiusDynAuthClientRoundTripTime=radiusDynAuthClientRoundTripTime, radiusDynAuthClientDisconRequests=radiusDynAuthClientDisconRequests, radiusDynAuthClientDisconAuthOnlyRequests=radiusDynAuthClientDisconAuthOnlyRequests, radiusDynAuthClientDisconRetransmissions=radiusDynAuthClientDisconRetransmissions, radiusDynAuthClientDisconAcks=radiusDynAuthClientDisconAcks, radiusDynAuthClientDisconNaks=radiusDynAuthClientDisconNaks, radiusDynAuthClientDisconNakAuthOnlyRequest=radiusDynAuthClientDisconNakAuthOnlyRequest, radiusDynAuthClientDisconNakSessNoContext=radiusDynAuthClientDisconNakSessNoContext, radiusDynAuthClientMalformedDisconResponses=radiusDynAuthClientMalformedDisconResponses, radiusDynAuthClientDisconBadAuthenticators=radiusDynAuthClientDisconBadAuthenticators, radiusDynAuthClientDisconPendingRequests=radiusDynAuthClientDisconPendingRequests, radiusDynAuthClientDisconTimeouts=radiusDynAuthClientDisconTimeouts, radiusDynAuthClientDisconPacketsDropped=radiusDynAuthClientDisconPacketsDropped, radiusDynAuthClientCoARequests=radiusDynAuthClientCoARequests, radiusDynAuthClientCoAAuthOnlyRequest=radiusDynAuthClientCoAAuthOnlyRequest, radiusDynAuthClientCoARetransmissions=radiusDynAuthClientCoARetransmissions, radiusDynAuthClientCoAAcks=radiusDynAuthClientCoAAcks, radiusDynAuthClientCoANaks=radiusDynAuthClientCoANaks, radiusDynAuthClientCoANakAuthOnlyRequest=radiusDynAuthClientCoANakAuthOnlyRequest, radiusDynAuthClientCoANakSessNoContext=radiusDynAuthClientCoANakSessNoContext, radiusDynAuthClientMalformedCoAResponses=radiusDynAuthClientMalformedCoAResponses, radiusDynAuthClientCoABadAuthenticators=radiusDynAuthClientCoABadAuthenticators, radiusDynAuthClientCoAPendingRequests=radiusDynAuthClientCoAPendingRequests, radiusDynAuthClientCoATimeouts=radiusDynAuthClientCoATimeouts, radiusDynAuthClientCoAPacketsDropped=radiusDynAuthClientCoAPacketsDropped, radiusDynAuthClientUnknownTypes=radiusDynAuthClientUnknownTypes, radiusDynAuthClientCounterDiscontinuity=radiusDynAuthClientCounterDiscontinuity, radiusDynAuthClientMIBConformance=radiusDynAuthClientMIBConformance, radiusDynAuthClientMIBCompliances=radiusDynAuthClientMIBCompliances, radiusDynAuthClientMIBGroups=radiusDynAuthClientMIBGroups)

# Groups
mibBuilder.exportSymbols("RADIUS-DYNAUTH-CLIENT-MIB", radiusDynAuthClientMIBGroup=radiusDynAuthClientMIBGroup, radiusDynAuthClientAuthOnlyGroup=radiusDynAuthClientAuthOnlyGroup, radiusDynAuthClientNoSessGroup=radiusDynAuthClientNoSessGroup)

# Compliances
mibBuilder.exportSymbols("RADIUS-DYNAUTH-CLIENT-MIB", radiusDynAuthClientMIBCompliance=radiusDynAuthClientMIBCompliance)
