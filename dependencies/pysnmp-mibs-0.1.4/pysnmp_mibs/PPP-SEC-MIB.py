# PySNMP SMI module. Autogenerated from smidump -f python PPP-SEC-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:28 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ppp, ) = mibBuilder.importSymbols("PPP-LCP-MIB", "ppp")
( Bits, Integer32, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")

# Objects

pppSecurity = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 2))
pppSecurityProtocols = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 2, 1))
pppSecurityPapProtocol = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 2, 1, 1))
pppSecurityChapMD5Protocol = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 2, 1, 2))
pppSecurityConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 2, 2))
if mibBuilder.loadTexts: pppSecurityConfigTable.setDescription("Table containing the configuration and\npreference parameters for PPP Security.")
pppSecurityConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 2, 2, 1)).setIndexNames((0, "PPP-SEC-MIB", "pppSecurityConfigLink"), (0, "PPP-SEC-MIB", "pppSecurityConfigPreference"))
if mibBuilder.loadTexts: pppSecurityConfigEntry.setDescription("Security configuration information for a\nparticular PPP link.")
pppSecurityConfigLink = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppSecurityConfigLink.setDescription("The value of ifIndex that identifies the entry\nin the interface table that is associated with\nthe local PPP entity's link for which this\nparticular security algorithm shall be\nattempted. A value of 0 indicates the default\nalgorithm - i.e., this entry applies to all\nlinks for which explicit entries in the table\ndo not exist.")
pppSecurityConfigPreference = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppSecurityConfigPreference.setDescription("The relative preference of the security\nprotocol identified by\npppSecurityConfigProtocol. Security protocols\nwith lower values of\npppSecurityConfigPreference are tried before\nprotocols with higher values of\npppSecurityConfigPreference.")
pppSecurityConfigProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 2, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppSecurityConfigProtocol.setDescription("Identifies the security protocol to be\nattempted on the link identified by\npppSecurityConfigLink at the preference level\nidentified by pppSecurityConfigPreference. ")
pppSecurityConfigStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("invalid", 1), ("valid", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppSecurityConfigStatus.setDescription("Setting this object to the value invalid(1)\nhas the effect of invalidating the\ncorresponding entry in the\npppSecurityConfigTable. It is an\nimplementation-specific matter as to whether\nthe agent removes an invalidated entry from the\ntable.  Accordingly, management stations must\nbe prepared to receive tabular information from\nagents that corresponds to entries not\ncurrently in use.  Proper interpretation of\nsuch entries requires examination of the\nrelevant pppSecurityConfigStatus object.")
pppSecuritySecretsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 2, 3))
if mibBuilder.loadTexts: pppSecuritySecretsTable.setDescription("Table containing the identities and secrets\nused by the PPP authentication protocols.  As\nthis table contains secret information, it is\nexpected that access to this table be limited\nto those SNMP Party-Pairs for which a privacy\nprotocol is in use for all SNMP messages that\nthe parties exchange.  This table contains both\nthe ID and secret pair(s) that the local PPP\nentity will advertise to the remote entity and\nthe pair(s) that the local entity will expect\nfrom the remote entity.  This table allows for\nmultiple id/secret password pairs to be\nspecified for a particular link by using the\npppSecuritySecretsIdIndex object.")
pppSecuritySecretsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 2, 3, 1)).setIndexNames((0, "PPP-SEC-MIB", "pppSecuritySecretsLink"), (0, "PPP-SEC-MIB", "pppSecuritySecretsIdIndex"))
if mibBuilder.loadTexts: pppSecuritySecretsEntry.setDescription("Secret information.")
pppSecuritySecretsLink = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSecuritySecretsLink.setDescription("The link to which this ID/Secret pair applies.\nBy convention, if the value of this object is 0\nthen the ID/Secret pair applies to all links.")
pppSecuritySecretsIdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSecuritySecretsIdIndex.setDescription("A unique value for each ID/Secret pair that\nhas been defined for use on this link.  This\nallows multiple ID/Secret pairs to be defined\nfor each link.  How the local entity selects\nwhich pair to use is a local implementation\ndecision.")
pppSecuritySecretsDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 2, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("local-to-remote", 1), ("remote-to-local", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppSecuritySecretsDirection.setDescription("This object defines the direction in which a\nparticular ID/Secret pair is valid.  If this\nobject is local-to-remote then the local PPP\nentity will use the ID/Secret pair when\nattempting to authenticate the local PPP entity\nto the remote PPP entity.  If this object is\nremote-to-local then the local PPP entity will\nexpect the ID/Secret pair to be used by the\nremote PPP entity when the remote PPP entity\nattempts to authenticate itself to the local\nPPP entity.")
pppSecuritySecretsProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 2, 3, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppSecuritySecretsProtocol.setDescription("The security protocol (e.g. CHAP or PAP) to\nwhich this ID/Secret pair applies.")
pppSecuritySecretsIdentity = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 2, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppSecuritySecretsIdentity.setDescription("The Identity of the ID/Secret pair.  The\nactual format, semantics, and use of\npppSecuritySecretsIdentity depends on the\nactual security protocol used.  For example, if\npppSecuritySecretsProtocol is\npppSecurityPapProtocol then this object will\ncontain a PAP Peer-ID. If\npppSecuritySecretsProtocol is\npppSecurityChapMD5Protocol then this object\nwould contain the CHAP NAME parameter.")
pppSecuritySecretsSecret = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppSecuritySecretsSecret.setDescription("The secret of the ID/Secret pair.  The actual\nformat, semantics, and use of\npppSecuritySecretsSecret depends on the actual\nsecurity protocol used.  For example, if\npppSecuritySecretsProtocol is\npppSecurityPapProtocol then this object will\ncontain a PAP Password. If\npppSecuritySecretsProtocol is\npppSecurityChapMD5Protocol then this object\nwould contain the CHAP MD5 Secret.")
pppSecuritySecretsStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 2, 3, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("invalid", 1), ("valid", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppSecuritySecretsStatus.setDescription("Setting this object to the value invalid(1)\nhas the effect of invalidating the\ncorresponding entry in the\npppSecuritySecretsTable. It is an\nimplementation-specific matter as to whether\nthe agent removes an invalidated entry from the\ntable.  Accordingly, management stations must\nbe prepared to receive tabular information from\nagents that corresponds to entries not\ncurrently in use.  Proper interpretation of\nsuch entries requires examination of the\nrelevant pppSecuritySecretsStatus object.")

# Augmentions

# Exports

# Objects
mibBuilder.exportSymbols("PPP-SEC-MIB", pppSecurity=pppSecurity, pppSecurityProtocols=pppSecurityProtocols, pppSecurityPapProtocol=pppSecurityPapProtocol, pppSecurityChapMD5Protocol=pppSecurityChapMD5Protocol, pppSecurityConfigTable=pppSecurityConfigTable, pppSecurityConfigEntry=pppSecurityConfigEntry, pppSecurityConfigLink=pppSecurityConfigLink, pppSecurityConfigPreference=pppSecurityConfigPreference, pppSecurityConfigProtocol=pppSecurityConfigProtocol, pppSecurityConfigStatus=pppSecurityConfigStatus, pppSecuritySecretsTable=pppSecuritySecretsTable, pppSecuritySecretsEntry=pppSecuritySecretsEntry, pppSecuritySecretsLink=pppSecuritySecretsLink, pppSecuritySecretsIdIndex=pppSecuritySecretsIdIndex, pppSecuritySecretsDirection=pppSecuritySecretsDirection, pppSecuritySecretsProtocol=pppSecuritySecretsProtocol, pppSecuritySecretsIdentity=pppSecuritySecretsIdentity, pppSecuritySecretsSecret=pppSecuritySecretsSecret, pppSecuritySecretsStatus=pppSecuritySecretsStatus)

