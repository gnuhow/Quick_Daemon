# PySNMP SMI module. Autogenerated from smidump -f python ISNS-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:14 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( PhysicalIndex, ) = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
( FcAddressIdOrZero, FcNameIdOrZero, ) = mibBuilder.importSymbols("FC-MGMT-MIB", "FcAddressIdOrZero", "FcNameIdOrZero")
( InetAddress, InetAddressType, InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2")
( TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class IsnsDdDdsModificationType(Bits):
    namedValues = NamedValues(("controlNode", 0), ("targetIscsiNode", 1), ("initiatorIscsiNode", 2), ("targetIfcpNode", 3), ("initiatorIfcpNode", 4), )
    
class IsnsDdFeatureType(Bits):
    namedValues = NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("reserved14", 14), ("reserved15", 15), ("reserved16", 16), ("reserved17", 17), ("reserved18", 18), ("reserved19", 19), ("reserved2", 2), ("reserved20", 20), ("reserved21", 21), ("reserved22", 22), ("reserved23", 23), ("reserved24", 24), ("reserved25", 25), ("reserved26", 26), ("reserved27", 27), ("reserved28", 28), ("reserved29", 29), ("reserved3", 3), ("reserved30", 30), ("bootlist", 31), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), )
    
class IsnsDdsStatusType(Bits):
    namedValues = NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("reserved14", 14), ("reserved15", 15), ("reserved16", 16), ("reserved17", 17), ("reserved18", 18), ("reserved19", 19), ("reserved2", 2), ("reserved20", 20), ("reserved21", 21), ("reserved22", 22), ("reserved23", 23), ("reserved24", 24), ("reserved25", 25), ("reserved26", 26), ("reserved27", 27), ("reserved28", 28), ("reserved29", 29), ("reserved3", 3), ("reserved30", 30), ("ddsEnabled", 31), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), )
    
class IsnsDiscoveryDomainId(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,4294967295)
    
class IsnsDiscoveryDomainSetId(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,4294967295)
    
class IsnsEntityIndexIdOrZero(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,4294967295)
    
class IsnsFcClassOfServiceType(Bits):
    namedValues = NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("reserved14", 14), ("reserved15", 15), ("reserved16", 16), ("reserved17", 17), ("reserved18", 18), ("reserved19", 19), ("reserved2", 2), ("reserved20", 20), ("reserved21", 21), ("reserved22", 22), ("reserved23", 23), ("reserved24", 24), ("reserved25", 25), ("reserved26", 26), ("reserved27", 27), ("class3", 28), ("class2", 29), ("reserved3", 3), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), )
    
class IsnsFcPortRoleType(Bits):
    namedValues = NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("reserved14", 14), ("reserved15", 15), ("reserved16", 16), ("reserved17", 17), ("reserved18", 18), ("reserved19", 19), ("reserved2", 2), ("reserved20", 20), ("reserved21", 21), ("reserved22", 22), ("reserved23", 23), ("reserved24", 24), ("reserved25", 25), ("reserved26", 26), ("reserved27", 27), ("reserved28", 28), ("control", 29), ("reserved3", 3), ("initiator", 30), ("target", 31), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), )
    
class IsnsIfcpScnType(Bits):
    namedValues = NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("reserved14", 14), ("reserved15", 15), ("reserved16", 16), ("reserved17", 17), ("reserved18", 18), ("reserved19", 19), ("reserved2", 2), ("reserved20", 20), ("reserved21", 21), ("reserved22", 22), ("reserved23", 23), ("initiatorAndSelfOnly", 24), ("targetAndSelfOnly", 25), ("managementRegistrationScn", 26), ("objectRemoved", 27), ("objectAdded", 28), ("objectUpdated", 29), ("reserved3", 3), ("ddOrDdsMemberRemoved", 30), ("ddOrDdsMemberAdded", 31), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), )
    
class IsnsIscsiNodeType(Bits):
    namedValues = NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("reserved14", 14), ("reserved15", 15), ("reserved16", 16), ("reserved17", 17), ("reserved18", 18), ("reserved19", 19), ("reserved2", 2), ("reserved20", 20), ("reserved21", 21), ("reserved22", 22), ("reserved23", 23), ("reserved24", 24), ("reserved25", 25), ("reserved26", 26), ("reserved27", 27), ("reserved28", 28), ("control", 29), ("reserved3", 3), ("initiator", 30), ("target", 31), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), )
    
class IsnsIscsiScnType(Bits):
    namedValues = NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("reserved14", 14), ("reserved15", 15), ("reserved16", 16), ("reserved17", 17), ("reserved18", 18), ("reserved19", 19), ("reserved2", 2), ("reserved20", 20), ("reserved21", 21), ("reserved22", 22), ("reserved23", 23), ("initiatorAndSelfOnly", 24), ("targetAndSelfOnly", 25), ("managementRegistrationScn", 26), ("objectRemoved", 27), ("objectAdded", 28), ("objectUpdated", 29), ("reserved3", 3), ("ddOrDdsMemberRemoved", 30), ("ddOrDdsMemberAdded", 31), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), )
    
class IsnsNodeIndexId(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,4294967295)
    
class IsnsPortalGroupIndexId(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,4294967295)
    
class IsnsPortalGroupTagIdOrNull(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(-1,65535)
    
class IsnsPortalIndexId(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,4294967295)
    
class IsnsPortalPortTypeId(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("udp", 1), ("tcp", 2), )
    
class IsnsPortalSecurityType(Bits):
    namedValues = NamedValues(("reserved0", 0), ("reserved1", 1), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("reserved14", 14), ("reserved15", 15), ("reserved16", 16), ("reserved17", 17), ("reserved18", 18), ("reserved19", 19), ("reserved2", 2), ("reserved20", 20), ("reserved21", 21), ("reserved22", 22), ("reserved23", 23), ("reserved24", 24), ("tunnelModePreferred", 25), ("transportModePreferred", 26), ("pfsEnabled", 27), ("agressiveModeEnabled", 28), ("mainModeEnabled", 29), ("reserved3", 3), ("ikeIPsecEnabled", 30), ("bitmapVALID", 31), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), )
    
class IsnsSrvrDiscoveryMethodsType(Bits):
    namedValues = NamedValues(("dhcp", 0), ("slp", 1), ("multicastGroupHb", 2), ("broadcastHb", 3), ("cfgdServerList", 4), ("other", 5), )
    

# Objects

isnsMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 163)).setRevisions(("2007-07-11 00:00",))
if mibBuilder.loadTexts: isnsMIB.setOrganization("IETF IPS Working Group")
if mibBuilder.loadTexts: isnsMIB.setContactInfo("\nAttn: Kevin Gibbons\n      2Wire, Inc.\n      1704 Automation Parkway\n      San Jose, CA 95131\n      USA\n      Tel: +1 408-895-1387\n      Fax: +1 408-428-9590\n      Email: kgibbons@yahoo.com\n\n      G.D. Ramkumar\n      SnapTell, Inc.\n      2741 Middlefield Rd, Suite 200\n      Palo Alto, CA 94306\n      USA\n      Tel: +1 650-326-7627\n      Fax: +1 650-326-7620\n      Email: gramkumar@stanfordalumni.org\n\n      Scott Kipp\n      Brocade\n      4 McDATA Pkwy\n      Broomfield, CO 80021\n      USA\n      Tel: +1 720-558-3452\n      Fax: +1 720-558-8999\n      Email: skipp@brocade.com\n            ")
if mibBuilder.loadTexts: isnsMIB.setDescription("This module defines management information\nspecific to internet Storage Name Service\n(iSNS) management.\n\nCopyright (C) The IETF Trust (2007).\nThis version of this MIB module is part\nof RFC 4939; see the RFC itself for full\nlegal notices.")
isnsNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 0))
isnsObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 1))
isnsServerInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 1, 1))
isnsServerTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 1))
if mibBuilder.loadTexts: isnsServerTable.setDescription("This table provides a list of the iSNS Server instances\nthat are managed through the same SNMP context.")
isnsServerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"))
if mibBuilder.loadTexts: isnsServerEntry.setDescription("This is a row in the iSNS Server instance table.  The number\nof rows is dependent on the number of iSNS Server instances\nthat are being managed through the same SNMP context.")
isnsServerIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsServerIndex.setDescription("This object uniquely identifies the iSNS Server being\nmanaged by the SNMP context and is the key for this table.\nThis is an instance index for each iSNS Server being\nmanaged.  The value of this object is used elsewhere in\nthe MIB to reference specific iSNS Servers.")
isnsServerName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerName.setDescription("A non-unique name that can be assigned to the iSNS Server\ninstance.  If not configured, then the string SHALL be\nzero-length.")
isnsServerIsnsVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerIsnsVersion.setDescription("The iSNS version value as contained in messages received\nfrom the current primary server.  The header of each iSNSP\nmessage contains the iSNS version of the sender.  If\nunknown, the reported value is 0.")
isnsServerVendorInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerVendorInfo.setDescription("If this server instance is utilizing the product of a\nparticular 'vendor', then this managed object contains\nthat vendor's name and version.  Otherwise, the\nstring SHALL be zero-length.  The format of the string\nis as follows: Vendor Name, Vendor Version, Vendor\nDefined Information.\n\n      Field           Description\n    ---------       ----------------\n   Vendor Name      The name of the vendor (if one exists)\n   Vendor Version   The version of the vendor product\n   Vendor Defined   This follows the second comma in the\n                    string, if one exists, and is vendor\n                    defined")
isnsServerPhysicalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 5), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerPhysicalIndex.setDescription("An index identifying the network interface for this iSNS\nServer within a network entity.  This index maps to the\nentPhysicalIndex of entPhysicalTable table in RFC 4133.  The\nentPhysicalClass value for the table row must be 'port', as\nthe interface must be able to send and receive data.")
isnsServerTcpPort = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerTcpPort.setDescription("Indicates the TCP port this iSNS instance is accepting\niSNSP messages on, generally the iSNS well-known port.\nThe well-known TCP port for iSNSP is 3205.  If TCP is\nnot supported by this server instance, then the value\nis 0.")
isnsServerUdpPort = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerUdpPort.setDescription("Indicates the UDP port this iSNS instance is accepting\niSNSP messages on; generally, the iSNS well-known port.\nThe well-known UDP port for iSNSP is 3205.  If UDP is\nnot supported by this server instance, then the value\nis 0.")
isnsServerDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion that\nthis iSNS server became active or suffered a\ndiscontinuity.")
isnsServerRole = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notSet", 1), ("server", 2), ("backupServer", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerRole.setDescription("The current operational mode of this iSNS Server instance.\n\nValue             Description\n---------         ----------------\nnotSet           The iSNS Server role is not\n                configured.\nserver           The iSNS Server instance is\n                an operational iSNS Server.\nbackupServer     The iSNS Server instance is\n\n\n\n                currently acting as a backup.")
isnsServerDiscoveryMethodsEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 10), IsnsSrvrDiscoveryMethodsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerDiscoveryMethodsEnabled.setDescription("Indicates the discovery methods currently enabled for\nthis iSNS Server instance.  This allows a client to\ndetermine what discovery methods can be used for\nthis iSNS Server.  Additional methods of discovery may\nalso be supported.")
isnsServerDiscoveryMcGroupType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerDiscoveryMcGroupType.setDescription("The type of Internet address in\nisnsServerDiscoveryMcGroupAddress.  If the address is\nspecified, then it must be a valid multicast address and the\nvalue of this object must be ipv4(1), ipv6(2), ipv4z(3), or\nipv6z(4); otherwise, the value of this object is\nunknown(0), and the value of\nisnsServerDiscoveryMcGroupAddress is the zero-length string.")
isnsServerDiscoveryMcGroupAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerDiscoveryMcGroupAddress.setDescription("The multicast group that iSNS Heartbeat messages are\nsent to if multicast-based discovery has been enabled\nfor this server instance.  If not configured, then the\nstring SHALL be zero-length.  The format of this\nobject is specified by isnsServerDiscoveryMcGroupType.")
isnsServerEsiNonResponseThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerEsiNonResponseThreshold.setDescription("Entity Status Inquiry (ESI) Non-Response Threshold -\n\n\n\nthe number of ESI messages that will be sent without\nreceiving a response before an entity is deregistered\nfrom the iSNS database.  A value of 0 indicates\nEntities will never be deregistered due to non-receipt\nof ESI messages.")
isnsServerEnableControlNodeMgtScn = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 14), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerEnableControlNodeMgtScn.setDescription("Indicates if the iSNS Server administrative option to send\nManagement SCNs to Control Nodes is enabled.  Management\nSCNs are used by Control Nodes to monitor and control an\niSNS Server.  If enabled, Control Nodes can register to\nreceive Management SCNs.")
isnsServerDefaultDdDdsStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("inNoDomain", 1), ("inDefaultDdAndDds", 2), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerDefaultDdDdsStatus.setDescription("This indicates the Discovery Domain (DD) and Discovery\nDomain Set (DDS) membership status for a new device\nwhen registered in the iSNS Server instance.  Either the\nnew device will not be in a DD/DDS, or will be placed\ninto a default DD and default DDS.  The default setting\nis inNoDomain.")
isnsServerUpdateDdDdsSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 16), IsnsDdDdsModificationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerUpdateDdDdsSupported.setDescription("The methods that this iSNS Server instance supports\nto modify Discovery Domains and Discovery Domain Sets.")
isnsServerUpdateDdDdsEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 1, 1, 17), IsnsDdDdsModificationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsServerUpdateDdDdsEnabled.setDescription("This indicates the methods this server instance currently\nallows for modifying Discovery Domains and Discovery\nDomain Sets.")
isnsNumObjectsTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 2))
if mibBuilder.loadTexts: isnsNumObjectsTable.setDescription("Table providing the number of registered objects of each\ntype in the iSNS Server instance.  The number of entries is\ndependent upon the number of iSNS Server instances being\nmanaged.")
isnsNumObjectsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 2, 1))
if mibBuilder.loadTexts: isnsNumObjectsEntry.setDescription("Entry of an iSNS Server instance.")
isnsNumDds = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 2, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsNumDds.setDescription("The current total number of Discovery Domain Sets\nin this iSNS instance.  This is the number of rows\nin the isnsDdsTable.")
isnsNumDd = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 2, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsNumDd.setDescription("The current total number of Discovery Domains\nin this iSNS instance.  This is the number of rows in the\nisnsDdTable.")
isnsNumEntities = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 2, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsNumEntities.setDescription("The current number of Entities registered in this\niSNS Server instance.  This is the number of rows in\nthe isnsRegEntityTable for this instance.")
isnsNumPortals = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 2, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsNumPortals.setDescription("The current total number of Portals registered in iSNS.\nThis is the number of rows in isnsRegPortalTable.")
isnsNumPortalGroups = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsNumPortalGroups.setDescription("The current total number of Portal Groups registered in\niSNS.  This is the number of rows in isnsRegPgTable.")
isnsNumIscsiNodes = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsNumIscsiNodes.setDescription("The current total number of iSCSI node entries registered\nin the iSNS.  This is the number rows in\nisnsRegIscsiNodeTable.")
isnsNumFcPorts = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 2, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsNumFcPorts.setDescription("The current total number of FC Port entries registered\nin the iSNS.  This is the number of rows in\nisnsRegFcPortTable.")
isnsNumFcNodes = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 2, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsNumFcNodes.setDescription("The current total number of FC node entries registered\nin the iSNS.  This is the number of rows in\nisnsRegFcNodeTable.")
isnsControlNodeInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 1, 1, 3))
isnsControlNodeIscsiTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 3, 1))
if mibBuilder.loadTexts: isnsControlNodeIscsiTable.setDescription("Specified iSCSI Nodes that can register or are registered\nas control nodes.  The number of rows is dependent on the\nnumber of iSCSI Control Nodes.")
isnsControlNodeIscsiEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 3, 1, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsControlNodeIscsiNodeIndex"))
if mibBuilder.loadTexts: isnsControlNodeIscsiEntry.setDescription("This is an iSCSI Control Node entry for a specific iSNS\nserver instance.")
isnsControlNodeIscsiNodeIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 3, 1, 1, 1), IsnsNodeIndexId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsControlNodeIscsiNodeIndex.setDescription("The index for the iSCSI storage node authorized to act\nas a control node.")
isnsControlNodeIscsiNodeName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsControlNodeIscsiNodeName.setDescription("The iSCSI Name of the initiator or target associated with\nthe storage node.  The iSCSI Name cannot be longer than\n223 bytes.  The iSNS Server internal maximum size is 224\nbytes to provide NULL termination.  This is the iSCSI Node\nName for the storage node authorized and/or acting as a\ncontrol node.")
isnsControlNodeIscsiIsRegistered = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsControlNodeIscsiIsRegistered.setDescription("Indicates whether the control node is currently\nregistered in the iSNS Server instance.")
isnsControlNodeIscsiRcvMgtSCN = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsControlNodeIscsiRcvMgtSCN.setDescription("Indicates whether the Control Node has registered to\nreceive Management SCNs.  Management SCNs are sent to\na Control Node if they are enabled, as indicated by\nisnsServerEnableControlNodeMgtScn, and the Control\nNode has registered for them.")
isnsControlNodeFcPortTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 3, 2))
if mibBuilder.loadTexts: isnsControlNodeFcPortTable.setDescription("Specified FC Ports that can register or are registered as\ncontrol nodes.  The number of rows is dependent on the\nnumber of FC Port Control Nodes.")
isnsControlNodeFcPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 3, 2, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsControlNodeFcPortWwpn"))
if mibBuilder.loadTexts: isnsControlNodeFcPortEntry.setDescription("FC Port control node entry.")
isnsControlNodeFcPortWwpn = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 3, 2, 1, 1), FcNameIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsControlNodeFcPortWwpn.setDescription("The FC Port World Wide Port Name that can and/or is acting\nas a Control Node for the specified iSNS Server.  A zero-\nlength string is not valid for this managed object.\nThis managed object, combined with the isnsServerIndex, is\nthe key for this table.")
isnsControlNodeFcPortIsRegistered = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsControlNodeFcPortIsRegistered.setDescription("Indicates whether the control node is currently\nregistered in the iSNS Server instance.")
isnsControlNodeFcPortRcvMgtSCN = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsControlNodeFcPortRcvMgtSCN.setDescription("Indicates whether the Control Node has registered to\nreceive Management SCNs.  Management SCNs are sent to\na Control Node if they are enabled, as indicated by\nisnsServerEnableControlNodeMgtScn, and the Control\nNode has registered for them.")
isnsDdsInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 1, 1, 4))
isnsDdsTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 4, 1))
if mibBuilder.loadTexts: isnsDdsTable.setDescription("A table containing configuration information for each\nDiscovery Domain Set (DDS) registered in the iSNS Server\ninstance.  The number of rows in the table is dependent\non the number of DDSs registered in the specified iSNS\nserver instance.")
isnsDdsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 4, 1, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsDdsId"))
if mibBuilder.loadTexts: isnsDdsEntry.setDescription("Information on one Discovery Domain Set (DDS) registered\nin the iSNS Server instance.")
isnsDdsId = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 4, 1, 1, 1), IsnsDiscoveryDomainSetId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsDdsId.setDescription("The ID that refers to this Discovery Domain Set and\nindex to the table.")
isnsDdsSymbolicName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 4, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdsSymbolicName.setDescription("The Discovery Domain Set Symbolic Name field contains\na unique variable-length description (up to 255 bytes)\nthat is associated with the DDS.  If a Symbolic Name is\nnot provided, then one will be generated by the iSNS\nserver.")
isnsDdsStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 4, 1, 1, 3), IsnsDdsStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdsStatus.setDescription("The status of this Discovery Domain Set (DDS).")
isnsDdsMemberTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 4, 2))
if mibBuilder.loadTexts: isnsDdsMemberTable.setDescription("A table containing Discovery Domains (DDs) that have\nbeen assigned to specific Discovery Domain Sets (DDSs).\nThe number of rows in the table is dependent on the\nnumber of DD to DDS relationships in the iSNS instance.")
isnsDdsMemberEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 4, 2, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsDdsId"), (0, "ISNS-MIB", "isnsDdsMemberDdId"))
if mibBuilder.loadTexts: isnsDdsMemberEntry.setDescription("The mapping of one Discovery Domain (DD) to a Discovery\nDomain Set (DDS).  This indicates the DD is a member of\nthe DDS.")
isnsDdsMemberDdId = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 4, 2, 1, 1), IsnsDiscoveryDomainId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsDdsMemberDdId.setDescription("The ID that identifies the Discovery Domain\nthat is a member of the Discovery Domain Set.")
isnsDdsMemberSymbolicName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 4, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdsMemberSymbolicName.setDescription("The Symbolic Name of the Discovery Domain that is a member\nof this DDS.  This value SHALL be identical to the object\nisnsDdSymbolicName for the associated DD ID.")
isnsDdInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 1, 1, 5))
isnsDdTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 1))
if mibBuilder.loadTexts: isnsDdTable.setDescription("A table containing configuration information for each\nDiscovery Domain (DD) registered in the iSNS.  The number\nof rows in the table is dependent on the number of DDs\nregistered in the iSNS instance.")
isnsDdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 1, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsDdId"))
if mibBuilder.loadTexts: isnsDdEntry.setDescription("Information on a Discovery Domain (DD) registered in\nthe iSNS Server instance.")
isnsDdId = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 1, 1, 1), IsnsDiscoveryDomainId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsDdId.setDescription("The ID that refers to this Discovery Domain, and the\nindex to the table.")
isnsDdSymbolicName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdSymbolicName.setDescription("The Discovery Domain Symbolic Name field contains a\nunique variable-length description (up to 255 bytes)\nthat is associated with the DD.")
isnsDdFeatures = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 1, 1, 3), IsnsDdFeatureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdFeatures.setDescription("This defines the features the Discovery Domain has.")
isnsDdIscsiMemberTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 2))
if mibBuilder.loadTexts: isnsDdIscsiMemberTable.setDescription("A table containing iSCSI node indexes that have been\nassigned to specific DDs in this iSNS Server instance.  The\nnumber of rows in the table is dependent on the number of\nrelationships between iSCSI Nodes and DDs registered in the\niSNS instance.")
isnsDdIscsiMemberEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 2, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsDdId"), (0, "ISNS-MIB", "isnsDdIscsiMemberIndex"))
if mibBuilder.loadTexts: isnsDdIscsiMemberEntry.setDescription("The mapping of one iSCSI Node to a Discovery Domain to\nindicate membership in the DD.  The indexes are the iSNS\nserver instance, the DD ID of the Discovery Domain, and\nthe iSCSI Node Index of the iSCSI Node.")
isnsDdIscsiMemberIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 2, 1, 1), IsnsNodeIndexId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsDdIscsiMemberIndex.setDescription("The index for this member iSCSI node entry.")
isnsDdIscsiMemberName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 223))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdIscsiMemberName.setDescription("The iSCSI Name associated with the storage node.  The\niSCSI Name cannot be longer than 223 bytes.  The iSNS\nserver internal maximum size is 224 bytes to provide\nNULL termination.  This is the iSCSI Name for the storage\nnode that is a member of the DD.  This value maps 1 to 1\nto the isnsDdIscsiMemberIndex node index.  The iSCSI Name\nfield is too long to be easily used for an index directly.\nThe node index used for a specific node name is only\npersistent across iSNS Server reinitializations for nodes\nthat are in a Discovery Domain (DD) or are registered\ncontrol nodes.  This value is only required during row\ncreation if the storage node is not yet registered in the\niSNS Server instance.  If the storage node is not yet\nregistered, then the iSCSI Name MUST be provided with the\niSCSI node index during row creation in order to create the\n1-to-1 mapping.")
isnsDdIscsiMemberIsRegistered = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdIscsiMemberIsRegistered.setDescription("This indicates whether this member of the DD is currently\nregistered in the iSNS Server instance.  iSCSI Storage\nNode members do not need to be currently registered in\norder for their iSCSI Name and Index to be added to\na DD.")
isnsDdPortalMemberTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 3))
if mibBuilder.loadTexts: isnsDdPortalMemberTable.setDescription("A table containing currently registered and unregistered\nportal objects that have been explicitly assigned to\nspecific DDs.  Explicit assignment of a portal to a DD\nis only done when a specific set of portals are preferred\nfor use within a DD.  Otherwise, for iSCSI, the Portal\nGroup Object should be used for identifying which portals\nprovide access to which storage nodes.  The number of rows\nin the table is dependent on the number of explicit\nrelationships between portals and DDs registered in the\niSNS.")
isnsDdPortalMemberEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 3, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsDdId"), (0, "ISNS-MIB", "isnsDdPortalMemberIndex"))
if mibBuilder.loadTexts: isnsDdPortalMemberEntry.setDescription("Each entry indicates an explicit addition of a portal to a\ndiscovery domain.  The explicit addition of an entity portal\nto a discovery domain indicates the portal is preferred for\naccess to nodes of the entity for this discovery domain.\nRegistered Portal Group objects are used in iSCSI to\nindicate mapping of portals to nodes across all discovery\ndomains.  Portals that have been explicitly mapped to a\ndiscovery domain will be returned as part of a query that\nis scoped to that discovery domain.  If no portal of an\nentity has been explicitly mapped to a discovery domain,\nthen all portals of the entity that provide access to a\nstorage node are returned as part of a query.  The table\nindexes are the server instance, the DD ID of the Discovery\nDomain, and the Portal Index of the portal.")
isnsDdPortalMemberIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 3, 1, 1), IsnsPortalIndexId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsDdPortalMemberIndex.setDescription("The index for a portal explicitly contained in the discovery\ndomain.  This managed object, combined with isnsServerIndex\nand isnsDdId, is the key for this table.")
isnsDdPortalMemberAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdPortalMemberAddressType.setDescription("The type of Inet address in isnsDdPortalMemberAddress.  If\nthe address is specified, then it must be a valid unicast\naddress and the value of this object must be ipv4(1),\nipv6(2), ipv4z(3), or ipv6z(4); otherwise, the value\nof this object is unknown(0), and the value of\nisnsDdPortalMemberAddress is the zero-length string.")
isnsDdPortalMemberAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdPortalMemberAddress.setDescription("The Inet Address for the portal.  The format of this\nobject is specified by isnsDdPortalMemberAddressType.")
isnsDdPortalMemberPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 3, 1, 4), IsnsPortalPortTypeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdPortalMemberPortType.setDescription("The port type for the portal, either UDP or TCP.")
isnsDdPortalMemberPort = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 3, 1, 5), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdPortalMemberPort.setDescription("The port number for the portal.  Whether the portal\ntype is TCP or UDP is indicated by\nisnsDdPortalMemberPortType.")
isnsDdPortalMemberIsRegistered = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdPortalMemberIsRegistered.setDescription("This indicates whether this member of the DD is currently\nregistered in the iSNS Server instance.  Portals that are\nDD members do not need to be currently registered in\norder for them to be added to a DD.")
isnsDdFcPortMemberTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 4))
if mibBuilder.loadTexts: isnsDdFcPortMemberTable.setDescription("A table containing FC Port World Wide Names (WWN) that\nhave been assigned to specific DDs.  The number of rows\nin the table is dependent on the number of relationships\nbetween FC Ports and DDs registered in the iSNS.")
isnsDdFcPortMemberEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 4, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsDdId"), (0, "ISNS-MIB", "isnsDdFcPortMemberPortName"))
if mibBuilder.loadTexts: isnsDdFcPortMemberEntry.setDescription("The association of one FC Port with a Discovery Domain.\nMembership of an FC Port in a Discovery Domain is\nindicated by creating a row for the appropriate DD ID\nand FC Port WWN.")
isnsDdFcPortMemberPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 4, 1, 1), FcNameIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsDdFcPortMemberPortName.setDescription("The Port WWN of the FC Port that is a member of the DD.  The\nvalue MUST be a valid FC WWN, as per the FC-GS (Fibre Channel -\nGeneric Services) standard.  This managed object, combined\nwith the isnsServerIndex and isnsDdId are the key for this\ntable.  A zero-length string is not a valid value for this\nmanaged object.")
isnsDdFcPortMemberIsRegistered = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 5, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsDdFcPortMemberIsRegistered.setDescription("This indicates whether this member of the DD is currently\nregistered in the iSNS Server instance.")
isnsReg = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 1, 1, 6))
isnsRegEntityInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1))
isnsRegEntityTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 1))
if mibBuilder.loadTexts: isnsRegEntityTable.setDescription("A table containing registered Entity objects in each iSNS\nserver instance.  The number of entries in the table is\ndependent on the number of Entity objects registered in the\niSNS Server instances.  All Entity objects are registered in\nthe iSNS using the iSNS protocol.")
isnsRegEntityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 1, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsRegEntityIndex"))
if mibBuilder.loadTexts: isnsRegEntityEntry.setDescription("Information on one registered Entity object in an iSNS\nserver instance.")
isnsRegEntityIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 1, 1, 1), IsnsEntityIndexIdOrZero().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsRegEntityIndex.setDescription("The Entity Index for this entity.  This index is assigned\nby the iSNS Server when an Entity is initially registered.\nThe Entity Index can be used to represent a registered\nEntity object in situations where the Entity EID would\nbe too long/unwieldy.  Zero is not a valid value for this\nobject.")
isnsRegEntityEID = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityEID.setDescription("The EID is a unique registered Entity object identifier, as\nspecified in the iSNS Specification.  This is the iSNS\nEntity Identifier for the registered Entity object.")
isnsRegEntityProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityProtocol.setDescription("The block storage protocol supported by this entity, as\ndefined in the iSNS Specification, Section 6.2.2.  The\nfollowing values are initially assigned.\n\n          Type Value       Entity Type\n          ----------       -----------\n             1             No Protocol\n             2             iSCSI\n             3             iFCP\n           All Others      As assigned by IANA\n\nThe full set of current Block Storage Protocols are\nspecified in the IANA-maintained registry of assigned\niSNS parameters.  Please refer to RFC 4171 and the iSNS\nparameters maintained at IANA.")
isnsRegEntityManagementAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityManagementAddressType.setDescription("The type of Inet address in isnsRegEntityManagementAddress.\nIf the address is specified, then it must be a valid unicast\naddress and the value of this object must be ipv4(1),\nipv6(2), ipv4z(3), or ipv6z(4); otherwise, the value of\nthis object is unknown(0), and the value of\nisnsRegEntityManagementAddress is the zero-length string.")
isnsRegEntityManagementAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 1, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityManagementAddress.setDescription("The iSNS Management IP Address for the registered Entity\nobject.  The format of this object is specified by\nisnsRegEntityManagementAddressType.")
isnsRegEntityTimestamp = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityTimestamp.setDescription("The iSNS Entity Registration Timestamp for the registered\nEntity object.  This is the most recent date and time that\nthe registered Entity object, and associated registered\nobjects contained in the Entity, were registered or\nupdated.")
isnsRegEntityVersionMin = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityVersionMin.setDescription("The minimum version supported for the block storage protocol\nspecified by isnsRegEntityProtocol.  The protocol version\nspecified can be from 1 to 254.  A value of 255 is a wildcard\nvalue, indicating no minimum version value has been specified\nfor this Entity.  Entity registrations with an\nisnsRegEntityProtocol of 'No Protocol' SHALL have an\nisnsRegEntityVersionMin value of 0.")
isnsRegEntityVersionMax = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityVersionMax.setDescription("The maximum version supported for the block storage protocol\nspecified by isnsRegEntityProtocol.  The protocol version\nspecified can be from 1 to 254.  A value of 255 is a wildcard\n\n\n\nvalue, indicating no maximum version value has been specified\nfor this Entity.  Entity registrations with an\nisnsRegEntityProtocol of 'No Protocol' SHALL have an\nisnsRegEntityVersionMax value of 0.")
isnsRegEntityRegistrationPeriod = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityRegistrationPeriod.setDescription("The iSNS Entity Status Inquiry (ESI) registration period,\nwhich indicates the maximum time, in seconds, that the\nregistration will be maintained without receipt of an iSNSP\nmessage from the entity.  If the Registration Period is set\nto 0, then the Entity SHALL NOT be deregistered due to no\ncontact with the entity.")
isnsRegEntityNumObjectsTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 2))
if mibBuilder.loadTexts: isnsRegEntityNumObjectsTable.setDescription("A table containing information on the number of registered\nobjects associated with a registered Entity in the iSNS\nserver instance.  The number of entries in the table is\ndependent on the number of registered Entity objects in the\niSNS.")
isnsRegEntityNumObjectsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 2, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsRegEntityIndex"))
if mibBuilder.loadTexts: isnsRegEntityNumObjectsEntry.setDescription("Information on the number of registered objects associated\nwith a registered Entity object in an iSNS Server instance.")
isnsRegEntityInfoNumPortals = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 2, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityInfoNumPortals.setDescription("The number of Portals associated with this Entity.")
isnsRegEntityInfoNumPortalGroups = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 2, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityInfoNumPortalGroups.setDescription("The number of Portal Groups associated with this Entity.")
isnsRegEntityInfoNumIscsiNodes = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 2, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityInfoNumIscsiNodes.setDescription("The number of iSCSI Storage Nodes associated with this\nEntity.")
isnsRegEntityInfoNumFcPorts = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 2, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityInfoNumFcPorts.setDescription("The number of FC Ports associated with this Entity.")
isnsRegEntityInfoNumFcNodes = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 1, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegEntityInfoNumFcNodes.setDescription("The number of FC Nodes associated with this Entity.")
isnsRegPortalInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2))
isnsRegPortalTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1))
if mibBuilder.loadTexts: isnsRegPortalTable.setDescription("A table containing the registered Portals in the iSNS.\nThe number of entries is dependent on the number of\nPortals registered in the iSNS.")
isnsRegPortalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsRegEntityIndex"), (0, "ISNS-MIB", "isnsRegPortalPortalIndex"))
if mibBuilder.loadTexts: isnsRegPortalEntry.setDescription("Information on one registered Entity Portal in the iSNS.\nThe Entity Index is part of the table index to quickly\nfind Portals that support a specific Entity.")
isnsRegPortalPortalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1, 1), IsnsPortalIndexId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsRegPortalPortalIndex.setDescription("The index for this Entity Portal.")
isnsRegPortalAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPortalAddressType.setDescription("The type of Inet address in isnsRegPortalAddress.  If the\naddress is specified, then it must be a valid unicast\naddress and the value of this object must be ipv4(1),\nipv6(2), ipv4z(3), or ipv6z(4); otherwise, the value\nof this object is unknown(0), and the value of\nisnsRegPortalAddress is the zero-length string.")
isnsRegPortalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPortalAddress.setDescription("The Inet Address for this Portal as defined in the iSNS\nSpecification, RFC 4171.  The format of this object is\nspecified by isnsRegPortalAddressType.")
isnsRegPortalPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1, 4), IsnsPortalPortTypeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPortalPortType.setDescription("The port type for this Portal, either UDP or TCP, as\ndefined in the iSNS Specification, RFC 4171.")
isnsRegPortalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1, 5), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPortalPort.setDescription("The port number for this Portal as defined in the\niSNS Specification, RFC 4171.  Whether the Portal type\nis TCP or UDP is indicated by isnsRegPortalPortType.")
isnsRegPortalSymbolicName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPortalSymbolicName.setDescription("The Symbolic Name for this Portal as defined in the iSNS\nSpecification, RFC 4171.  If not provided, then the string\nSHALL be zero-length.")
isnsRegPortalEsiInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPortalEsiInterval.setDescription("The Entity Status Inquiry (ESI) Interval for this Portal\nas defined in the iSNS Specification, RFC 4171.  A value of\n0 indicates that ESI monitoring has not been configured for\nthis Portal.")
isnsRegPortalEsiPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1, 8), IsnsPortalPortTypeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPortalEsiPortType.setDescription("The port type for the ESI Port, either UDP or TCP, as\ndefined in the iSNS Specification, RFC 4171.")
isnsRegPortalEsiPort = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1, 9), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPortalEsiPort.setDescription("The TCP or UDP port number used for ESI monitoring.  Whether\nthe port type is TCP or UDP is indicated by\nisnsRegPortalEsiPortType.  A value of 0 indicates that ESI\nmonitoring is not enabled for this Portal.")
isnsRegPortalScnPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1, 10), IsnsPortalPortTypeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPortalScnPortType.setDescription("The port type for the SCN Port, either UDP or TCP, as\ndefined in the iSNS Specification, RFC 4171.")
isnsRegPortalScnPort = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1, 11), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPortalScnPort.setDescription("The TCP or UDP port used to receive SCN messages from the\niSNS Server.  Whether the port type is TCP or UDP is\nindicated by isnsRegPortalScnPortType.  A value of 0\nindicates that SCN message receipt is not enabled for this\nPortal.")
isnsRegPortalSecurityInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 2, 1, 1, 12), IsnsPortalSecurityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPortalSecurityInfo.setDescription("Indicates security attribute settings for the Portal as\nregistered in the iSNS server.  The bit for bitmapVALID must\nbe set in order for this attribute to contain valid\ninformation.  Setting a bit to 1 indicates the\nfeature is enabled.")
isnsRegPortalGroupInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 3))
isnsRegPgTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 3, 1))
if mibBuilder.loadTexts: isnsRegPgTable.setDescription("A table containing the registered Portal Groups (PGs) in\nthe iSNS Server instance.  The number of entries is\ndependent on the number of Portal Groups registered in\nthe iSNS.")
isnsRegPgEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 3, 1, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsRegEntityIndex"), (0, "ISNS-MIB", "isnsRegPgIndex"))
if mibBuilder.loadTexts: isnsRegPgEntry.setDescription("Information on one registered Portal Group in the iSNS\nserver instance.  The Entity Index is part of the table\nindex to quickly find Portal Groups that support Portals\nand iSCSI Storage Nodes in a specific Entity.")
isnsRegPgIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 3, 1, 1, 1), IsnsPortalGroupIndexId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsRegPgIndex.setDescription("The PG Index for this node.  The index is created by the\niSNS Server instance for uniquely identifying registered\nobjects.  The PG object is registered at the same time a\nPortal or Storage Node is registered using the iSNS\nprotocol.")
isnsRegPgIscsiNodeIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 3, 1, 1, 2), IsnsNodeIndexId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPgIscsiNodeIndex.setDescription("The index for the iSCSI Node associated with this PG.\nThis index can be used to reference the\nisnsRegIscsiNodeTable.")
isnsRegPgIscsiName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 223))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPgIscsiName.setDescription("The iSCSI Name of the initiator or target associated with\nthe storage node.  The iSCSI Name cannot be longer than\n223 bytes.  The iSNS Server internal maximum size is 224\nbytes to provide NULL termination.  This is the PG iSCSI\nName that uniquely identifies the iSCSI Storage Node that\nis associated with this PG.")
isnsRegPgPortalPortalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 3, 1, 1, 4), IsnsPortalIndexId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPgPortalPortalIndex.setDescription("The Portal Index for the Portal associated with this PG.\nThis index can be used to reference the isnsRegPortalTable.")
isnsRegPgPortalAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 3, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPgPortalAddressType.setDescription("The type of Inet address in isnsRegPgPortalAddress.  If\nthe address is specified, then it must be a valid unicast\naddress and the value of this object must be ipv4(1),\nipv6(2), ipv4z(3), or ipv6z(4); otherwise, the value\nof this object is unknown(0), and the value of\nisnsRegPgPortalAddress is the zero-length string.")
isnsRegPgPortalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 3, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPgPortalAddress.setDescription("The Inet Address for the Portal that is associated with\nthe PG.  The format of this object is specified by\nisnsRegPgPortalAddressType.")
isnsRegPgPortalPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 3, 1, 1, 7), IsnsPortalPortTypeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPgPortalPortType.setDescription("The port type, either UDP or TCP, for the Portal that\nis associated with this registered PG object.")
isnsRegPgPortalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 3, 1, 1, 8), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPgPortalPort.setDescription("The port number for the Portal that is associated with\nthis registered PG object.  Whether the Portal type is\nTCP or UDP is indicated by isnsRegPgPortalPortType.")
isnsRegPgPGT = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 3, 1, 1, 9), IsnsPortalGroupTagIdOrNull()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegPgPGT.setDescription("The Portal Group Tag (PGT) for the registered iSCSI Portal\nGroup object in an iSNS Server instance.  This indicates\nthe tag value that the Portal uses for access to the iSCSI\nStorage Node.  The PGT is used for coordinated access\nbetween multiple Portals, as described in the iSCSI\nSpecification, RFC 3720.  A PGT with no association is a\nNULL value.  The value of -1 indicates a NULL value.")
isnsRegIscsiNodeInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 4))
isnsRegIscsiNodeTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 4, 1))
if mibBuilder.loadTexts: isnsRegIscsiNodeTable.setDescription("A table containing the registered iSCSI Nodes in the iSNS\nserver instance.  Storage devices register using the iSNS\nprotocol.  While a device cannot be registered in an iSNS\nserver using SNMP, an entry can be deleted in order to\nremove 'stale' entries.  The number of entries is related\nto the number of iSCSI nodes registered in the iSNS.")
isnsRegIscsiNodeEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 4, 1, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsRegEntityIndex"), (0, "ISNS-MIB", "isnsRegIscsiNodeIndex"))
if mibBuilder.loadTexts: isnsRegIscsiNodeEntry.setDescription("Information on one iSCSI node that has been registered in\nthe iSNS Server instance.  New rows cannot be added using\nSNMP.")
isnsRegIscsiNodeIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 4, 1, 1, 1), IsnsNodeIndexId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsRegIscsiNodeIndex.setDescription("The index for this iSCSI node.")
isnsRegIscsiNodeName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 4, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 223))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegIscsiNodeName.setDescription("The iSCSI Name of the initiator or target associated with\nthe storage node.  The iSCSI Name cannot be longer than\n223 bytes.  The iSNS Server internal maximum size is 224\nbytes to provide NULL termination.  This is the iSCSI Name\nthat uniquely identifies the initiator, initiator/target,\ntarget, or control node in the network.")
isnsRegIscsiNodeType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 4, 1, 1, 3), IsnsIscsiNodeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegIscsiNodeType.setDescription("The Node Type defining the functions of this iSCSI node.")
isnsRegIscsiNodeAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 4, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegIscsiNodeAlias.setDescription("The Alias name of the iSCSI node.  This is a variable-length\ntext-based description of up to 255 bytes.")
isnsRegIscsiNodeScnTypes = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 4, 1, 1, 5), IsnsIscsiScnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegIscsiNodeScnTypes.setDescription("The State Change Notification (SCN) types enabled for this\niSCSI node.")
isnsRegIscsiNodeWwnToken = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 4, 1, 1, 6), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegIscsiNodeWwnToken.setDescription("This contains a globally unique 64-bit integer value that\ncan be used to represent the World Wide Node Name of the\niSCSI device in a Fibre Channel fabric.  This identifier is\nused during the device registration process, and MUST\nconform to the requirements in RFC 4171.  A zero-length string\nfor this managed object indicates that a Node WWN token has\nnot been assigned.")
isnsRegIscsiNodeAuthMethod = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 4, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegIscsiNodeAuthMethod.setDescription("This attribute contains a null-terminated string containing\nUTF-8 text listing the iSCSI authentication methods enabled\nfor this iSCSI Node, in order of preference.  The text\nvalues used to identify iSCSI authentication methods are\nembedded in this string attribute and delineated by a\ncomma.  The text values are identical to those found in\nRFC 3720 - iSCSI.  Additional vendor-specific text values\nare also possible.")
isnsRegFcNodeInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5))
isnsRegFcNodeTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 1))
if mibBuilder.loadTexts: isnsRegFcNodeTable.setDescription("A table containing the registered FC Nodes in the iSNS.\nThis supports iFCP as defined in RFC 4172.")
isnsRegFcNodeEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 1, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsRegFcNodeWwnn"))
if mibBuilder.loadTexts: isnsRegFcNodeEntry.setDescription("Information on one registered FC node that has been\nregistered in the iSNS.")
isnsRegFcNodeWwnn = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 1, 1, 1), FcNameIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsRegFcNodeWwnn.setDescription("The FC Node World Wide Node Name as defined in the iSNS\nSpecification, RFC 4171.  A zero-length string is not valid\nfor this managed object.")
isnsRegFcNodeSymbolicName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcNodeSymbolicName.setDescription("The FC Node Symbolic Name of the node as defined in the\niSNS Specification, RFC 4171.  This is a variable-length\ntext-based description.  If not provided, then the string\nSHALL be zero-length.")
isnsRegFcNodeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcNodeAddressType.setDescription("The type of Inet address in isnsRegFcNodeAddress.  If\nthe address is specified, then it must be a valid unicast\naddress and the value of this object must be ipv4(1),\nipv6(2), ipv4z(3), or ipv6z(4); otherwise, the value\nof this object is unknown(0), and the value of\nisnsRegFcNodeAddress is the zero-length string.")
isnsRegFcNodeAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcNodeAddress.setDescription("The FC Node Inet address of the node as defined in the\niSNS Specification, RFC 4171.  The format of this object is\nspecified by isnsRegFcNodeAddressType.")
isnsRegFcNodeIPA = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcNodeIPA.setDescription("This managed object identifies the FC Initial Process\nAssociator of the node as defined in the iSNS\nSpecification, RFC 4171.")
isnsRegFcNodeProxyIscsiName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 223))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcNodeProxyIscsiName.setDescription("The iSCSI Name used to represent the FC Node in the IP\nnetwork.  It is used as a pointer to the matching iSCSI Name\nentry in the iSNS Server.  Its value is usually registered\nby an FC-iSCSI gateway connecting the IP network to the\nfabric containing the FC device.")
isnsRegFcNodeNumFcPorts = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 1, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcNodeNumFcPorts.setDescription("The number of FC Ports associated with this FC Node.")
isnsRegFcPortTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2))
if mibBuilder.loadTexts: isnsRegFcPortTable.setDescription("Information on registered FC N_Ports in the iSNS.  FC Ports\nare associated with registered FC Nodes.  This supports\niFCP as defined in RFC 4172.")
isnsRegFcPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsRegEntityIndex"), (0, "ISNS-MIB", "isnsRegFcPortWwpn"))
if mibBuilder.loadTexts: isnsRegFcPortEntry.setDescription("Information on one FC Port that has been registered in\niSNS.")
isnsRegFcPortWwpn = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 1), FcNameIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("noaccess")
if mibBuilder.loadTexts: isnsRegFcPortWwpn.setDescription("The FC Port's World Wide Port Name as defined in the iSNS\nSpecification, RFC 4171.  A zero-length string is not valid\nfor this managed object.")
isnsRegFcPortID = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 2), FcAddressIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortID.setDescription("The FC Port's Port ID as defined in the iSNS Specification,\nRFC 4171.")
isnsRegFcPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortType.setDescription("The FC Port Type as defined in the iSNS Specification,\nRFC 4171, and the Fibre Channel Generic Services\nSpecification.  Current values are as shown below:\n       unknown      (0),\n       nPort        (1),\n\n\n\n       nlPort       (2),\n       fNlPort      (3),\n       fPort        (129),     -- x'81'\n       flPort       (130),     -- x'82'\n       ePort        (132),     -- x'84'\n       bPort        (133),     -- x'85'\n       mFcpPort     (65297),   -- x'FF11'\n       iFcpPort     (65298),   -- x'FF12'\n       unknownEnd   (65535)\nThe future assignment of any additional values will be\ndocumented in a revision of RFC 4171.")
isnsRegFcPortSymbolicName = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortSymbolicName.setDescription("The FC Port Symbolic Name as defined in the iSNS\nSpecification, RFC 4171.  If not provided, then the\nstring SHALL be zero-length.")
isnsRegFcPortFabricPortWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 5), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortFabricPortWwn.setDescription("The Fabric Port WWN for this entry as defined in the iSNS\nSpecification, RFC 4171.  A zero-length string for this\nmanaged object indicates that the Fabric Port WWN is not\nknown, or has not yet been registered with the iSNS Server.")
isnsRegFcPortHA = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 6), FcAddressIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortHA.setDescription("The FC Port Hard Address as defined in the iSNS\nSpecification, RFC 4171.")
isnsRegFcPortAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortAddressType.setDescription("The type of Inet address in isnsRegFcPortAddress.  If\nthe address is specified, then it must be a valid unicast\naddress and the value of this object must be ipv4(1),\nipv6(2), ipv4z(3), or ipv6z(4); otherwise, the value\nof this object is unknown(0), and the value of\nisnsRegFcPortAddress is the zero-length string.")
isnsRegFcPortAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortAddress.setDescription("The FC Port Inet Address as defined in the iSNS\nSpecification, RFC 4171.  The format of this object is\nspecified by isnsRegFcPortAddressType.")
isnsRegFcPortFcCos = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 9), IsnsFcClassOfServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortFcCos.setDescription("The FC Port Class of Service as defined in the iSNS\nSpecification, RFC 4171.")
isnsRegFcPortFc4Types = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortFc4Types.setDescription("The FC Port FC-4 Types as defined in the iSNS\nSpecification, RFC 4171.")
isnsRegFcPortFc4Descr = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(4, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortFc4Descr.setDescription("The FC Port FC-4 Descriptor as defined in the iSNS\nSpecification, RFC 4171.  The FC-4 Descriptor cannot be\nlonger than 255 bytes.  The iSNS Server internal maximum\nsize is 256 bytes to provide NULL termination.")
isnsRegFcPortFc4Features = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortFc4Features.setDescription("The FC Port FC-4 Features as defined in the iSNS\nSpecification, RFC 4171.")
isnsRegFcPortScnTypes = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 13), IsnsIfcpScnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortScnTypes.setDescription("The iFCP State Change Notification (SCN) types enabled for\nthe registered object.")
isnsRegFcPortRole = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 14), IsnsFcPortRoleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortRole.setDescription("The FC Port Role defines the role of the registered\nobject.")
isnsRegFcPortFcNodeWwnn = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 15), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortFcNodeWwnn.setDescription("The FC Node World Wide Node Name that is associated with\nthis FC Port as defined in the iSNS Specification, RFC 4171.\nThis managed object may contain a zero-length string prior\nto a device registering this value with the iSNS Server.")
isnsRegFcPortPpnWwn = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 2, 1, 16), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcPortPpnWwn.setDescription("The Permanent Port Name (PPN) attribute is the FC Port Name WWPN\nof the first Storage Node registered in the iSNS Database\nthat is associated with a particular FC Device (FC Node).\nThe PPN of all subsequent Storage Node registrations that\nare associated with that FC Device (FC Node) SHALL be set\nto the FC Port Name WWPN of the first Storage Node, as\ndefined in the iSNS Specification, RFC 4171.  This managed\nobject may contain a zero-length string prior to a device\nregistering this value with the iSNS Server.")
isnsRegFcNodePortTable = MibTable((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 3))
if mibBuilder.loadTexts: isnsRegFcNodePortTable.setDescription("A table containing the mapping of a registered FC Node and\nassociated registered iFCP Port to the supporting registered\nEntity object in an iSNS Server instance.")
isnsRegFcNodePortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 3, 1)).setIndexNames((0, "ISNS-MIB", "isnsServerIndex"), (0, "ISNS-MIB", "isnsRegFcNodeWwnn"), (0, "ISNS-MIB", "isnsRegFcPortWwpn"))
if mibBuilder.loadTexts: isnsRegFcNodePortEntry.setDescription("Information on one mapping from an FC Node and iFCP Port to\nan Entity object registered in an iSNS.")
isnsRegFcNodePortEntityIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 163, 1, 1, 6, 5, 3, 1, 1), IsnsEntityIndexIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isnsRegFcNodePortEntityIndex.setDescription("The Entity Index for the registered Entity object\nassociated with the FC Port and FC Node.  This managed\nobject may contain the value of zero prior to a device\nregistering this value with the iSNS Server.")
isnsNotificationsInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 1, 2))
isnsInstanceInfo = MibScalar((1, 3, 6, 1, 2, 1, 163, 1, 2, 1), SnmpAdminString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: isnsInstanceInfo.setDescription("Textual information about the notification event and the\niSNS Server generating the notification.  An example is:\niSNS Server Started.")
isnsAddressNotificationType = MibScalar((1, 3, 6, 1, 2, 1, 163, 1, 2, 2), InetAddressType()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: isnsAddressNotificationType.setDescription("The type of Inet address in isnsAddressNotification.  If\nthe address is specified, then it must be a valid unicast\naddress and the value of this object must be ipv4(1),\nipv6(2), ipv4z(3), or ipv6z(4); otherwise, the value\nof this object is unknown(0), and the value of\nisnsAddressNotification is the zero-length string.")
isnsAddressNotification = MibScalar((1, 3, 6, 1, 2, 1, 163, 1, 2, 3), InetAddress()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: isnsAddressNotification.setDescription("Identifies the IP address of the iSNS Server.  The format of\n\n\n\nthis object is specified by isnsAddressNotificationType.\nThe IP address will always be specified in the notification\nunless an error causes the IP address to not be known.")
isnsTcpPortNotification = MibScalar((1, 3, 6, 1, 2, 1, 163, 1, 2, 4), InetPortNumber()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: isnsTcpPortNotification.setDescription("Indicates the TCP port the iSNS Server is using,\nor 0 if TCP-based registrations are not supported.")
isnsUdpPortNotification = MibScalar((1, 3, 6, 1, 2, 1, 163, 1, 2, 5), InetPortNumber()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: isnsUdpPortNotification.setDescription("Indicates the UDP port the iSNS Server is using,\nor 0 if UDP-based registrations are not supported.")
isnsConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 2))
isnsCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 2, 1))
isnsGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 163, 2, 2))

# Augmentions
isnsServerEntry.registerAugmentions(("ISNS-MIB", "isnsNumObjectsEntry"))
isnsNumObjectsEntry.setIndexNames(*isnsServerEntry.getIndexNames())

# Notifications

isnsServerStart = NotificationType((1, 3, 6, 1, 2, 1, 163, 0, 1)).setObjects(*(("ISNS-MIB", "isnsAddressNotification"), ("ISNS-MIB", "isnsUdpPortNotification"), ("ISNS-MIB", "isnsInstanceInfo"), ("ISNS-MIB", "isnsAddressNotificationType"), ("ISNS-MIB", "isnsTcpPortNotification"), ) )
if mibBuilder.loadTexts: isnsServerStart.setDescription("This notification is sent when an iSNS Server begins\noperation.  The notification provides the following:\n       isnsInstanceInfo : iSNS Server textual information\n       isnsAddressTypeNotification : iSNS Server address type\n       isnsAddressNotification : iSNS Server address\n       isnsTcpPortNotification : iSNS Server TCP Port\n       isnsUdpPortNotification : iSNS Server UDP Port")
isnsServerShutdown = NotificationType((1, 3, 6, 1, 2, 1, 163, 0, 2)).setObjects(*(("ISNS-MIB", "isnsAddressNotification"), ("ISNS-MIB", "isnsUdpPortNotification"), ("ISNS-MIB", "isnsInstanceInfo"), ("ISNS-MIB", "isnsAddressNotificationType"), ("ISNS-MIB", "isnsTcpPortNotification"), ) )
if mibBuilder.loadTexts: isnsServerShutdown.setDescription("This notification is sent when an iSNS Server is\nshutdown.  The notification provides the following:\n       isnsInstanceInfo : iSNS Server textual information\n       isnsAddressTypeNotification : iSNS Server address type\n       isnsAddressNotification : iSNS Server address\n       isnsTcpPortNotification : iSNS Server TCP Port\n       isnsUdpPortNotification : iSNS Server UDP Port")

# Groups

isnsServerAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 163, 2, 2, 1)).setObjects(*(("ISNS-MIB", "isnsServerDefaultDdDdsStatus"), ("ISNS-MIB", "isnsServerTcpPort"), ("ISNS-MIB", "isnsServerUpdateDdDdsEnabled"), ("ISNS-MIB", "isnsServerDiscoveryMethodsEnabled"), ("ISNS-MIB", "isnsServerDiscoveryMcGroupAddress"), ("ISNS-MIB", "isnsServerDiscontinuityTime"), ("ISNS-MIB", "isnsServerPhysicalIndex"), ("ISNS-MIB", "isnsServerName"), ("ISNS-MIB", "isnsServerUdpPort"), ("ISNS-MIB", "isnsServerVendorInfo"), ("ISNS-MIB", "isnsServerEnableControlNodeMgtScn"), ("ISNS-MIB", "isnsServerDiscoveryMcGroupType"), ("ISNS-MIB", "isnsServerIsnsVersion"), ("ISNS-MIB", "isnsServerUpdateDdDdsSupported"), ("ISNS-MIB", "isnsServerRole"), ("ISNS-MIB", "isnsServerEsiNonResponseThreshold"), ) )
if mibBuilder.loadTexts: isnsServerAttributesGroup.setDescription("iSNS Server attributes.")
isnsServerNumObjectsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 163, 2, 2, 2)).setObjects(*(("ISNS-MIB", "isnsNumFcPorts"), ("ISNS-MIB", "isnsNumEntities"), ("ISNS-MIB", "isnsRegEntityInfoNumPortalGroups"), ("ISNS-MIB", "isnsNumPortals"), ("ISNS-MIB", "isnsNumPortalGroups"), ("ISNS-MIB", "isnsRegEntityInfoNumIscsiNodes"), ("ISNS-MIB", "isnsRegEntityInfoNumFcPorts"), ("ISNS-MIB", "isnsNumDd"), ("ISNS-MIB", "isnsNumFcNodes"), ("ISNS-MIB", "isnsRegEntityInfoNumFcNodes"), ("ISNS-MIB", "isnsNumIscsiNodes"), ("ISNS-MIB", "isnsRegEntityInfoNumPortals"), ("ISNS-MIB", "isnsNumDds"), ) )
if mibBuilder.loadTexts: isnsServerNumObjectsGroup.setDescription("Managed objects indicating the number of registered objects\nin an iSNS Server or the number of registered objects\nassociated with a registered Entity.  These managed objects\nare optional to implement.")
isnsServerIscsiControlNodeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 163, 2, 2, 3)).setObjects(*(("ISNS-MIB", "isnsControlNodeIscsiIsRegistered"), ("ISNS-MIB", "isnsControlNodeIscsiRcvMgtSCN"), ("ISNS-MIB", "isnsControlNodeIscsiNodeName"), ) )
if mibBuilder.loadTexts: isnsServerIscsiControlNodeGroup.setDescription("iSNS Server iSCSI control node managed objects.")
isnsServerIfcpPortControlNodeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 163, 2, 2, 4)).setObjects(*(("ISNS-MIB", "isnsControlNodeFcPortRcvMgtSCN"), ("ISNS-MIB", "isnsControlNodeFcPortIsRegistered"), ) )
if mibBuilder.loadTexts: isnsServerIfcpPortControlNodeGroup.setDescription("iSNS Server iFCP Port control node managed objects.")
isnsServerIscsiDdsDdObjGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 163, 2, 2, 5)).setObjects(*(("ISNS-MIB", "isnsDdPortalMemberAddressType"), ("ISNS-MIB", "isnsDdPortalMemberPort"), ("ISNS-MIB", "isnsDdPortalMemberIsRegistered"), ("ISNS-MIB", "isnsDdsSymbolicName"), ("ISNS-MIB", "isnsDdPortalMemberPortType"), ("ISNS-MIB", "isnsDdsMemberSymbolicName"), ("ISNS-MIB", "isnsDdIscsiMemberIsRegistered"), ("ISNS-MIB", "isnsDdIscsiMemberName"), ("ISNS-MIB", "isnsDdSymbolicName"), ("ISNS-MIB", "isnsDdPortalMemberAddress"), ("ISNS-MIB", "isnsDdFeatures"), ("ISNS-MIB", "isnsDdsStatus"), ) )
if mibBuilder.loadTexts: isnsServerIscsiDdsDdObjGroup.setDescription("iSNS Server DDS and DD managed objects for iSCSI.")
isnsServerIfcpDdsDdObjGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 163, 2, 2, 6)).setObjects(*(("ISNS-MIB", "isnsDdPortalMemberIsRegistered"), ("ISNS-MIB", "isnsDdSymbolicName"), ("ISNS-MIB", "isnsDdPortalMemberAddress"), ("ISNS-MIB", "isnsDdPortalMemberPort"), ("ISNS-MIB", "isnsDdFeatures"), ("ISNS-MIB", "isnsDdsStatus"), ("ISNS-MIB", "isnsDdPortalMemberPortType"), ("ISNS-MIB", "isnsDdPortalMemberAddressType"), ("ISNS-MIB", "isnsDdsSymbolicName"), ("ISNS-MIB", "isnsDdFcPortMemberIsRegistered"), ) )
if mibBuilder.loadTexts: isnsServerIfcpDdsDdObjGroup.setDescription("iSNS Server DDS and DD managed objects for iFCP.")
isnsServerRegIscsiObjGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 163, 2, 2, 7)).setObjects(*(("ISNS-MIB", "isnsRegPortalScnPortType"), ("ISNS-MIB", "isnsRegEntityManagementAddress"), ("ISNS-MIB", "isnsRegEntityInfoNumPortalGroups"), ("ISNS-MIB", "isnsRegPortalPortType"), ("ISNS-MIB", "isnsRegPortalEsiPortType"), ("ISNS-MIB", "isnsRegIscsiNodeWwnToken"), ("ISNS-MIB", "isnsRegPgIscsiNodeIndex"), ("ISNS-MIB", "isnsRegPgPortalAddress"), ("ISNS-MIB", "isnsRegEntityTimestamp"), ("ISNS-MIB", "isnsRegEntityVersionMin"), ("ISNS-MIB", "isnsRegPortalAddressType"), ("ISNS-MIB", "isnsRegPgPortalPortType"), ("ISNS-MIB", "isnsRegIscsiNodeName"), ("ISNS-MIB", "isnsRegPortalEsiInterval"), ("ISNS-MIB", "isnsRegEntityInfoNumIscsiNodes"), ("ISNS-MIB", "isnsRegEntityEID"), ("ISNS-MIB", "isnsRegPgPGT"), ("ISNS-MIB", "isnsRegEntityInfoNumFcPorts"), ("ISNS-MIB", "isnsRegEntityVersionMax"), ("ISNS-MIB", "isnsRegPgIscsiName"), ("ISNS-MIB", "isnsRegPgPortalAddressType"), ("ISNS-MIB", "isnsRegEntityManagementAddressType"), ("ISNS-MIB", "isnsRegEntityInfoNumPortals"), ("ISNS-MIB", "isnsRegEntityInfoNumFcNodes"), ("ISNS-MIB", "isnsRegPortalSecurityInfo"), ("ISNS-MIB", "isnsRegPortalEsiPort"), ("ISNS-MIB", "isnsRegEntityRegistrationPeriod"), ("ISNS-MIB", "isnsRegPgPortalPortalIndex"), ("ISNS-MIB", "isnsRegEntityProtocol"), ("ISNS-MIB", "isnsRegIscsiNodeAlias"), ("ISNS-MIB", "isnsRegPortalPort"), ("ISNS-MIB", "isnsRegPortalSymbolicName"), ("ISNS-MIB", "isnsRegPortalAddress"), ("ISNS-MIB", "isnsRegIscsiNodeAuthMethod"), ("ISNS-MIB", "isnsRegIscsiNodeType"), ("ISNS-MIB", "isnsRegPortalScnPort"), ("ISNS-MIB", "isnsRegPgPortalPort"), ("ISNS-MIB", "isnsRegIscsiNodeScnTypes"), ) )
if mibBuilder.loadTexts: isnsServerRegIscsiObjGroup.setDescription("iSNS Server registered iSCSI managed objects.")
isnsServerRegIfcpObjGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 163, 2, 2, 8)).setObjects(*(("ISNS-MIB", "isnsRegFcPortFcNodeWwnn"), ("ISNS-MIB", "isnsRegFcNodeNumFcPorts"), ("ISNS-MIB", "isnsRegPortalAddressType"), ("ISNS-MIB", "isnsRegFcPortSymbolicName"), ("ISNS-MIB", "isnsRegEntityInfoNumIscsiNodes"), ("ISNS-MIB", "isnsRegEntityInfoNumFcPorts"), ("ISNS-MIB", "isnsRegEntityManagementAddressType"), ("ISNS-MIB", "isnsRegEntityInfoNumPortals"), ("ISNS-MIB", "isnsRegPortalSymbolicName"), ("ISNS-MIB", "isnsRegPortalSecurityInfo"), ("ISNS-MIB", "isnsRegEntityRegistrationPeriod"), ("ISNS-MIB", "isnsRegPortalScnPort"), ("ISNS-MIB", "isnsRegFcPortAddressType"), ("ISNS-MIB", "isnsRegFcPortFcCos"), ("ISNS-MIB", "isnsRegFcPortPpnWwn"), ("ISNS-MIB", "isnsRegEntityManagementAddress"), ("ISNS-MIB", "isnsRegPortalEsiPortType"), ("ISNS-MIB", "isnsRegEntityTimestamp"), ("ISNS-MIB", "isnsRegFcPortID"), ("ISNS-MIB", "isnsRegEntityInfoNumFcNodes"), ("ISNS-MIB", "isnsRegFcPortRole"), ("ISNS-MIB", "isnsRegPortalPort"), ("ISNS-MIB", "isnsRegFcNodeIPA"), ("ISNS-MIB", "isnsRegFcPortFc4Features"), ("ISNS-MIB", "isnsRegFcPortHA"), ("ISNS-MIB", "isnsRegFcNodeProxyIscsiName"), ("ISNS-MIB", "isnsRegEntityInfoNumPortalGroups"), ("ISNS-MIB", "isnsRegPortalPortType"), ("ISNS-MIB", "isnsRegFcPortFc4Descr"), ("ISNS-MIB", "isnsRegEntityEID"), ("ISNS-MIB", "isnsRegEntityVersionMax"), ("ISNS-MIB", "isnsRegFcPortFc4Types"), ("ISNS-MIB", "isnsRegFcNodeAddress"), ("ISNS-MIB", "isnsRegFcPortScnTypes"), ("ISNS-MIB", "isnsRegPortalAddress"), ("ISNS-MIB", "isnsRegFcNodePortEntityIndex"), ("ISNS-MIB", "isnsRegFcPortType"), ("ISNS-MIB", "isnsRegEntityVersionMin"), ("ISNS-MIB", "isnsRegFcNodeSymbolicName"), ("ISNS-MIB", "isnsRegPortalEsiInterval"), ("ISNS-MIB", "isnsRegFcPortAddress"), ("ISNS-MIB", "isnsRegPortalScnPortType"), ("ISNS-MIB", "isnsRegFcNodeAddressType"), ("ISNS-MIB", "isnsRegPortalEsiPort"), ("ISNS-MIB", "isnsRegFcPortFabricPortWwn"), ("ISNS-MIB", "isnsRegEntityProtocol"), ) )
if mibBuilder.loadTexts: isnsServerRegIfcpObjGroup.setDescription("iSNS Server registered iFCP managed objects.")
isnsNotificationsObjGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 163, 2, 2, 9)).setObjects(*(("ISNS-MIB", "isnsAddressNotification"), ("ISNS-MIB", "isnsUdpPortNotification"), ("ISNS-MIB", "isnsInstanceInfo"), ("ISNS-MIB", "isnsAddressNotificationType"), ("ISNS-MIB", "isnsTcpPortNotification"), ) )
if mibBuilder.loadTexts: isnsNotificationsObjGroup.setDescription("iSNS Notification managed objects.")
isnsServerNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 163, 2, 2, 10)).setObjects(*(("ISNS-MIB", "isnsServerStart"), ("ISNS-MIB", "isnsServerShutdown"), ) )
if mibBuilder.loadTexts: isnsServerNotificationGroup.setDescription("iSNS Server Notification managed objects.")

# Compliances

isnsIscsiServerCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 163, 2, 1, 1)).setObjects(*(("ISNS-MIB", "isnsServerRegIscsiObjGroup"), ("ISNS-MIB", "isnsServerNumObjectsGroup"), ("ISNS-MIB", "isnsNotificationsObjGroup"), ("ISNS-MIB", "isnsServerIscsiDdsDdObjGroup"), ("ISNS-MIB", "isnsServerNotificationGroup"), ("ISNS-MIB", "isnsServerIscsiControlNodeGroup"), ("ISNS-MIB", "isnsServerAttributesGroup"), ) )
if mibBuilder.loadTexts: isnsIscsiServerCompliance.setDescription("Initial compliance statement for an iSNS Server\nproviding support to iSCSI clients.")
isnsIfcpServerCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 163, 2, 1, 2)).setObjects(*(("ISNS-MIB", "isnsServerIfcpPortControlNodeGroup"), ("ISNS-MIB", "isnsServerIfcpDdsDdObjGroup"), ("ISNS-MIB", "isnsServerNumObjectsGroup"), ("ISNS-MIB", "isnsNotificationsObjGroup"), ("ISNS-MIB", "isnsServerNotificationGroup"), ("ISNS-MIB", "isnsServerAttributesGroup"), ("ISNS-MIB", "isnsServerRegIfcpObjGroup"), ) )
if mibBuilder.loadTexts: isnsIfcpServerCompliance.setDescription("Initial compliance statement for an iSNS Server\nproviding support to iFCP Clients.")

# Exports

# Module identity
mibBuilder.exportSymbols("ISNS-MIB", PYSNMP_MODULE_ID=isnsMIB)

# Types
mibBuilder.exportSymbols("ISNS-MIB", IsnsDdDdsModificationType=IsnsDdDdsModificationType, IsnsDdFeatureType=IsnsDdFeatureType, IsnsDdsStatusType=IsnsDdsStatusType, IsnsDiscoveryDomainId=IsnsDiscoveryDomainId, IsnsDiscoveryDomainSetId=IsnsDiscoveryDomainSetId, IsnsEntityIndexIdOrZero=IsnsEntityIndexIdOrZero, IsnsFcClassOfServiceType=IsnsFcClassOfServiceType, IsnsFcPortRoleType=IsnsFcPortRoleType, IsnsIfcpScnType=IsnsIfcpScnType, IsnsIscsiNodeType=IsnsIscsiNodeType, IsnsIscsiScnType=IsnsIscsiScnType, IsnsNodeIndexId=IsnsNodeIndexId, IsnsPortalGroupIndexId=IsnsPortalGroupIndexId, IsnsPortalGroupTagIdOrNull=IsnsPortalGroupTagIdOrNull, IsnsPortalIndexId=IsnsPortalIndexId, IsnsPortalPortTypeId=IsnsPortalPortTypeId, IsnsPortalSecurityType=IsnsPortalSecurityType, IsnsSrvrDiscoveryMethodsType=IsnsSrvrDiscoveryMethodsType)

# Objects
mibBuilder.exportSymbols("ISNS-MIB", isnsMIB=isnsMIB, isnsNotifications=isnsNotifications, isnsObjects=isnsObjects, isnsServerInfo=isnsServerInfo, isnsServerTable=isnsServerTable, isnsServerEntry=isnsServerEntry, isnsServerIndex=isnsServerIndex, isnsServerName=isnsServerName, isnsServerIsnsVersion=isnsServerIsnsVersion, isnsServerVendorInfo=isnsServerVendorInfo, isnsServerPhysicalIndex=isnsServerPhysicalIndex, isnsServerTcpPort=isnsServerTcpPort, isnsServerUdpPort=isnsServerUdpPort, isnsServerDiscontinuityTime=isnsServerDiscontinuityTime, isnsServerRole=isnsServerRole, isnsServerDiscoveryMethodsEnabled=isnsServerDiscoveryMethodsEnabled, isnsServerDiscoveryMcGroupType=isnsServerDiscoveryMcGroupType, isnsServerDiscoveryMcGroupAddress=isnsServerDiscoveryMcGroupAddress, isnsServerEsiNonResponseThreshold=isnsServerEsiNonResponseThreshold, isnsServerEnableControlNodeMgtScn=isnsServerEnableControlNodeMgtScn, isnsServerDefaultDdDdsStatus=isnsServerDefaultDdDdsStatus, isnsServerUpdateDdDdsSupported=isnsServerUpdateDdDdsSupported, isnsServerUpdateDdDdsEnabled=isnsServerUpdateDdDdsEnabled, isnsNumObjectsTable=isnsNumObjectsTable, isnsNumObjectsEntry=isnsNumObjectsEntry, isnsNumDds=isnsNumDds, isnsNumDd=isnsNumDd, isnsNumEntities=isnsNumEntities, isnsNumPortals=isnsNumPortals, isnsNumPortalGroups=isnsNumPortalGroups, isnsNumIscsiNodes=isnsNumIscsiNodes, isnsNumFcPorts=isnsNumFcPorts, isnsNumFcNodes=isnsNumFcNodes, isnsControlNodeInfo=isnsControlNodeInfo, isnsControlNodeIscsiTable=isnsControlNodeIscsiTable, isnsControlNodeIscsiEntry=isnsControlNodeIscsiEntry, isnsControlNodeIscsiNodeIndex=isnsControlNodeIscsiNodeIndex, isnsControlNodeIscsiNodeName=isnsControlNodeIscsiNodeName, isnsControlNodeIscsiIsRegistered=isnsControlNodeIscsiIsRegistered, isnsControlNodeIscsiRcvMgtSCN=isnsControlNodeIscsiRcvMgtSCN, isnsControlNodeFcPortTable=isnsControlNodeFcPortTable, isnsControlNodeFcPortEntry=isnsControlNodeFcPortEntry, isnsControlNodeFcPortWwpn=isnsControlNodeFcPortWwpn, isnsControlNodeFcPortIsRegistered=isnsControlNodeFcPortIsRegistered, isnsControlNodeFcPortRcvMgtSCN=isnsControlNodeFcPortRcvMgtSCN, isnsDdsInfo=isnsDdsInfo, isnsDdsTable=isnsDdsTable, isnsDdsEntry=isnsDdsEntry, isnsDdsId=isnsDdsId, isnsDdsSymbolicName=isnsDdsSymbolicName, isnsDdsStatus=isnsDdsStatus, isnsDdsMemberTable=isnsDdsMemberTable, isnsDdsMemberEntry=isnsDdsMemberEntry, isnsDdsMemberDdId=isnsDdsMemberDdId, isnsDdsMemberSymbolicName=isnsDdsMemberSymbolicName, isnsDdInfo=isnsDdInfo, isnsDdTable=isnsDdTable, isnsDdEntry=isnsDdEntry, isnsDdId=isnsDdId, isnsDdSymbolicName=isnsDdSymbolicName, isnsDdFeatures=isnsDdFeatures, isnsDdIscsiMemberTable=isnsDdIscsiMemberTable, isnsDdIscsiMemberEntry=isnsDdIscsiMemberEntry, isnsDdIscsiMemberIndex=isnsDdIscsiMemberIndex, isnsDdIscsiMemberName=isnsDdIscsiMemberName, isnsDdIscsiMemberIsRegistered=isnsDdIscsiMemberIsRegistered, isnsDdPortalMemberTable=isnsDdPortalMemberTable, isnsDdPortalMemberEntry=isnsDdPortalMemberEntry, isnsDdPortalMemberIndex=isnsDdPortalMemberIndex, isnsDdPortalMemberAddressType=isnsDdPortalMemberAddressType, isnsDdPortalMemberAddress=isnsDdPortalMemberAddress, isnsDdPortalMemberPortType=isnsDdPortalMemberPortType, isnsDdPortalMemberPort=isnsDdPortalMemberPort, isnsDdPortalMemberIsRegistered=isnsDdPortalMemberIsRegistered, isnsDdFcPortMemberTable=isnsDdFcPortMemberTable, isnsDdFcPortMemberEntry=isnsDdFcPortMemberEntry, isnsDdFcPortMemberPortName=isnsDdFcPortMemberPortName, isnsDdFcPortMemberIsRegistered=isnsDdFcPortMemberIsRegistered, isnsReg=isnsReg, isnsRegEntityInfo=isnsRegEntityInfo, isnsRegEntityTable=isnsRegEntityTable, isnsRegEntityEntry=isnsRegEntityEntry, isnsRegEntityIndex=isnsRegEntityIndex, isnsRegEntityEID=isnsRegEntityEID, isnsRegEntityProtocol=isnsRegEntityProtocol, isnsRegEntityManagementAddressType=isnsRegEntityManagementAddressType, isnsRegEntityManagementAddress=isnsRegEntityManagementAddress, isnsRegEntityTimestamp=isnsRegEntityTimestamp, isnsRegEntityVersionMin=isnsRegEntityVersionMin, isnsRegEntityVersionMax=isnsRegEntityVersionMax, isnsRegEntityRegistrationPeriod=isnsRegEntityRegistrationPeriod, isnsRegEntityNumObjectsTable=isnsRegEntityNumObjectsTable, isnsRegEntityNumObjectsEntry=isnsRegEntityNumObjectsEntry, isnsRegEntityInfoNumPortals=isnsRegEntityInfoNumPortals, isnsRegEntityInfoNumPortalGroups=isnsRegEntityInfoNumPortalGroups, isnsRegEntityInfoNumIscsiNodes=isnsRegEntityInfoNumIscsiNodes, isnsRegEntityInfoNumFcPorts=isnsRegEntityInfoNumFcPorts, isnsRegEntityInfoNumFcNodes=isnsRegEntityInfoNumFcNodes, isnsRegPortalInfo=isnsRegPortalInfo, isnsRegPortalTable=isnsRegPortalTable, isnsRegPortalEntry=isnsRegPortalEntry, isnsRegPortalPortalIndex=isnsRegPortalPortalIndex, isnsRegPortalAddressType=isnsRegPortalAddressType, isnsRegPortalAddress=isnsRegPortalAddress, isnsRegPortalPortType=isnsRegPortalPortType, isnsRegPortalPort=isnsRegPortalPort, isnsRegPortalSymbolicName=isnsRegPortalSymbolicName, isnsRegPortalEsiInterval=isnsRegPortalEsiInterval, isnsRegPortalEsiPortType=isnsRegPortalEsiPortType, isnsRegPortalEsiPort=isnsRegPortalEsiPort, isnsRegPortalScnPortType=isnsRegPortalScnPortType, isnsRegPortalScnPort=isnsRegPortalScnPort, isnsRegPortalSecurityInfo=isnsRegPortalSecurityInfo, isnsRegPortalGroupInfo=isnsRegPortalGroupInfo, isnsRegPgTable=isnsRegPgTable, isnsRegPgEntry=isnsRegPgEntry, isnsRegPgIndex=isnsRegPgIndex, isnsRegPgIscsiNodeIndex=isnsRegPgIscsiNodeIndex, isnsRegPgIscsiName=isnsRegPgIscsiName, isnsRegPgPortalPortalIndex=isnsRegPgPortalPortalIndex, isnsRegPgPortalAddressType=isnsRegPgPortalAddressType, isnsRegPgPortalAddress=isnsRegPgPortalAddress, isnsRegPgPortalPortType=isnsRegPgPortalPortType, isnsRegPgPortalPort=isnsRegPgPortalPort, isnsRegPgPGT=isnsRegPgPGT, isnsRegIscsiNodeInfo=isnsRegIscsiNodeInfo)
mibBuilder.exportSymbols("ISNS-MIB", isnsRegIscsiNodeTable=isnsRegIscsiNodeTable, isnsRegIscsiNodeEntry=isnsRegIscsiNodeEntry, isnsRegIscsiNodeIndex=isnsRegIscsiNodeIndex, isnsRegIscsiNodeName=isnsRegIscsiNodeName, isnsRegIscsiNodeType=isnsRegIscsiNodeType, isnsRegIscsiNodeAlias=isnsRegIscsiNodeAlias, isnsRegIscsiNodeScnTypes=isnsRegIscsiNodeScnTypes, isnsRegIscsiNodeWwnToken=isnsRegIscsiNodeWwnToken, isnsRegIscsiNodeAuthMethod=isnsRegIscsiNodeAuthMethod, isnsRegFcNodeInfo=isnsRegFcNodeInfo, isnsRegFcNodeTable=isnsRegFcNodeTable, isnsRegFcNodeEntry=isnsRegFcNodeEntry, isnsRegFcNodeWwnn=isnsRegFcNodeWwnn, isnsRegFcNodeSymbolicName=isnsRegFcNodeSymbolicName, isnsRegFcNodeAddressType=isnsRegFcNodeAddressType, isnsRegFcNodeAddress=isnsRegFcNodeAddress, isnsRegFcNodeIPA=isnsRegFcNodeIPA, isnsRegFcNodeProxyIscsiName=isnsRegFcNodeProxyIscsiName, isnsRegFcNodeNumFcPorts=isnsRegFcNodeNumFcPorts, isnsRegFcPortTable=isnsRegFcPortTable, isnsRegFcPortEntry=isnsRegFcPortEntry, isnsRegFcPortWwpn=isnsRegFcPortWwpn, isnsRegFcPortID=isnsRegFcPortID, isnsRegFcPortType=isnsRegFcPortType, isnsRegFcPortSymbolicName=isnsRegFcPortSymbolicName, isnsRegFcPortFabricPortWwn=isnsRegFcPortFabricPortWwn, isnsRegFcPortHA=isnsRegFcPortHA, isnsRegFcPortAddressType=isnsRegFcPortAddressType, isnsRegFcPortAddress=isnsRegFcPortAddress, isnsRegFcPortFcCos=isnsRegFcPortFcCos, isnsRegFcPortFc4Types=isnsRegFcPortFc4Types, isnsRegFcPortFc4Descr=isnsRegFcPortFc4Descr, isnsRegFcPortFc4Features=isnsRegFcPortFc4Features, isnsRegFcPortScnTypes=isnsRegFcPortScnTypes, isnsRegFcPortRole=isnsRegFcPortRole, isnsRegFcPortFcNodeWwnn=isnsRegFcPortFcNodeWwnn, isnsRegFcPortPpnWwn=isnsRegFcPortPpnWwn, isnsRegFcNodePortTable=isnsRegFcNodePortTable, isnsRegFcNodePortEntry=isnsRegFcNodePortEntry, isnsRegFcNodePortEntityIndex=isnsRegFcNodePortEntityIndex, isnsNotificationsInfo=isnsNotificationsInfo, isnsInstanceInfo=isnsInstanceInfo, isnsAddressNotificationType=isnsAddressNotificationType, isnsAddressNotification=isnsAddressNotification, isnsTcpPortNotification=isnsTcpPortNotification, isnsUdpPortNotification=isnsUdpPortNotification, isnsConformance=isnsConformance, isnsCompliances=isnsCompliances, isnsGroups=isnsGroups)

# Notifications
mibBuilder.exportSymbols("ISNS-MIB", isnsServerStart=isnsServerStart, isnsServerShutdown=isnsServerShutdown)

# Groups
mibBuilder.exportSymbols("ISNS-MIB", isnsServerAttributesGroup=isnsServerAttributesGroup, isnsServerNumObjectsGroup=isnsServerNumObjectsGroup, isnsServerIscsiControlNodeGroup=isnsServerIscsiControlNodeGroup, isnsServerIfcpPortControlNodeGroup=isnsServerIfcpPortControlNodeGroup, isnsServerIscsiDdsDdObjGroup=isnsServerIscsiDdsDdObjGroup, isnsServerIfcpDdsDdObjGroup=isnsServerIfcpDdsDdObjGroup, isnsServerRegIscsiObjGroup=isnsServerRegIscsiObjGroup, isnsServerRegIfcpObjGroup=isnsServerRegIfcpObjGroup, isnsNotificationsObjGroup=isnsNotificationsObjGroup, isnsServerNotificationGroup=isnsServerNotificationGroup)

# Compliances
mibBuilder.exportSymbols("ISNS-MIB", isnsIscsiServerCompliance=isnsIscsiServerCompliance, isnsIfcpServerCompliance=isnsIfcpServerCompliance)
