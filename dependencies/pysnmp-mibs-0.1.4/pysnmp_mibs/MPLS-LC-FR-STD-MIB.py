# PySNMP SMI module. Autogenerated from smidump -f python MPLS-LC-FR-STD-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:19 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( DLCI, ) = mibBuilder.importSymbols("FRAME-RELAY-DTE-MIB", "DLCI")
( mplsInterfaceIndex, ) = mibBuilder.importSymbols("MPLS-LSR-STD-MIB", "mplsInterfaceIndex")
( mplsStdMIB, ) = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "mplsStdMIB")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( RowStatus, StorageType, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "StorageType")

# Objects

mplsLcFrStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 166, 10)).setRevisions(("2006-01-12 00:00",))
if mibBuilder.loadTexts: mplsLcFrStdMIB.setOrganization("Multiprotocol Label Switching (MPLS) Working Group")
if mibBuilder.loadTexts: mplsLcFrStdMIB.setContactInfo("        Thomas D. Nadeau\nCisco Systems, Inc.\nEmail:  tnadeau@cisco.com\n\nSubrahmanya Hegde\nEmail:  subrah@cisco.com\n\nGeneral comments should be sent to mpls@uu.net")
if mibBuilder.loadTexts: mplsLcFrStdMIB.setDescription("This MIB module contains managed object definitions for\nMPLS Label-Controlled Frame-Relay interfaces as defined\nin (RFC3034).\n\nCopyright (C) The Internet Society (2006).  This\nversion of this MIB module is part of RFC 4368; see\nthe RFC itself for full legal notices.")
mplsLcFrStdNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 10, 0))
mplsLcFrStdObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 10, 1))
mplsLcFrStdInterfaceConfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 10, 1, 1))
if mibBuilder.loadTexts: mplsLcFrStdInterfaceConfTable.setDescription("This table specifies per-interface MPLS LC-FR\ncapability and associated information.  In particular,\nthis table sparsely extends the MPLS-LSR-STD-MIB's\nmplsInterfaceConfTable.")
mplsLcFrStdInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 10, 1, 1, 1)).setIndexNames((0, "MPLS-LSR-STD-MIB", "mplsInterfaceIndex"))
if mibBuilder.loadTexts: mplsLcFrStdInterfaceConfEntry.setDescription("An entry in this table is created by an LSR for\nevery interface capable of supporting MPLS LC-FR.\nEach entry in this table will exist only if a\ncorresponding entry in ifTable and mplsInterfaceConfTable\nexists.  If the associated entries in ifTable and\nmplsInterfaceConfTable are deleted, the corresponding\nentry in this table must also be deleted shortly\nthereafter.")
mplsLcFrStdTrafficMinDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 10, 1, 1, 1, 1), DLCI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLcFrStdTrafficMinDlci.setDescription("This is the minimum DLCI value over which this\nLSR is willing to accept traffic on this\ninterface.")
mplsLcFrStdTrafficMaxDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 10, 1, 1, 1, 2), DLCI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLcFrStdTrafficMaxDlci.setDescription("This is the max DLCI value over which this\nLSR is willing to accept traffic on this\ninterface.")
mplsLcFrStdCtrlMinDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 10, 1, 1, 1, 3), DLCI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLcFrStdCtrlMinDlci.setDescription("This is the min DLCI value over which this\nLSR is willing to accept control traffic\non this interface.")
mplsLcFrStdCtrlMaxDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 10, 1, 1, 1, 4), DLCI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLcFrStdCtrlMaxDlci.setDescription("This is the max DLCI value over which this\nLSR is willing to accept control traffic\non this interface.")
mplsLcFrStdInterfaceConfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 10, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLcFrStdInterfaceConfRowStatus.setDescription("This object is used to create and\ndelete entries in this table.  When configuring\nentries in this table, the corresponding ifEntry and\nmplsInterfaceConfEntry MUST exist beforehand.  If a manager\nattempts to create an entry for a corresponding\nmplsInterfaceConfEntry that does not support LC-FR,\nthe agent MUST return an inconsistentValue error.\nIf this table is implemented read-only, then the\nagent must set this object to active(1) when this\nrow is made active.  If this table is implemented\nwritable, then an agent MUST not allow modification\nto its objects once this value is set to active(1),\nexcept to mplsLcFrStdInterfaceConfRowStatus and\nmplsLcFrStdInterfaceConfStorageType.")
mplsLcFrStdInterfaceConfStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 10, 1, 1, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLcFrStdInterfaceConfStorageType.setDescription("The storage type for this conceptual row.\nConceptual rows having the value 'permanent(4)'\nneed not allow write-access to any columnar\nobjects in the row.")
mplsLcFrStdConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 10, 2))
mplsLcFrStdCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 10, 2, 1))
mplsLcFrStdGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 10, 2, 2))

# Augmentions

# Groups

mplsLcFrStdIfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 10, 2, 2, 1)).setObjects(*(("MPLS-LC-FR-STD-MIB", "mplsLcFrStdCtrlMaxDlci"), ("MPLS-LC-FR-STD-MIB", "mplsLcFrStdInterfaceConfRowStatus"), ("MPLS-LC-FR-STD-MIB", "mplsLcFrStdTrafficMaxDlci"), ("MPLS-LC-FR-STD-MIB", "mplsLcFrStdInterfaceConfStorageType"), ("MPLS-LC-FR-STD-MIB", "mplsLcFrStdCtrlMinDlci"), ("MPLS-LC-FR-STD-MIB", "mplsLcFrStdTrafficMinDlci"), ) )
if mibBuilder.loadTexts: mplsLcFrStdIfGroup.setDescription("Collection of objects needed for MPLS LC-FR\ninterface configuration.")

# Compliances

mplsLcFrStdModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 10, 2, 1, 1)).setObjects(*(("MPLS-LC-FR-STD-MIB", "mplsLcFrStdIfGroup"), ) )
if mibBuilder.loadTexts: mplsLcFrStdModuleFullCompliance.setDescription("Compliance statement for agents that provide\nfull support for MPLS-LC-FR-STD-MIB.  Such\ndevices can be monitored and also be configured\nusing this MIB module.")
mplsLcFrStdModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 10, 2, 1, 2)).setObjects(*(("MPLS-LC-FR-STD-MIB", "mplsLcFrStdIfGroup"), ) )
if mibBuilder.loadTexts: mplsLcFrStdModuleReadOnlyCompliance.setDescription("Compliance requirement for implementations that only\nprovide read-only support for MPLS-LC-FR-STD-MIB.\nSuch devices can be monitored but cannot be configured\nusing this MIB module.")

# Exports

# Module identity
mibBuilder.exportSymbols("MPLS-LC-FR-STD-MIB", PYSNMP_MODULE_ID=mplsLcFrStdMIB)

# Objects
mibBuilder.exportSymbols("MPLS-LC-FR-STD-MIB", mplsLcFrStdMIB=mplsLcFrStdMIB, mplsLcFrStdNotifications=mplsLcFrStdNotifications, mplsLcFrStdObjects=mplsLcFrStdObjects, mplsLcFrStdInterfaceConfTable=mplsLcFrStdInterfaceConfTable, mplsLcFrStdInterfaceConfEntry=mplsLcFrStdInterfaceConfEntry, mplsLcFrStdTrafficMinDlci=mplsLcFrStdTrafficMinDlci, mplsLcFrStdTrafficMaxDlci=mplsLcFrStdTrafficMaxDlci, mplsLcFrStdCtrlMinDlci=mplsLcFrStdCtrlMinDlci, mplsLcFrStdCtrlMaxDlci=mplsLcFrStdCtrlMaxDlci, mplsLcFrStdInterfaceConfRowStatus=mplsLcFrStdInterfaceConfRowStatus, mplsLcFrStdInterfaceConfStorageType=mplsLcFrStdInterfaceConfStorageType, mplsLcFrStdConformance=mplsLcFrStdConformance, mplsLcFrStdCompliances=mplsLcFrStdCompliances, mplsLcFrStdGroups=mplsLcFrStdGroups)

# Groups
mibBuilder.exportSymbols("MPLS-LC-FR-STD-MIB", mplsLcFrStdIfGroup=mplsLcFrStdIfGroup)

# Compliances
mibBuilder.exportSymbols("MPLS-LC-FR-STD-MIB", mplsLcFrStdModuleFullCompliance=mplsLcFrStdModuleFullCompliance, mplsLcFrStdModuleReadOnlyCompliance=mplsLcFrStdModuleReadOnlyCompliance)
