# PySNMP SMI module. Autogenerated from smidump -f python MPLS-LDP-GENERIC-STD-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:20 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndexOrZero, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
( mplsLdpEntityIndex, mplsLdpEntityLdpId, ) = mibBuilder.importSymbols("MPLS-LDP-STD-MIB", "mplsLdpEntityIndex", "mplsLdpEntityLdpId")
( mplsStdMIB, ) = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "mplsStdMIB")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( RowStatus, StorageType, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "StorageType")

# Objects

mplsLdpGenericStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 166, 7)).setRevisions(("2004-06-03 00:00",))
if mibBuilder.loadTexts: mplsLdpGenericStdMIB.setOrganization("Multiprotocol Label Switching (mpls)\nWorking Group")
if mibBuilder.loadTexts: mplsLdpGenericStdMIB.setContactInfo("Joan Cucchiara (jcucchiara@mindspring.com)\nMarconi Communications, Inc.\n\nHans Sjostrand (hans@ipunplugged.com)\nipUnplugged\n\n\n\nJames V. Luciani (james_luciani@mindspring.com)\nMarconi Communications, Inc.\n\nWorking Group Chairs:\nGeorge Swallow,   email: swallow@cisco.com\nLoa Andersson,    email: loa@pi.se\n\nMPLS Working Group, email: mpls@uu.net")
if mibBuilder.loadTexts: mplsLdpGenericStdMIB.setDescription("Copyright (C) The Internet Society (year). The\ninitial version of this MIB module was published\nin RFC 3815. For full legal notices see the RFC\nitself or see:\nhttp://www.ietf.org/copyrights/ianamib.html\n\nThis MIB contains managed object definitions for\nconfiguring and monitoring the Multiprotocol Label\nSwitching (MPLS), Label Distribution Protocol (LDP),\nutilizing ethernet as the Layer 2 media.")
mplsLdpGenericObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 7, 1))
mplsLdpEntityGenericObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 7, 1, 1))
mplsLdpEntityGenericLRTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 7, 1, 1, 1))
if mibBuilder.loadTexts: mplsLdpEntityGenericLRTable.setDescription("The MPLS LDP Entity Generic Label Range (LR)\nTable.\n\nThe purpose of this table is to provide a mechanism\nfor configurating a contiguous range of generic labels,\nor a 'label range' for LDP Entities.\n\nLDP Entities which use Generic Labels must have at least\none entry in this table.  In other words, this table\n'extends' the mpldLdpEntityTable for Generic Labels.")
mplsLdpEntityGenericLREntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 7, 1, 1, 1, 1)).setIndexNames((0, "MPLS-LDP-STD-MIB", "mplsLdpEntityLdpId"), (0, "MPLS-LDP-STD-MIB", "mplsLdpEntityIndex"), (0, "MPLS-LDP-GENERIC-STD-MIB", "mplsLdpEntityGenericLRMin"), (0, "MPLS-LDP-GENERIC-STD-MIB", "mplsLdpEntityGenericLRMax"))
if mibBuilder.loadTexts: mplsLdpEntityGenericLREntry.setDescription("A row in the LDP Entity Generic Label\nRange (LR) Table.  One entry in this table contains\ninformation on a single range of labels\nrepresented by the configured Upper and Lower\nBounds pairs.  NOTE: there is NO corresponding\nLDP message which relates to the information\nin this table, however, this table does provide\na way for a user to 'reserve' a generic label\nrange.\n\nNOTE:  The ranges for a specific LDP Entity\nare UNIQUE and non-overlapping.\n\nA row will not be created unless a unique and\nnon-overlapping range is specified.")
mplsLdpEntityGenericLRMin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 7, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: mplsLdpEntityGenericLRMin.setDescription("The minimum label configured for this range.")
mplsLdpEntityGenericLRMax = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 7, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: mplsLdpEntityGenericLRMax.setDescription("The maximum label configured for this range.")
mplsLdpEntityGenericLabelSpace = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 7, 1, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("perPlatform", 1), ("perInterface", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityGenericLabelSpace.setDescription("This value of this object is perPlatform(1), then\nthis means that the label space type is\nper platform.\n\nIf this object is perInterface(2), then this\nmeans that the label space type is per Interface.")
mplsLdpEntityGenericIfIndexOrZero = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 7, 1, 1, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityGenericIfIndexOrZero.setDescription("This value represents either the InterfaceIndex of\nthe 'ifLayer' where these Generic Label would be created,\n\n\nor 0 (zero).  The value of zero means that the\nInterfaceIndex is not known.\n\nHowever, if the InterfaceIndex is known,\nthen it must be represented by this value.\n\nIf an InterfaceIndex becomes known, then the\nnetwork management entity (e.g., SNMP agent) responsible\nfor this object MUST change the value from 0 (zero) to the\nvalue of the InterfaceIndex.")
mplsLdpEntityGenericLRStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 7, 1, 1, 1, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityGenericLRStorageType.setDescription("The storage type for this conceptual row.\nConceptual rows having the value 'permanent(4)'\nneed not allow write-access to any columnar\nobjects in the row.")
mplsLdpEntityGenericLRRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 7, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsLdpEntityGenericLRRowStatus.setDescription("The status of this conceptual row.  All writable\nobjects in this row may be modified at any time,\nhowever, as described in  detail in the section\nentitled, 'Changing Values After Session\nEstablishment', and again described in the\nDESCRIPTION clause of the mplsLdpEntityAdminStatus object,\nif a session has been initiated with a Peer,\nchanging objects in this table will\nwreak havoc with the session and interrupt traffic.\nTo repeat again:  the recommended procedure is\nto set the mplsLdpEntityAdminStatus to\ndown, thereby explicitly causing a\nsession to be torn down. Then, change objects\nin this entry, then set the mplsLdpEntityAdminStatus\nto enable which enables a new session to be initiated.\n\nThere must exist at least one entry in this\ntable for every LDP Entity that has a\ngeneric label configured.")
mplsLdpGenericConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 7, 2))
mplsLdpGenericGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 7, 2, 1))
mplsLdpGenericCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 7, 2, 2))

# Augmentions

# Groups

mplsLdpGenericGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 7, 2, 1, 1)).setObjects(*(("MPLS-LDP-GENERIC-STD-MIB", "mplsLdpEntityGenericLRStorageType"), ("MPLS-LDP-GENERIC-STD-MIB", "mplsLdpEntityGenericLabelSpace"), ("MPLS-LDP-GENERIC-STD-MIB", "mplsLdpEntityGenericLRRowStatus"), ("MPLS-LDP-GENERIC-STD-MIB", "mplsLdpEntityGenericIfIndexOrZero"), ) )
if mibBuilder.loadTexts: mplsLdpGenericGroup.setDescription("Objects that apply to all MPLS LDP implementations\nusing Generic Labels as the Layer 2.")

# Compliances

mplsLdpGenericModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 7, 2, 2, 1)).setObjects(*(("MPLS-LDP-GENERIC-STD-MIB", "mplsLdpGenericGroup"), ) )
if mibBuilder.loadTexts: mplsLdpGenericModuleFullCompliance.setDescription("The Module is implemented with support for\nread-create and read-write.  In other words,\nboth monitoring and configuration\nare available when using this MODULE-COMPLIANCE.")
mplsLdpGenericModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 7, 2, 2, 2)).setObjects(*(("MPLS-LDP-GENERIC-STD-MIB", "mplsLdpGenericGroup"), ) )
if mibBuilder.loadTexts: mplsLdpGenericModuleReadOnlyCompliance.setDescription("The Module is implemented with support for\nread-only.  In other words, only monitoring\nis available by implementing this MODULE-COMPLIANCE.")

# Exports

# Module identity
mibBuilder.exportSymbols("MPLS-LDP-GENERIC-STD-MIB", PYSNMP_MODULE_ID=mplsLdpGenericStdMIB)

# Objects
mibBuilder.exportSymbols("MPLS-LDP-GENERIC-STD-MIB", mplsLdpGenericStdMIB=mplsLdpGenericStdMIB, mplsLdpGenericObjects=mplsLdpGenericObjects, mplsLdpEntityGenericObjects=mplsLdpEntityGenericObjects, mplsLdpEntityGenericLRTable=mplsLdpEntityGenericLRTable, mplsLdpEntityGenericLREntry=mplsLdpEntityGenericLREntry, mplsLdpEntityGenericLRMin=mplsLdpEntityGenericLRMin, mplsLdpEntityGenericLRMax=mplsLdpEntityGenericLRMax, mplsLdpEntityGenericLabelSpace=mplsLdpEntityGenericLabelSpace, mplsLdpEntityGenericIfIndexOrZero=mplsLdpEntityGenericIfIndexOrZero, mplsLdpEntityGenericLRStorageType=mplsLdpEntityGenericLRStorageType, mplsLdpEntityGenericLRRowStatus=mplsLdpEntityGenericLRRowStatus, mplsLdpGenericConformance=mplsLdpGenericConformance, mplsLdpGenericGroups=mplsLdpGenericGroups, mplsLdpGenericCompliances=mplsLdpGenericCompliances)

# Groups
mibBuilder.exportSymbols("MPLS-LDP-GENERIC-STD-MIB", mplsLdpGenericGroup=mplsLdpGenericGroup)

# Compliances
mibBuilder.exportSymbols("MPLS-LDP-GENERIC-STD-MIB", mplsLdpGenericModuleFullCompliance=mplsLdpGenericModuleFullCompliance, mplsLdpGenericModuleReadOnlyCompliance=mplsLdpGenericModuleReadOnlyCompliance)
