# PySNMP SMI module. Autogenerated from smidump -f python T11-FC-FABRIC-CONFIG-SERVER-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:41 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( FcAddressIdOrZero, FcDomainIdOrZero, FcNameIdOrZero, FcPortType, fcmInstanceIndex, fcmSwitchIndex, ) = mibBuilder.importSymbols("FC-MGMT-MIB", "FcAddressIdOrZero", "FcDomainIdOrZero", "FcNameIdOrZero", "FcPortType", "fcmInstanceIndex", "fcmSwitchIndex")
( URLString, ) = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "URLString")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2")
( TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TruthValue")
( t11FamLocalSwitchWwn, ) = mibBuilder.importSymbols("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamLocalSwitchWwn")
( T11NsGs4RejectReasonCode, ) = mibBuilder.importSymbols("T11-FC-NAME-SERVER-MIB", "T11NsGs4RejectReasonCode")
( T11FabricIndex, ) = mibBuilder.importSymbols("T11-TC-MIB", "T11FabricIndex")

# Types

class T11FcIeType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(5,3,2,4,1,)
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("switch", 3), ("hub", 4), ("bridge", 5), )
    
class T11FcListIndex(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,4294967295)
    
class T11FcListIndexPointerOrZero(TextualConvention, Unsigned32):
    displayHint = "d"
    
class T11FcPortState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(6,2,5,1,4,3,)
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("online", 3), ("offline", 4), ("testing", 5), ("fault", 6), )
    
class T11FcPortTxType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(8,1,5,13,12,7,2,6,10,4,9,3,11,)
    namedValues = NamedValues(("unknown", 1), ("tenGbaseLx1300", 10), ("tenGbaseSw850", 11), ("tenGbaseLw1310", 12), ("tenGbaseEw1550", 13), ("other", 2), ("shortwave850nm", 3), ("longwave1550nm", 4), ("longwave1310nm", 5), ("electrical", 6), ("tenGbaseSr850", 7), ("tenGbaseLr1310", 8), ("tenGbaseEr1550", 9), )
    
class T11FcsRejectReasonExplanation(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(20,21,2,23,24,8,22,5,25,9,18,26,11,1,14,10,17,15,13,3,19,4,6,7,16,12,)
    namedValues = NamedValues(("noAdditionalExplanation", 1), ("ieInfoListNotAvailable", 10), ("portListNotAvailable", 11), ("portTypeNotAvailable", 12), ("phyPortNumNotAvailable", 13), ("attPortNameListNotAvailable", 14), ("portStateNotAvailable", 15), ("unableToRegIELogName", 16), ("platformNameNoExist", 17), ("platformNameAlreadyExists", 18), ("platformNodeNameNoExists", 19), ("invNameIdForIEOrPort", 2), ("platformNodeNameAlreadyExists", 20), ("resourceUnavailable", 21), ("noEntriesInLunMap", 22), ("invalidDeviceNameLength", 23), ("multipleAttributes", 24), ("invalidAttribBlockLength", 25), ("attributesMissing", 26), ("ieListNotAvailable", 3), ("ieTypeNotAvailable", 4), ("domainIdNotAvailable", 5), ("mgmtIdNotAvailable", 6), ("fabNameNotAvailable", 7), ("ielogNameNotAvailable", 8), ("mgmtAddrListNotAvailable", 9), )
    

# Objects

t11FcFabricConfigServerMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 162)).setRevisions(("2007-06-27 00:00",))
if mibBuilder.loadTexts: t11FcFabricConfigServerMIB.setOrganization("For the initial versions, T11.\nFor later versions, the IETF's IMSS Working Group.")
if mibBuilder.loadTexts: t11FcFabricConfigServerMIB.setContactInfo("     Claudio DeSanti\nCisco Systems, Inc.\n170 West Tasman Drive\nSan Jose, CA 95134 USA\nEMail: cds@cisco.com\n\nKeith McCloghrie\nCisco Systems, Inc.\n170 West Tasman Drive\nSan Jose, CA 95134 USA\nEMail: kzm@cisco.com")
if mibBuilder.loadTexts: t11FcFabricConfigServerMIB.setDescription("The MIB module for the management of a Fabric\nConfiguration Server (FCS) in a Fibre Channel (FC)\nnetwork.  An FCS is defined by the FC-GS-5 standard.  This\n\n\n\nMIB provides the capabilities to trigger a discovery of\nthe configuration of one or more Fabrics, to retrieve the\nresults of such a discovery, as well as to control and\nmonitor the operation of an FCS.  The discovered\nconfiguration contains information about:\n\n   - Interconnect Elements (IEs), i.e., switches, hubs,\n     bridges, etc.,\n   - Ports on IEs, and\n   - Platforms that consist of one or more FC nodes.\n\nCopyright (C) The IETF Trust (2007).  This version of\nthis MIB module is part of RFC 4935;  see the RFC itself for\nfull legal notices.")
t11FcsNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 162, 0))
t11FcsMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 162, 1))
t11FcsDiscovery = MibIdentifier((1, 3, 6, 1, 2, 1, 162, 1, 1))
t11FcsFabricDiscoveryTable = MibTable((1, 3, 6, 1, 2, 1, 162, 1, 1, 1))
if mibBuilder.loadTexts: t11FcsFabricDiscoveryTable.setDescription("This table contains control information for discovery\nof Fabric configuration by switches.\n\nValues written to objects in this table are not\nretained over agent reboots.")
t11FcsFabricDiscoveryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 162, 1, 1, 1, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"))
if mibBuilder.loadTexts: t11FcsFabricDiscoveryEntry.setDescription("Control information for discovery by the switch\nidentified by fcmInstanceIndex and fcmSwitchIndex.")
t11FcsFabricDiscoveryRangeLow = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 1, 1, 1, 1), T11FabricIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcsFabricDiscoveryRangeLow.setDescription("The discovery by a particular switch operates\nwithin all existing Fabrics that have a Fabric\nIndex within a specific inclusive range.  This\nobject specifies the minimum Fabric Index value\nwithin that range.  This value just represents\nthe lower end of the range and does not necessarily\nrepresent any existing Fabric.")
t11FcsFabricDiscoveryRangeHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 1, 1, 1, 2), T11FabricIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcsFabricDiscoveryRangeHigh.setDescription("The discovery by a particular switch operates\nwithin all existing Fabrics that have a Fabric\n\n\n\nIndex within a specific inclusive range.  This\nobject specifies the maximum Fabric Index value\nwithin that range.  This value just represents the\nhigher end of the range and does not necessarily\nrepresent any existing Fabric.")
t11FcsFabricDiscoveryStart = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("start", 1), ("noOp", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcsFabricDiscoveryStart.setDescription("This object provides the capability to trigger the start\nof a discovery by a Fabric Configuration Server.  If this\nobject is set to 'start', then the discovery is started on\nthose Fabrics that have their Fabric Index value in the\nrange specified by t11FcsFabricDiscoveryRangeLow and\nt11FcsFabricDiscoveryRangeHigh.  It is recommended that\nwhenever an instance of this object is set to 'start',\nthat the desired range be specified at the same time by\nsetting the corresponding instances of\nt11FcsFabricDiscoveryRangeLow and\nt11FcsFabricDiscoveryRangeHigh.\n\nSetting this object to 'start' will be rejected if a\ndiscovery is already/still in progress on any Fabrics in\nthe specified range.\n\nNo action is taken if this object is set to 'noOp'.\nThe value of this object when read is always 'noOp'.")
t11FcsFabricDiscoveryTimeOut = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcsFabricDiscoveryTimeOut.setDescription("The minimum interval of time for which the discovered\nFabric information is cached by a Fabric Configuration\nServer.")
t11FcsDiscoveryStateTable = MibTable((1, 3, 6, 1, 2, 1, 162, 1, 1, 2))
if mibBuilder.loadTexts: t11FcsDiscoveryStateTable.setDescription("This table contains the status of discovery of\nlocally known Fabrics.")
t11FcsDiscoveryStateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 162, 1, 1, 2, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsFabricIndex"))
if mibBuilder.loadTexts: t11FcsDiscoveryStateEntry.setDescription("The discovery status for a particular Fabric on the\nswitch identified by fcmInstanceIndex and fcmSwitchIndex.")
t11FcsFabricIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 1, 2, 1, 1), T11FabricIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcsFabricIndex.setDescription("A unique index value that uniquely identifies a\nparticular Fabric.\n\nIn a Fabric conformant to FC-SW-4, multiple Virtual Fabrics\ncan operate within one (or more) physical infrastructures,\nand this index value is used to uniquely identify a\nparticular (physical or virtual) Fabric within a physical\ninfrastructure.\n\nIn a Fabric conformant to versions earlier than FC-SW-4,\nonly a single Fabric could operate within a physical\ninfrastructure, and thus, the value of this Fabric Index\nwas defined to always be 1.")
t11FcsDiscoveryStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("inProgress", 1), ("completed", 2), ("localOnly", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcsDiscoveryStatus.setDescription("The status of the discovery for the particular Fabric.\n\nInitially when the switch comes up, all instances of this\nobject have the value: 'localOnly', and the database\ncontains only local information, i.e., no information\ndiscovered via the Fabric Configuration Server protocol\nspecified in FC-GS-5.\n\nIf t11FcsFabricDiscoveryStart is set to 'start' for a\nrange of Fabrics that includes this Fabric, then the\nvalue of this object transitions to 'inProgress'.  When\nthe discovery completes, this object transitions to\n'completed', and the data is cached for the minimum\ninterval of time specified by\nt11FcsFabricDiscoveryTimeOut.  After this interval has\nbeen exceeded, the data may be lost, in which case, the\nvalue of this object changes to 'localOnly'.\n\nThis object cannot be set via SNMP to any value other\nthan 'localOnly'.  If this object is set (via SNMP) to\n'localOnly', the cached data for the Fabric is discarded\nimmediately, and if a discovery initiated from this\nswitch was in progress for this Fabric, then that\ndiscovery is aborted.")
t11FcsDiscoveryCompleteTime = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 1, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsDiscoveryCompleteTime.setDescription("This object contains the value of sysUpTime at which\ndiscovery was most recently completed or aborted on this\nFabric.  This object contains the value of zero before\nthe first discovery on this Fabric.")
t11FcsDiscoveredConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 162, 1, 2))
t11FcsIeTable = MibTable((1, 3, 6, 1, 2, 1, 162, 1, 2, 1))
if mibBuilder.loadTexts: t11FcsIeTable.setDescription("A table of Interconnect Elements.  Interconnect\nElements (IEs) are switches, hubs, bridges etc.\n\nBy default, the Fabric Configuration Server will\nmaintain detailed information pertaining only to\nlocal resources.  As far as discovered topology is\nconcerned, only the IE name, type, and Domain ID\ninformation will be maintained.  If a discovery\ncycle is triggered on a set of Fabrics, this table\nalong with the Port and Platform tables will be\npopulated with the discovered information.  The\ndiscovered data will be retained in this table for\nat least t11FcsFabricDiscoveryTimeOut seconds after\nthe completion of its discovery or until the\ndiscovered data is invalidated.")
t11FcsIeEntry = MibTableRow((1, 3, 6, 1, 2, 1, 162, 1, 2, 1, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsFabricIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsIeName"))
if mibBuilder.loadTexts: t11FcsIeEntry.setDescription("Information about an Interconnect Element that was\ndiscovered on a Fabric (identified by t11FcsFabricIndex),\nby a switch (identified by fcmInstanceIndex and\nfcmSwitchIndex).")
t11FcsIeName = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 1, 1, 1), FcNameIdOrZero().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(8,8),ValueSizeConstraint(16,16),))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcsIeName.setDescription("The WWN of an Interconnect Element.  This object\nuniquely identifies an Interconnect Element on a\nFabric.  If the IE is a switch, then this object\nis the Switch_Name (WWN) of the switch.")
t11FcsIeType = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 1, 1, 2), T11FcIeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsIeType.setDescription("The type of this Interconnect Element.")
t11FcsIeDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 1, 1, 3), FcDomainIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsIeDomainId.setDescription("The Domain ID of this Interconnect Element.")
t11FcsIeMgmtId = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 1, 1, 4), FcAddressIdOrZero().clone(hexValue='000000')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsIeMgmtId.setDescription("The management identifier of this Interconnect Element.\nIf the Interconnect Element is a switch, this object will\nbe the Domain Controller identifier of the switch.  When\nthe value of the identifier is unknown, this object\ncontains the all-zeros value: x'00 00 00'.")
t11FcsIeFabricName = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 1, 1, 5), FcNameIdOrZero().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(8,8),ValueSizeConstraint(16,16),)).clone(hexValue='0000000000000000')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsIeFabricName.setDescription("The Fabric_Name (WWN) of this Interconnect Element.\nWhen the Fabric_Name is unknown, this object contains\nthe all-zeros value: x'00 00 00 00 00 00 00 00'.")
t11FcsIeLogicalName = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsIeLogicalName.setDescription("The logical name of this Interconnect Element.\nWhen the logical name is unknown, this object contains\nthe zero-length string.")
t11FcsIeMgmtAddrListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 1, 1, 7), T11FcListIndexPointerOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsIeMgmtAddrListIndex.setDescription("The management address list for this Interconnect Element.\nThis object points to an entry in the\nt11FcsMgmtAddrListTable.")
t11FcsIeInfoList = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 252))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsIeInfoList.setDescription("The information list for this Interconnect Element.\n\nThe value of this object is formatted as specified in\nFC-GS-5, i.e., it has the following substrings in order:\nvendor name, model name/number, and release code/level,\nfollowed by zero or more substrings of vendor-specific\ninformation.  Each substring is terminated with a byte\ncontaining a null value (x'00').")
t11FcsMgmtAddrListTable = MibTable((1, 3, 6, 1, 2, 1, 162, 1, 2, 2))
if mibBuilder.loadTexts: t11FcsMgmtAddrListTable.setDescription("This table contains the set of management address lists\nthat are currently referenced by any instance of the\nt11FcsIeMgmtAddrListIndex or\nt11FcsPlatformMgmtAddrListIndex objects.")
t11FcsMgmtAddrListEntry = MibTableRow((1, 3, 6, 1, 2, 1, 162, 1, 2, 2, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsMgmtAddrListIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsMgmtAddrIndex"))
if mibBuilder.loadTexts: t11FcsMgmtAddrListEntry.setDescription("Information about one management address in a\nmanagement address list, which is known to a\nswitch (identified by fcmInstanceIndex and\nfcmSwitchIndex).")
t11FcsMgmtAddrListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 2, 1, 1), T11FcListIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcsMgmtAddrListIndex.setDescription("The index value of the management address list.")
t11FcsMgmtAddrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcsMgmtAddrIndex.setDescription("An integer value to distinguish different\nmanagement addresses in the same list.")
t11FcsMgmtAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 2, 1, 3), URLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsMgmtAddr.setDescription("The management address of this entry.\n\nThe format of this object is a Uniform Resource\nLocator (URL), e.g., for SNMP, see RFC 4088.")
t11FcsPortTable = MibTable((1, 3, 6, 1, 2, 1, 162, 1, 2, 4))
if mibBuilder.loadTexts: t11FcsPortTable.setDescription("This table contains information about the ports of IEs.")
t11FcsPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 162, 1, 2, 4, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsFabricIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsIeName"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPortName"))
if mibBuilder.loadTexts: t11FcsPortEntry.setDescription("Information about a particular port of an Interconnect\nElement (identified by t11FcsIeName).  The port is\nconnected to a Fabric (identified by t11FcsFabricIndex)\nand known to a switch (identified by fcmInstanceIndex\nand fcmSwitchIndex).")
t11FcsPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 4, 1, 1), FcNameIdOrZero().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(8,8),ValueSizeConstraint(16,16),))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcsPortName.setDescription("The Port_Name (WWN) of the port for which this row\ncontains information.")
t11FcsPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 4, 1, 2), FcPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPortType.setDescription("The Port Type of this port.")
t11FcsPortTxType = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 4, 1, 3), T11FcPortTxType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPortTxType.setDescription("The Port TX Type of this port.")
t11FcsPortModuleType = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPortModuleType.setDescription("The port module type of this port.")
t11FcsPortPhyPortNum = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPortPhyPortNum.setDescription("The physical number for this port.  FC-GS-5 says that\nthe contents of this field, which are carried in a field\nwith a size of 4 bytes, are not to be restricted due to\nvendor-specific methods for numbering physical ports.")
t11FcsPortAttachPortNameIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 4, 1, 6), T11FcListIndexPointerOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPortAttachPortNameIndex.setDescription("The attached port name list for this port.  This object\npoints to an entry in the t11FcsAttachPortNameListTable.")
t11FcsPortState = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 4, 1, 7), T11FcPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPortState.setDescription("The state of this port.")
t11FcsPortSpeedCapab = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPortSpeedCapab.setDescription("The port speed capabilities of this port.  The two octets\nof the value are formatted as described in FC-GS-5.")
t11FcsPortOperSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPortOperSpeed.setDescription("The operating speed of this port.  The two octets\nof the value are formatted as described in FC-GS-5.")
t11FcsPortZoningEnfStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPortZoningEnfStatus.setDescription("The zoning enforcement status of this port.  The 12\noctets of the value are formatted as described in FC-GS-5.")
t11FcsAttachPortNameListTable = MibTable((1, 3, 6, 1, 2, 1, 162, 1, 2, 5))
if mibBuilder.loadTexts: t11FcsAttachPortNameListTable.setDescription("This table contains all the lists of attach port\nnames.")
t11FcsAttachPortNameListEntry = MibTableRow((1, 3, 6, 1, 2, 1, 162, 1, 2, 5, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsAttachPortNameListIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsAttachPortName"))
if mibBuilder.loadTexts: t11FcsAttachPortNameListEntry.setDescription("Information about the name of a particular attached port,\nwhich is known to a switch (identified by fcmInstanceIndex\nand fcmSwitchIndex).")
t11FcsAttachPortNameListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 5, 1, 1), T11FcListIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcsAttachPortNameListIndex.setDescription("The index value of the attach port name list.")
t11FcsAttachPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsAttachPortName.setDescription("The attached port name.  Zero or more of these names\nmay be associated with a port object.\nThe first 8 bytes of this object contain the WWN of\nthe port followed by 2 reserved bytes.  Following\nthis is one byte of Port flags and one byte of\nPort type, as described in FC-GS-5.")
t11FcsPlatformTable = MibTable((1, 3, 6, 1, 2, 1, 162, 1, 2, 6))
if mibBuilder.loadTexts: t11FcsPlatformTable.setDescription("This table contains information on platforms.\n\nBy default, this table only contains local (e.g., for a\nlocal switch) information.  If a discovery is triggered,\nthis table will also contain information gathered by the\ndiscovery process.  The discovered information is retained\nin this table for at least t11FcsFabricDiscoveryTimeOut\nseconds after the completion of its discovery or until\nthe discovered cache is invalidated.")
t11FcsPlatformEntry = MibTableRow((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsFabricIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformIndex"))
if mibBuilder.loadTexts: t11FcsPlatformEntry.setDescription("Information about a particular platform, which is\nknown to a switch (identified by fcmInstanceIndex and\nfcmSwitchIndex).\n\nA platform can contain multiple nodes.  Information on\nnodes is contained in the t11FcsNodeNameListTable.  The\nt11FcsPlatformNodeNameListIndex object in this table\n\n\n\npoints to the list of nodes contained in this platform.\nSimilarly, the t11FcsPlatformMgmtAddrListIndex object in\nthis table points to the list of management addresses\nassociated with this platform.")
t11FcsPlatformIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcsPlatformIndex.setDescription("An integer value to distinguish one platform from\nother platforms in the same Fabric.")
t11FcsPlatformName = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformName.setDescription("The name of this platform.  The last byte of the value\nindicates the format of the name (even if the name itself\nis the zero-length string) as specified in FC-GS-5.")
t11FcsPlatformType = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformType.setDescription("The type(s) of this platform, encoded in 4 bytes as\nspecified in FC-GS-5.")
t11FcsPlatformNodeNameListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 4), T11FcListIndexPointerOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformNodeNameListIndex.setDescription("The list of nodes for this platform.  This object points\nto an entry in the t11FcsNodeNameListTable.")
t11FcsPlatformMgmtAddrListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 5), T11FcListIndexPointerOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformMgmtAddrListIndex.setDescription("The list of management addresses for this platform.  This\nobject points to an entry in the t11FcsMgmtAddrListTable.")
t11FcsPlatformVendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 6), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(12,12),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformVendorId.setDescription("The identifier of the vendor of this platform, in the\nformat specified in FC-GS-5.")
t11FcsPlatformProductId = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 7), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(20,20),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformProductId.setDescription("The vendor's product and/or model identifier for this\nplatform, in the format specified in FC-GS-5.")
t11FcsPlatformProductRevLevel = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 8), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(4,32),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformProductRevLevel.setDescription("The product revision level for this platform, in the\nformat specified in FC-GS-5.")
t11FcsPlatformDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 9), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(4,128),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformDescription.setDescription("The description of this platform, in the\nformat specified in FC-GS-5.  This value should\ninclude the full name and version identification of the\nplatform's hardware type and software operating system.")
t11FcsPlatformLabel = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 10), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(4,64),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformLabel.setDescription("An administratively assigned symbolic name for the\nplatform, in the format specified in FC-GS-5.")
t11FcsPlatformLocation = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 11), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(4,128),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformLocation.setDescription("The physical location of the platform, in the format\nspecified in FC-GS-5 (e.g., 'telephone closet, 3rd floor').")
t11FcsPlatformSystemID = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 12), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(4,64),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformSystemID.setDescription("An identifier for a hosting system that this platform is\nassociated with.  This identifier is used to associate\nplatforms of logical types (e.g., logical partitions) with\na physical system.")
t11FcsPlatformSysMgmtAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 13), T11FcListIndexPointerOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformSysMgmtAddr.setDescription("A list of management addresses for the platform.")
t11FcsPlatformClusterId = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 14), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(4,64),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformClusterId.setDescription("An identifier for a cluster that this platform is\nassociated with, where a cluster is a set of independent\nplatforms that are managed together to provide increased\nperformance capabilities, failover, etc.")
t11FcsPlatformClusterMgmtAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 15), T11FcListIndexPointerOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformClusterMgmtAddr.setDescription("A list of management addresses for the cluster identified\nin the corresponding instance of t11FcsPlatformClusterId.")
t11FcsPlatformFC4Types = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 6, 1, 16), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(32,32),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsPlatformFC4Types.setDescription("The FC-4 types supported by this platform, formatted as\na bit mask as specified in FC-GS-5.  If this object\ncontains the zero-length string, the types are unknown.")
t11FcsNodeNameListTable = MibTable((1, 3, 6, 1, 2, 1, 162, 1, 2, 7))
if mibBuilder.loadTexts: t11FcsNodeNameListTable.setDescription("This table contains all the lists of nodes.")
t11FcsNodeNameListEntry = MibTableRow((1, 3, 6, 1, 2, 1, 162, 1, 2, 7, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsNodeNameListIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsNodeName"))
if mibBuilder.loadTexts: t11FcsNodeNameListEntry.setDescription("Information about a node, which is known to a\n\n\n\nswitch (identified by fcmInstanceIndex and\nfcmSwitchIndex).")
t11FcsNodeNameListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 7, 1, 1), T11FcListIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11FcsNodeNameListIndex.setDescription("The index value of the node name list.")
t11FcsNodeName = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 2, 7, 1, 2), FcNameIdOrZero().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(8,8),ValueSizeConstraint(16,16),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsNodeName.setDescription("The name of this node.")
t11FcsStats = MibIdentifier((1, 3, 6, 1, 2, 1, 162, 1, 3))
t11FcsStatsTable = MibTable((1, 3, 6, 1, 2, 1, 162, 1, 3, 1))
if mibBuilder.loadTexts: t11FcsStatsTable.setDescription("This table contains all the statistics related\nto the Fabric Configuration Server.")
t11FcsStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 162, 1, 3, 1, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsFabricIndex"))
if mibBuilder.loadTexts: t11FcsStatsEntry.setDescription("A set of statistics for a particular Fabric (identified\nby t11FcsFabricIndex) on a switch (identified by\nfcmInstanceIndex and fcmSwitchIndex).")
t11FcsInGetReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsInGetReqs.setDescription("The number of Get Requests received by the Fabric\nConfiguration Server on this Fabric.\n\nThis counter has no discontinuities other than\nthose that all Counter32s have when sysUpTime=0.")
t11FcsOutGetReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsOutGetReqs.setDescription("The number of Get Requests sent by the Fabric\nConfiguration Server on this Fabric to other\nservers in the Fabric.\n\nThis counter has no discontinuities other than\nthose that all Counter32s have when sysUpTime=0.")
t11FcsInRegReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsInRegReqs.setDescription("The number of Registration Requests received by the\nFabric Configuration Server on this Fabric.\n\n\n\n\nThis counter has no discontinuities other than\nthose that all Counter32s have when sysUpTime=0.")
t11FcsOutRegReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsOutRegReqs.setDescription("The number of Registration Requests sent by the\nFabric Configuration Server on this Fabric.\n\nThis counter has no discontinuities other than\nthose that all Counter32s have when sysUpTime=0.")
t11FcsInDeregReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsInDeregReqs.setDescription("The number of Deregistration Requests received by\nthe Fabric Configuration Server on this Fabric.\n\nThis counter has no discontinuities other than\nthose that all Counter32s have when sysUpTime=0.")
t11FcsOutDeregReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsOutDeregReqs.setDescription("The number of Deregistration Requests sent by\nthe Fabric Configuration Server on this Fabric.\n\nThis counter has no discontinuities other than\nthose that all Counter32s have when sysUpTime=0.")
t11FcsRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsRejects.setDescription("The total number of requests rejected by the Fabric\nConfiguration Server on this Fabric.\n\n\n\nThis counter has no discontinuities other than\nthose that all Counter32s have when sysUpTime=0.")
t11FcsNotificationInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 162, 1, 4))
t11FcsNotifyControlTable = MibTable((1, 3, 6, 1, 2, 1, 162, 1, 4, 1))
if mibBuilder.loadTexts: t11FcsNotifyControlTable.setDescription("A table of control information for notifications\ngenerated due to Fabric Configuration Server events.\n\nValues written to objects in this table should be\npersistent/retained over agent reboots.")
t11FcsNotifyControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 162, 1, 4, 1, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsFabricIndex"))
if mibBuilder.loadTexts: t11FcsNotifyControlEntry.setDescription("Each entry contains notification control information\nfor a Fabric Configuration Server on a particular Fabric\n(identified by t11FcsFabricIndex) on a particular\nswitch (identified by fcmInstanceIndex and\nfcmSwitchIndex).")
t11FcsReqRejectNotifyEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 4, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcsReqRejectNotifyEnable.setDescription("This object specifies if the Fabric Configuration\nServer should generate 't11FcsRqRejectNotification'\nnotifications.\n\nIf the value of this object is 'true', then the\nnotification is issued.  If the value of this object\nis 'false', then the notification is not issued.")
t11FcsDiscoveryCompNotifyEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 4, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcsDiscoveryCompNotifyEnable.setDescription("This object specifies if the Fabric Configuration\nServer should generate 't11FcsDiscoveryCompleteNotify'\nnotifications.\n\nIf the value of this object is 'true', then the\nnotification is issued.  If the value of this object\nis 'false', then the notification is not issued.")
t11FcsMgmtAddrChangeNotifyEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 4, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcsMgmtAddrChangeNotifyEnable.setDescription("This object specifies if the Fabric Configuration\nServer should generate 't11FcsMgmtAddrChangeNotify'\nnotifications.\n\nIf the value of this object is 'true', then the\nnotification is issued.  If the value of this object\nis 'false', then the notification is not issued.")
t11FcsRejectCtCommandString = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsRejectCtCommandString.setDescription("The binary content of the Fabric Configuration Server\n\n\n\nrequest, formatted as an octet string (in network byte\norder) containing the Common Transport Information Unit\n(CT_IU), as described in Table 2 of FC-GS-5 (including\nthe preamble), which was most recently rejected by the\nFabric Configuration Server for this Fabric.\n\nThis object contains the zero-length string if and when the\nCT-IU's content is unavailable.\n\nWhen the length of this object is 255 octets, it contains\nthe first 255 octets of the CT-IU (in network byte order).")
t11FcsRejectRequestSource = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 4, 1, 1, 5), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsRejectRequestSource.setDescription("The WWN that was the source of the CT_IU contained in\nthe corresponding instance of t11FcsRejectCtCommandString.")
t11FcsRejectReasonCode = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 4, 1, 1, 6), T11NsGs4RejectReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsRejectReasonCode.setDescription("This object contains the reason code corresponding\nto the latest Fabric Configuration Server request\nrejected by the local system.")
t11FcsRejectReasonCodeExp = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 4, 1, 1, 7), T11FcsRejectReasonExplanation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsRejectReasonCodeExp.setDescription("When the corresponding instance of\nt11FcsRejectReasonCode has the value: 'unable to\nperform command request', this object contains the\ncorresponding reason code explanation.")
t11FcsRejectReasonVendorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 162, 1, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcsRejectReasonVendorCode.setDescription("A registration reject vendor-specific code.  This\nobject contains the vendor-specific code of the most\nrecently rejected Fabric Configuration Server\nRegistration request for the particular port on\nthe particular Fabric.")
t11FcsMgmtAddrChangeFabricIndex = MibScalar((1, 3, 6, 1, 2, 1, 162, 1, 4, 2), T11FabricIndex()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: t11FcsMgmtAddrChangeFabricIndex.setDescription("The index value that identifies the Fabric on which\na management address change has been detected.")
t11FcsMgmtAddrChangeIeName = MibScalar((1, 3, 6, 1, 2, 1, 162, 1, 4, 3), FcNameIdOrZero()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: t11FcsMgmtAddrChangeIeName.setDescription("The IE for which a management address change has been\ndetected.")
t11FcsMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 162, 2))
t11FcsMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 162, 2, 1))
t11FcsMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 162, 2, 2))

# Augmentions

# Notifications

t11FcsRqRejectNotification = NotificationType((1, 3, 6, 1, 2, 1, 162, 0, 1)).setObjects(*(("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsRejectReasonCodeExp"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsRejectReasonVendorCode"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsRejectReasonCode"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamLocalSwitchWwn"), ) )
if mibBuilder.loadTexts: t11FcsRqRejectNotification.setDescription("This notification is generated whenever the Fabric\nConfiguration Server on a switch (indicated by the\nvalue of t11FamLocalSwitchWwn) rejects a Fabric\nConfiguration Server request.\n\nThe Fabric Configuration Server should update the\nt11FcsRejectReasonCode, t11FcsRejectReasonCodeExp\nand t11FcsRejectReasonVendorCode objects with the\ncorresponding reason code, explanation and vendor\nspecific code before sending the notification.")
t11FcsDiscoveryCompleteNotify = NotificationType((1, 3, 6, 1, 2, 1, 162, 0, 2)).setObjects(*(("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsFabricDiscoveryRangeLow"), ) )
if mibBuilder.loadTexts: t11FcsDiscoveryCompleteNotify.setDescription("This notification is generated by the Fabric\nConfiguration Server on the completion of the\ndiscovery of Fabrics in the range that has\nt11FcsFabricDiscoveryRangeLow at its low end.")
t11FcsMgmtAddrChangeNotify = NotificationType((1, 3, 6, 1, 2, 1, 162, 0, 3)).setObjects(*(("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsMgmtAddrChangeIeName"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsMgmtAddrChangeFabricIndex"), ) )
if mibBuilder.loadTexts: t11FcsMgmtAddrChangeNotify.setDescription("This notification is generated by the Fabric\nConfiguration Server whenever the management\naddress of an IE changes, i.e., whenever an\nentry in the t11FcsMgmtAddrListTable changes.")

# Groups

t11FcsDiscoveryControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 162, 2, 2, 1)).setObjects(*(("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsFabricDiscoveryStart"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsFabricDiscoveryRangeHigh"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsFabricDiscoveryRangeLow"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsFabricDiscoveryTimeOut"), ) )
if mibBuilder.loadTexts: t11FcsDiscoveryControlGroup.setDescription("A collection of objects for requesting a Fabric\nConfiguration Server to discover the configuration\nof one or more Fabrics.")
t11FcsDiscoveryStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 162, 2, 2, 2)).setObjects(*(("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsDiscoveryCompleteTime"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsDiscoveryStatus"), ) )
if mibBuilder.loadTexts: t11FcsDiscoveryStatusGroup.setDescription("A collection of objects with which to monitor the\nstatus of discovery (of Fabric configurations) by\nFabric Configuration Servers.")
t11FcsDiscoveredConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 162, 2, 2, 3)).setObjects(*(("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsIeInfoList"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsIeMgmtId"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsIeMgmtAddrListIndex"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformVendorId"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsAttachPortName"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformProductRevLevel"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformLocation"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformMgmtAddrListIndex"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPortSpeedCapab"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsNodeName"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformType"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformClusterId"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPortAttachPortNameIndex"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsIeLogicalName"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPortState"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformFC4Types"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformLabel"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPortType"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPortModuleType"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsMgmtAddr"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformSysMgmtAddr"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformSystemID"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformName"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsIeDomainId"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsIeFabricName"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformProductId"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPortTxType"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformClusterMgmtAddr"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPortPhyPortNum"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformNodeNameListIndex"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsIeType"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPortZoningEnfStatus"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPortOperSpeed"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsPlatformDescription"), ) )
if mibBuilder.loadTexts: t11FcsDiscoveredConfigGroup.setDescription("A collection of objects to contain the Fabric configuration\ninformation discovered by Fabric Configuration Servers.")
t11FcsStatisticsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 162, 2, 2, 4)).setObjects(*(("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsInDeregReqs"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsOutRegReqs"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsInGetReqs"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsOutDeregReqs"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsOutGetReqs"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsRejects"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsInRegReqs"), ) )
if mibBuilder.loadTexts: t11FcsStatisticsGroup.setDescription("A collection of objects for Fabric Configuration Server\nstatistics information.")
t11FcsNotificationInfoGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 162, 2, 2, 5)).setObjects(*(("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsDiscoveryCompNotifyEnable"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsRejectRequestSource"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsRejectReasonCode"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsMgmtAddrChangeNotifyEnable"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsRejectReasonCodeExp"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsMgmtAddrChangeFabricIndex"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsRejectReasonVendorCode"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsMgmtAddrChangeIeName"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsRejectCtCommandString"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsReqRejectNotifyEnable"), ) )
if mibBuilder.loadTexts: t11FcsNotificationInfoGroup.setDescription("A collection of notification control and notification\ninformation objects for monitoring Fabric\nConfiguration Servers.")
t11FcsNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 162, 2, 2, 6)).setObjects(*(("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsMgmtAddrChangeNotify"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsDiscoveryCompleteNotify"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsRqRejectNotification"), ) )
if mibBuilder.loadTexts: t11FcsNotificationGroup.setDescription("A collection of notifications for monitoring Fabric\nConfiguration Servers.")

# Compliances

t11FcsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 162, 2, 1, 1)).setObjects(*(("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsNotificationGroup"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsDiscoveredConfigGroup"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsNotificationInfoGroup"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsDiscoveryControlGroup"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsDiscoveryStatusGroup"), ("T11-FC-FABRIC-CONFIG-SERVER-MIB", "t11FcsStatisticsGroup"), ) )
if mibBuilder.loadTexts: t11FcsMIBCompliance.setDescription("The compliance statement for entities that\nimplement the Fabric Configuration Server.")

# Exports

# Module identity
mibBuilder.exportSymbols("T11-FC-FABRIC-CONFIG-SERVER-MIB", PYSNMP_MODULE_ID=t11FcFabricConfigServerMIB)

# Types
mibBuilder.exportSymbols("T11-FC-FABRIC-CONFIG-SERVER-MIB", T11FcIeType=T11FcIeType, T11FcListIndex=T11FcListIndex, T11FcListIndexPointerOrZero=T11FcListIndexPointerOrZero, T11FcPortState=T11FcPortState, T11FcPortTxType=T11FcPortTxType, T11FcsRejectReasonExplanation=T11FcsRejectReasonExplanation)

# Objects
mibBuilder.exportSymbols("T11-FC-FABRIC-CONFIG-SERVER-MIB", t11FcFabricConfigServerMIB=t11FcFabricConfigServerMIB, t11FcsNotifications=t11FcsNotifications, t11FcsMIBObjects=t11FcsMIBObjects, t11FcsDiscovery=t11FcsDiscovery, t11FcsFabricDiscoveryTable=t11FcsFabricDiscoveryTable, t11FcsFabricDiscoveryEntry=t11FcsFabricDiscoveryEntry, t11FcsFabricDiscoveryRangeLow=t11FcsFabricDiscoveryRangeLow, t11FcsFabricDiscoveryRangeHigh=t11FcsFabricDiscoveryRangeHigh, t11FcsFabricDiscoveryStart=t11FcsFabricDiscoveryStart, t11FcsFabricDiscoveryTimeOut=t11FcsFabricDiscoveryTimeOut, t11FcsDiscoveryStateTable=t11FcsDiscoveryStateTable, t11FcsDiscoveryStateEntry=t11FcsDiscoveryStateEntry, t11FcsFabricIndex=t11FcsFabricIndex, t11FcsDiscoveryStatus=t11FcsDiscoveryStatus, t11FcsDiscoveryCompleteTime=t11FcsDiscoveryCompleteTime, t11FcsDiscoveredConfig=t11FcsDiscoveredConfig, t11FcsIeTable=t11FcsIeTable, t11FcsIeEntry=t11FcsIeEntry, t11FcsIeName=t11FcsIeName, t11FcsIeType=t11FcsIeType, t11FcsIeDomainId=t11FcsIeDomainId, t11FcsIeMgmtId=t11FcsIeMgmtId, t11FcsIeFabricName=t11FcsIeFabricName, t11FcsIeLogicalName=t11FcsIeLogicalName, t11FcsIeMgmtAddrListIndex=t11FcsIeMgmtAddrListIndex, t11FcsIeInfoList=t11FcsIeInfoList, t11FcsMgmtAddrListTable=t11FcsMgmtAddrListTable, t11FcsMgmtAddrListEntry=t11FcsMgmtAddrListEntry, t11FcsMgmtAddrListIndex=t11FcsMgmtAddrListIndex, t11FcsMgmtAddrIndex=t11FcsMgmtAddrIndex, t11FcsMgmtAddr=t11FcsMgmtAddr, t11FcsPortTable=t11FcsPortTable, t11FcsPortEntry=t11FcsPortEntry, t11FcsPortName=t11FcsPortName, t11FcsPortType=t11FcsPortType, t11FcsPortTxType=t11FcsPortTxType, t11FcsPortModuleType=t11FcsPortModuleType, t11FcsPortPhyPortNum=t11FcsPortPhyPortNum, t11FcsPortAttachPortNameIndex=t11FcsPortAttachPortNameIndex, t11FcsPortState=t11FcsPortState, t11FcsPortSpeedCapab=t11FcsPortSpeedCapab, t11FcsPortOperSpeed=t11FcsPortOperSpeed, t11FcsPortZoningEnfStatus=t11FcsPortZoningEnfStatus, t11FcsAttachPortNameListTable=t11FcsAttachPortNameListTable, t11FcsAttachPortNameListEntry=t11FcsAttachPortNameListEntry, t11FcsAttachPortNameListIndex=t11FcsAttachPortNameListIndex, t11FcsAttachPortName=t11FcsAttachPortName, t11FcsPlatformTable=t11FcsPlatformTable, t11FcsPlatformEntry=t11FcsPlatformEntry, t11FcsPlatformIndex=t11FcsPlatformIndex, t11FcsPlatformName=t11FcsPlatformName, t11FcsPlatformType=t11FcsPlatformType, t11FcsPlatformNodeNameListIndex=t11FcsPlatformNodeNameListIndex, t11FcsPlatformMgmtAddrListIndex=t11FcsPlatformMgmtAddrListIndex, t11FcsPlatformVendorId=t11FcsPlatformVendorId, t11FcsPlatformProductId=t11FcsPlatformProductId, t11FcsPlatformProductRevLevel=t11FcsPlatformProductRevLevel, t11FcsPlatformDescription=t11FcsPlatformDescription, t11FcsPlatformLabel=t11FcsPlatformLabel, t11FcsPlatformLocation=t11FcsPlatformLocation, t11FcsPlatformSystemID=t11FcsPlatformSystemID, t11FcsPlatformSysMgmtAddr=t11FcsPlatformSysMgmtAddr, t11FcsPlatformClusterId=t11FcsPlatformClusterId, t11FcsPlatformClusterMgmtAddr=t11FcsPlatformClusterMgmtAddr, t11FcsPlatformFC4Types=t11FcsPlatformFC4Types, t11FcsNodeNameListTable=t11FcsNodeNameListTable, t11FcsNodeNameListEntry=t11FcsNodeNameListEntry, t11FcsNodeNameListIndex=t11FcsNodeNameListIndex, t11FcsNodeName=t11FcsNodeName, t11FcsStats=t11FcsStats, t11FcsStatsTable=t11FcsStatsTable, t11FcsStatsEntry=t11FcsStatsEntry, t11FcsInGetReqs=t11FcsInGetReqs, t11FcsOutGetReqs=t11FcsOutGetReqs, t11FcsInRegReqs=t11FcsInRegReqs, t11FcsOutRegReqs=t11FcsOutRegReqs, t11FcsInDeregReqs=t11FcsInDeregReqs, t11FcsOutDeregReqs=t11FcsOutDeregReqs, t11FcsRejects=t11FcsRejects, t11FcsNotificationInfo=t11FcsNotificationInfo, t11FcsNotifyControlTable=t11FcsNotifyControlTable, t11FcsNotifyControlEntry=t11FcsNotifyControlEntry, t11FcsReqRejectNotifyEnable=t11FcsReqRejectNotifyEnable, t11FcsDiscoveryCompNotifyEnable=t11FcsDiscoveryCompNotifyEnable, t11FcsMgmtAddrChangeNotifyEnable=t11FcsMgmtAddrChangeNotifyEnable, t11FcsRejectCtCommandString=t11FcsRejectCtCommandString, t11FcsRejectRequestSource=t11FcsRejectRequestSource, t11FcsRejectReasonCode=t11FcsRejectReasonCode, t11FcsRejectReasonCodeExp=t11FcsRejectReasonCodeExp, t11FcsRejectReasonVendorCode=t11FcsRejectReasonVendorCode, t11FcsMgmtAddrChangeFabricIndex=t11FcsMgmtAddrChangeFabricIndex, t11FcsMgmtAddrChangeIeName=t11FcsMgmtAddrChangeIeName, t11FcsMIBConformance=t11FcsMIBConformance, t11FcsMIBCompliances=t11FcsMIBCompliances, t11FcsMIBGroups=t11FcsMIBGroups)

# Notifications
mibBuilder.exportSymbols("T11-FC-FABRIC-CONFIG-SERVER-MIB", t11FcsRqRejectNotification=t11FcsRqRejectNotification, t11FcsDiscoveryCompleteNotify=t11FcsDiscoveryCompleteNotify, t11FcsMgmtAddrChangeNotify=t11FcsMgmtAddrChangeNotify)

# Groups
mibBuilder.exportSymbols("T11-FC-FABRIC-CONFIG-SERVER-MIB", t11FcsDiscoveryControlGroup=t11FcsDiscoveryControlGroup, t11FcsDiscoveryStatusGroup=t11FcsDiscoveryStatusGroup, t11FcsDiscoveredConfigGroup=t11FcsDiscoveredConfigGroup, t11FcsStatisticsGroup=t11FcsStatisticsGroup, t11FcsNotificationInfoGroup=t11FcsNotificationInfoGroup, t11FcsNotificationGroup=t11FcsNotificationGroup)

# Compliances
mibBuilder.exportSymbols("T11-FC-FABRIC-CONFIG-SERVER-MIB", t11FcsMIBCompliance=t11FcsMIBCompliance)
