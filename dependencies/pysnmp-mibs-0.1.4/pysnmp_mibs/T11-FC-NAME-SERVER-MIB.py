# PySNMP SMI module. Autogenerated from smidump -f python T11-FC-NAME-SERVER-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:42 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( FcAddressIdOrZero, FcClasses, FcNameIdOrZero, FcPortType, fcmInstanceIndex, ) = mibBuilder.importSymbols("FC-MGMT-MIB", "FcAddressIdOrZero", "FcClasses", "FcNameIdOrZero", "FcPortType", "fcmInstanceIndex")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "mib-2")
( TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TruthValue")
( t11FamLocalSwitchWwn, ) = mibBuilder.importSymbols("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamLocalSwitchWwn")
( T11FabricIndex, ) = mibBuilder.importSymbols("T11-TC-MIB", "T11FabricIndex")

# Types

class T11NsGs4RejectReasonCode(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(9,1,12,5,6,10,4,11,2,8,3,7,)
    namedValues = NamedValues(("none", 1), ("serverNotAvailable", 10), ("couldNotEstabSession", 11), ("vendorError", 12), ("invalidCmdCode", 2), ("invalidVerLevel", 3), ("logicalError", 4), ("invalidIUSize", 5), ("logicalBusy", 6), ("protocolError", 7), ("unableToPerformCmdReq", 8), ("cmdNotSupported", 9), )
    
class T11NsRejReasonCodeExpl(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(22,3,16,23,11,19,13,24,4,21,20,12,15,7,8,14,1,26,9,5,6,25,10,18,2,17,)
    namedValues = NamedValues(("noAdditionalExplanation", 1), ("symbolicNodeNameNotRegistered", 10), ("portTypeNotRegistered", 11), ("portIpAddressNotRegistered", 12), ("fabricPortNameNotRegistered", 13), ("hardAddressNotRegistered", 14), ("fc4DescriptorNotRegistered", 15), ("fc4FeaturesNotRegistered", 16), ("accessDenied", 17), ("unacceptablePortIdentifier", 18), ("databaseEmpty", 19), ("portIdentifierNotRegistered", 2), ("noObjectRegInSpecifiedScope", 20), ("domainIdNotPresent", 21), ("portIdNotPresent", 22), ("noDeviceAttached", 23), ("authorizationException", 24), ("authenticationException", 25), ("databaseFull", 26), ("portNameNotRegistered", 3), ("nodeNameNotRegistered", 4), ("classOfServiceNotRegistered", 5), ("nodeIpAddressNotRegistered", 6), ("ipaNotRegistered", 7), ("fc4TypeNotRegistered", 8), ("symbolicPortNameNotRegistered", 9), )
    

# Objects

t11FcNameServerMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 135)).setRevisions(("2006-03-02 00:00",))
if mibBuilder.loadTexts: t11FcNameServerMIB.setOrganization("T11")
if mibBuilder.loadTexts: t11FcNameServerMIB.setContactInfo("     Claudio DeSanti\nCisco Systems, Inc.\n170 West Tasman Drive\nSan Jose, CA 95134 USA\nPhone: +1 408 853-9172\nEMail: cds@cisco.com\n\nKeith McCloghrie\nCisco Systems, Inc.\n170 West Tasman Drive\nSan Jose, CA USA 95134\nPhone: +1 408-526-5260\nEMail: kzm@cisco.com")
if mibBuilder.loadTexts: t11FcNameServerMIB.setDescription("The MIB module for the management of the functionality,\nwhich realizes the FC-GS-4 requirements for Name\nServer (NS).\n\nCopyright (C) The Internet Society (2006).  This version of\nthis MIB module is part of RFC 4438; see the RFC itself for\nfull legal notices.")
t11NsNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 0))
t11NsMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 1))
t11NsStatus = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 1, 1))
t11NsInfoSubsetTable = MibTable((1, 3, 6, 1, 2, 1, 135, 1, 1, 1))
if mibBuilder.loadTexts: t11NsInfoSubsetTable.setDescription("This table contains one entry for each Name Server\nInformation Subset within each Fibre Channel\nmanagement instance.")
t11NsInfoSubsetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetIndex"))
if mibBuilder.loadTexts: t11NsInfoSubsetEntry.setDescription("This entry contains information about operations\non a particular Name Server Information Subset\nwithin the Fibre Channel management instance\nidentified by fcmInstanceIndex.")
t11NsInfoSubsetIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11NsInfoSubsetIndex.setDescription("An arbitrary integer value that uniquely identifies\nthis Name Server Information Subset amongst all others\nwithin the same Fibre Channel management instance.\n\nIt is mandatory to keep this value constant between\nrestarts of the agent and to make every possible\neffort to keep it constant across such restarts.")
t11NsInfoSubsetSwitchIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInfoSubsetSwitchIndex.setDescription("The value of this object is zero when operations\nupon this Name Server Information Subset do not occur\nat a local Fibre Channel switch; otherwise, it is\nnon-zero and identifies the local switch.\n\nThe switch identified by a non-zero value of this\nobject is the same switch as is identified by the\nsame value of fcmSwitchIndex.")
t11NsInfoSubsetTableLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInfoSubsetTableLastChange.setDescription("The value of sysUpTime at the time of the last update\nto any entry in the t11NsRegTable with the same values\nof fcmInstanceIndex and t11NsInfoSubsetIndex.  This\nincludes creation of an entry, deletion of an entry, or\nmodification of an existing entry.  If no such update\nhas taken place since the last re-initialization of the\nlocal network management subsystem, then this object\ncontains a zero value.")
t11NsInfoSubsetNumRows = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInfoSubsetNumRows.setDescription("The number of Nx_Ports currently registered in this\n\n\n\nName Server Information Subset, i.e., the number of\nrows in the t11NsRegTable with the same values of\nfcmInstanceIndex and t11NsInfoSubsetIndex.")
t11NsInfoSubsetTotalRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInfoSubsetTotalRejects.setDescription("The total number of (CT_IU) Requests for Name Server\nfunctions that were rejected for inclusion in this\nName Server Information Subset, across all Fabrics\nfor which it contains information.\n\nThis counter has no discontinuities other than those\nthat all Counter32s have when sysUpTime=0.")
t11NsInfoSubsetRejReqNotfyEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11NsInfoSubsetRejReqNotfyEnable.setDescription("This object indicates whether 't11NsRejectRegNotify'\nnotifications are generated by rejections of requests\nto register information in this Name Server Information\nSubset.\n\nIf value of this object is 'true', then the\nnotification is generated when a request is rejected.\nIf it is 'false', the notification is not generated.\n\nThe persistence of values of this object across an\nagent reboot is implementation-dependent.")
t11NsRegTable = MibTable((1, 3, 6, 1, 2, 1, 135, 1, 1, 2))
if mibBuilder.loadTexts: t11NsRegTable.setDescription("This table contains entries for all Nx_Ports registered\n\n\n\nin the identified Name Server Information Subsets across\nall Fabrics for which such subsets contain information.")
t11NsRegEntry = MibTableRow((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegFabricIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegPortIdentifier"))
if mibBuilder.loadTexts: t11NsRegEntry.setDescription("An entry containing information about an Nx_Port\nrepresented by t11NsRegPortIdentifier that is registered\nwith a Name Server Information Subset (identified by\nt11NsInfoSubsetIndex) within the Fibre Channel management\ninstance (identified by fcmInstanceIndex) on the Fabric\n(identified by t11NsRegFabricIndex).")
t11NsRegFabricIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 1), T11FabricIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11NsRegFabricIndex.setDescription("A unique index value that uniquely identifies a\nparticular Fabric.\n\nIn a Fabric conformant to SW-3, only a single Fabric can\noperate within a single physical infrastructure, and thus,\nthe value of this Fabric Index will always be 1.\n\n\n\nHowever, it is possible that future standards will define\nhow multiple Fabrics, each with its own management\ninstrumentation, could operate within one (or more) physical\ninfrastructures.  To allow for this future possibility, this\nindex value is used to uniquely identify a particular\nFabric within a physical infrastructure.")
t11NsRegPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 2), FcAddressIdOrZero()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11NsRegPortIdentifier.setDescription("The Fibre Channel Address Identifier of this Nx_Port.\nIf no Port Identifier has been registered, then the\nvalue of this object is the zero-length string.")
t11NsRegPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 3), FcNameIdOrZero().clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegPortName.setDescription("The Port_Name (WWN) of this Nx_Port.\nIf this object has not been registered, then its value\nis the zero-length string.")
t11NsRegNodeName = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 4), FcNameIdOrZero().clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegNodeName.setDescription("The Node_Name (WWN) of this Nx_Port.\nIf this object has not been registered, then its value\nis the zero-length string.")
t11NsRegClassOfSvc = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 5), FcClasses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegClassOfSvc.setDescription("The class of service indicator.  This object is an\narray of bits that contain a bit map of the classes of\nservice supported by the associated port.  If a bit in\n\n\n\nthis object is 1, it indicates that the class of\nservice is supported by the associated port.  When a\nbit is set to 0, it indicates that no class of service\nis supported by this Nx_Port.\n\nIf this object has not been not registered for a port,\nthen the instance for that port is not instantiated.")
t11NsRegNodeIpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(16,16),)).clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegNodeIpAddress.setDescription("The IP address of the node of this Nx_Port, in\nnetwork-byte order, either as a 32-bit IPv4 address or\na 128-bit IPv6 address.  For the former, the leftmost 96 bits\n(12 bytes) should contain x'00 00 00 00 00 00 00 00 00 00 FF\nFF', and the IPv4 address should be present in the rightmost\n32 bits.\n\nNote that the value of this object is the IP address value\nthat is received in the FC-GS-4 message Register IP address\n(Node) RIP_NN.  It is not validated against any IP address\nformat.\n\nIf no 'IP address (Node)' has been registered, then the\nvalue of this object is the zero-length string.")
t11NsRegProcAssoc = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(8,8),)).clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegProcAssoc.setDescription("The Fibre Channel Initial Process Associator (IPA).\n\nIf no 'Initial Process Associator' has been registered,\nthen the value of this object is the zero-length string.")
t11NsRegFc4Type = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(32,32),)).clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegFc4Type.setDescription("The FC-4 protocol types supported by this Nx_Port.\nThis is an array of 256 bits.  Each bit in the array\ncorresponds to a Type value as defined by Fibre Channel\nstandards and contained in the Type field of the frame\nheader.  The order of the bits in the 256-bit (32-byte)\nvalue is the same as defined in FC-GS-4, section 5.2.3.8,\nand represented in network-byte order.\n\nIf no 'FC-4 TYPEs' has been registered, then the\nvalue of this object is the zero-length string.")
t11NsRegPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 9), FcPortType().clone('1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegPortType.setDescription("The port type of this port.\n\nIf no 'Port Type' has been registered, then the value\nof this object is unidentified and is represented by\nthe value 'unknown'.")
t11NsRegPortIpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(16,16),)).clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegPortIpAddress.setDescription("The value that Fibre Channel calls an 'IP Address (Port)'\nthat represents the IP address of the associated port.\nThe value is either in 32-bit IPv4 format or 128-bit IPv6\nformat, in network-byte order.  When this object contains an\nIPv4 address, the leftmost 96 bits (12 bytes) should contain\nx'00 00 00 00 00 00 00 00 00 00 FF FF'.  The IPv4 address\nshould be present in the rightmost 32 bits.\n\nNote that the value of this object is the IP address value\n\n\n\nthat is received in the FC-GS-4 message Register IP address\n(Port) RIPP_ID.  It is not validated against any IP address\nformat.\n\nIf no 'IP address (Port)' has been registered, then the\nvalue of this object is the zero-length string.")
t11NsRegFabricPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 11), FcNameIdOrZero().clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegFabricPortName.setDescription("The Fabric Port Name (WWN) of the Fx_Port to which\nthis Nx_Port is attached.\n\nIf no 'Fabric Port Name' has been registered, then the\nvalue of this object is the zero-length string.")
t11NsRegHardAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 12), FcAddressIdOrZero().clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegHardAddress.setDescription("The format of this object is identical to the format\nof Hard Address defined in the Discover Address (ADISC)\nExtended Link Service (FC-FS).\n\nHard Address is the 24-bit NL_Port identifier that\nconsists of:\n  - the 8-bit Domain_ID in the most significant byte\n  - the 8-bit Area_ID in the next most significant\n    byte\n  - the 8-bit AL-PA (Arbitrated Loop Physical Address)\n    which an NL_Port attempts acquire during FC-AL\n    initialization in the least significant byte.\n\nIf the port is not an NL_Port, or if it is an NL_Port\nbut does not have a hard address, then all bits are\nreported as zeros.\n\nIf no 'Hard Address' has been registered, then the\n\n\n\nvalue of this object is the zero-length string.")
t11NsRegSymbolicPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegSymbolicPortName.setDescription("The user-defined name of this port.\n\nIf no 'Symbolic Port Name' has been registered, then\nthe value of this object is the zero-length string.")
t11NsRegSymbolicNodeName = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegSymbolicNodeName.setDescription("The user-defined name of the node of this port.\n\nIf no 'Symbolic Node Name' has been registered, then\nthe value of this object is the zero-length string.")
t11NsRegFc4Features = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 15), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(128,128),)).clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegFc4Features.setDescription("The FC-4 Features associated with FC-4 Types on this\nport encoded as a 128-byte value in network-byte order,\nor the zero-length string if no 'FC-4 Features' have been\nregistered.\n\nSection 5.2.3.15 of FC-GS-4 is the authoritative\ndefinition of the format of the 128-byte value,\ni.e., if different, FC-GS-4 takes precedence over the\nfollowing description:\n\nThe 128-byte value is an array of 4-bit values, one for\neach FC-4 Type value, positioned as follows: the 5 most\nsignificant bits of a Type value identify where it appears\nwithin the 128-byte value, specifically, within which word:\n\n\n\n      - Word 0 (of the 128-byte value) contains information\n        related to Types '00' through '07';\n      - Word 1 contains information related to Types\n        '08' through 0F';\n      - and so forth, up to Word 31, which contains\n        information related to Types 'F8' through 'FF'.\n\nThe least significant of the eight 4-bit values in each\nWord represents an FC-4 Type with 000 as its 3 least\nsignificant bits, and most significant 4-bit value in\neach Word represents an FC-4 Type with 111 as its 3 least\nsignificant bits.")
t11NsRegFc4DescriptorTable = MibTable((1, 3, 6, 1, 2, 1, 135, 1, 1, 3))
if mibBuilder.loadTexts: t11NsRegFc4DescriptorTable.setDescription("This table contains entries for all FC-4 Descriptors\nregistered in the identified Name Server Information\nSubsets across all Fabrics for which such subsets\ncontain information.")
t11NsRegFc4DescriptorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 135, 1, 1, 3, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegFabricIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegPortIdentifier"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegFc4TypeValue"))
if mibBuilder.loadTexts: t11NsRegFc4DescriptorEntry.setDescription("An entry in the t11NsRegFc4DescriptorTable,\ncontaining information about an FC-4 Descriptor\nthat is associated with a particular FC-4 Type\nvalue.  The particular FC-4 Descriptor was\nregistered by an Nx_Port (identified by\nt11NsRegPortIdentifier) in a Name Server Information\nSubset (identified by t11NsInfoSubsetIndex) within\nthe Fibre Channel management instance (identified by\nfcmInstanceIndex) on the Fabric (identified by\n\n\n\nt11NsRegFabricIndex).\n\nIf no FC-4 Descriptors have been registered\nfor a particular port, then there will be no\nentries in this table for that port.")
t11NsRegFc4TypeValue = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t11NsRegFc4TypeValue.setDescription("An integer value that identifies an FC-4 Type value\n(representing a particular protocol type, as specified\nin FC-FS) for which an FC-4 Descriptor has been\nregistered.\n\nAn instance of this object contains a 'Type value'\nthat corresponds to a '1' bit in the value of the\nt11NsRegFc4Type registered for the same port;\nthis correspondence is as specified in FC-GS-4.")
t11NsRegFc4Descriptor = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegFc4Descriptor.setDescription("The FC-4 Descriptor value that has been registered\nfor the particular port on the particular Fabric, and\nfor the FC-4 Type represented by the corresponding\nvalue of t11NsRegFc4TypeIndex.\n\nThe format of an FC-4 Descriptor is dependent on the\ncorresponding FC-4 Type value, but is represented in\n\n\n\nnetwork-byte order.")
t11NsRejectTable = MibTable((1, 3, 6, 1, 2, 1, 135, 1, 1, 4))
if mibBuilder.loadTexts: t11NsRejectTable.setDescription("This table contains information about the most recent\nName Server Registration Request failures for various\nports on various Fabrics.\n\nIf no information is available about the most recent\nrejection of a Registration Request on a particular port\non a particular Fabric, then there will no entry in this\ntable for that port and Fabric.\n\nWhen a t11NsRejectRegNotify notification is sent for\nsuch a Registration Request failure, the values of the\nobjects in the relevant entry of this table are updated\nimmediately prior to generating the notification.")
t11NsRejectEntry = MibTableRow((1, 3, 6, 1, 2, 1, 135, 1, 1, 4, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegFabricIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegPortIdentifier"))
if mibBuilder.loadTexts: t11NsRejectEntry.setDescription("An entry containing information about the most recent\nrejection of a request to register information in the Name\nServer Information Subset (identified by\nt11NsInfoSubsetIndex) within the Fibre Channel management\ninstance (identified by fcmInstanceIndex) for a particular\nport (identified by t11NsRegPortIdentifier) on a particular\nFabric (identified by t11NsRegFabricIndex).")
t11NsRejectCtCommandString = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRejectCtCommandString.setDescription("The binary content of the Registration Request,\nformatted as an octet string (in network byte\norder) containing the CT_IU, as described in\nTable 2 of [FC-GS-4] (including the preamble),\nwhich was most recently rejected for the particular\nName Server Information Subset on the particular port\non the particular Fabric.\n\nThis object contains the zero-length string\nif and when the CT-IU's content is unavailable.\n\nWhen the length of this object is 255 octets, it\ncontains the first 255 octets of the CT-IU (in\nnetwork-byte order).")
t11NsRejectReasonCode = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 4, 1, 2), T11NsGs4RejectReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRejectReasonCode.setDescription("A registration reject reason code.  This object\ncontains the reason code of the most recent Name\nServer Registration Request failure for the\nparticular port on the particular Fabric.")
t11NsRejReasonCodeExp = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 4, 1, 3), T11NsRejReasonCodeExpl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRejReasonCodeExp.setDescription("A registration reject reason code explanation.  This\nobject contains the reason code explanation of the most\nrecent Name Server Registration Request failure for the\nparticular port on the particular Fabric.")
t11NsRejReasonVendorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRejReasonVendorCode.setDescription("A registration reject vendor-specific code.  This\nobject contains the vendor-specific code of the most\nrecent Name Server Registration Request failure for the\nparticular port on the particular Fabric.")
t11NsStatistics = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 1, 2))
t11NsStatsTable = MibTable((1, 3, 6, 1, 2, 1, 135, 1, 2, 1))
if mibBuilder.loadTexts: t11NsStatsTable.setDescription("This table contains per-Fabric state and statistics\nfor operations upon the identified Name Server\nInformation Subsets.")
t11NsStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1)).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegFabricIndex"))
if mibBuilder.loadTexts: t11NsStatsEntry.setDescription("An entry in this table contains state and statistics\nfor operations upon a Name Server Information Subset\n(identified by t11NsInfoSubsetIndex) within the Fibre\nChannel management instance (identified by\nfcmInstanceIndex) on the Fabric (identified by\nt11NsRegFabricIndex).")
t11NsInGetReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInGetReqs.setDescription("The total number of (CT_IU) Get Requests\nreceived requesting information from this Name\nServer Information Subset on this Fabric.\n\nThis counter has no discontinuities other than those\nthat all Counter32s have when sysUpTime=0.")
t11NsOutGetReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsOutGetReqs.setDescription("The total number of (CT_IU) Get Requests sent in\norder to obtain information needed in this Name Server\nInformation Subset on this Fabric.\n\nThis counter has no discontinuities other than those\nthat all Counter32s have when sysUpTime=0.")
t11NsInRegReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInRegReqs.setDescription("The total number of (CT_IU) Registration Requests\nreceived to register information in the Name Server\nInformation Subset on this Fabric.\n\nThis counter has no discontinuities other than those\nthat all Counter32s have when sysUpTime=0.")
t11NsInDeRegReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInDeRegReqs.setDescription("The total number of (CT_IU) De-registration Requests\nreceived to de-register information from this Name Server\nInformation Subset on this Fabric.\n\nThis counter has no discontinuities other than those\n\n\n\nthat all Counter32s have when sysUpTime=0.")
t11NsInRscns = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInRscns.setDescription("The total number of received RSCNs, indicating\nName Server-related changes relating to this Name\nServer Information Subset on this Fabric.\n\nThis counter has no discontinuities other than those\nthat all Counter32s have when sysUpTime=0.")
t11NsOutRscns = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsOutRscns.setDescription("The total number of transmitted RSCNs, indicating\nName Server-related changes relating to this Name\nServer Information Subset on this Fabric.\n\nThis counter has no discontinuities other than those\nthat all Counter32s have when sysUpTime=0.")
t11NsRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRejects.setDescription("The total number of CT_IU Requests for Name\nServer functions on this Name Server Information\nSubset on this Fabric that were rejected.\n\nThis counter has no discontinuities other than those\nthat all Counter32s have when sysUpTime=0.")
t11NsDatabaseFull = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsDatabaseFull.setDescription("An indication of whether the database containing this\n\n\n\nName Server Information Subset is full.  This object is\nset to 'true' only if the Name Server is unable to allocate\nspace for a new entry for the corresponding Fabric, and it is\nset to 'false' whenever an existing entry is deleted for the\ncorresponding Fabric.")
t11NsMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 2))
t11NsMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 2, 1))
t11NsMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 2, 2))

# Augmentions

# Notifications

t11NsRejectRegNotify = NotificationType((1, 3, 6, 1, 2, 1, 135, 0, 1)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsRegPortName"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejReasonCodeExp"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejectReasonCode"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamLocalSwitchWwn"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejectCtCommandString"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejReasonVendorCode"), ) )
if mibBuilder.loadTexts: t11NsRejectRegNotify.setDescription("This notification is generated whenever a request to\nregister information in a Name Server Information\nSubset (for which the corresponding instance of\nt11NsInfoSubsetRejReqNotfyEnable is 'true') is\nrejected on a particular Fabric for a particular Nx_Port.\n\nThe value of t11FamLocalSwitchWwn indicates the\nWWN of the switch that received the request.\n(If the WWN is unavailable, the value is set to\nthe zero-length string.)\n\nThe value of t11NsRejectCtCommandString indicates\nthe rejected request, and the values of\nt11NsRejectReasonCode, t11NsRejReasonCodeExp, and\nt11NsRejReasonVendorCode indicate the reason for\nthe rejection.\n\nThe value of t11NsRegPortName represents the Port Name\nif it is able to be extracted out of the Registration\nRequest, or otherwise the value as currently registered\non the port.")

# Groups

t11NsDBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 135, 2, 2, 1)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsRegFc4Features"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegProcAssoc"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegPortType"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegSymbolicPortName"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegPortName"), ("T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetSwitchIndex"), ("T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetNumRows"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegHardAddress"), ("T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetTableLastChange"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegClassOfSvc"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegPortIpAddress"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegSymbolicNodeName"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegFc4Descriptor"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegFc4Type"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegNodeIpAddress"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegNodeName"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegFabricPortName"), ) )
if mibBuilder.loadTexts: t11NsDBGroup.setDescription("A collection of objects for monitoring the information\nregistered in a Name Server Information Subset.")
t11NsRequestStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 135, 2, 2, 2)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsInRegReqs"), ("T11-FC-NAME-SERVER-MIB", "t11NsOutGetReqs"), ("T11-FC-NAME-SERVER-MIB", "t11NsInDeRegReqs"), ("T11-FC-NAME-SERVER-MIB", "t11NsDatabaseFull"), ("T11-FC-NAME-SERVER-MIB", "t11NsInGetReqs"), ) )
if mibBuilder.loadTexts: t11NsRequestStatsGroup.setDescription("A collection of objects for displaying Name\nServer statistics and state for Name Server requests.")
t11NsRscnStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 135, 2, 2, 3)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsInRscns"), ("T11-FC-NAME-SERVER-MIB", "t11NsOutRscns"), ) )
if mibBuilder.loadTexts: t11NsRscnStatsGroup.setDescription("A collection of objects for displaying Name\nServer statistics for Name Server-related RSCNs.")
t11NsRejectStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 135, 2, 2, 4)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetTotalRejects"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejects"), ) )
if mibBuilder.loadTexts: t11NsRejectStatsGroup.setDescription("A collection of objects for displaying Name\nServer statistics for rejects.")
t11NsNotifyControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 135, 2, 2, 5)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsRejectReasonCode"), ("T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetRejReqNotfyEnable"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejReasonCodeExp"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejReasonVendorCode"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejectCtCommandString"), ) )
if mibBuilder.loadTexts: t11NsNotifyControlGroup.setDescription("A collection of notification control and\nnotification information objects for monitoring\nrejections of Name Server registrations.")
t11NsNotifyGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 135, 2, 2, 6)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsRejectRegNotify"), ) )
if mibBuilder.loadTexts: t11NsNotifyGroup.setDescription("A collection of notifications for monitoring\nrejections of Name Server registrations.")

# Compliances

t11NsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 135, 2, 1, 1)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsDBGroup"), ("T11-FC-NAME-SERVER-MIB", "t11NsNotifyGroup"), ("T11-FC-NAME-SERVER-MIB", "t11NsRscnStatsGroup"), ("T11-FC-NAME-SERVER-MIB", "t11NsRequestStatsGroup"), ("T11-FC-NAME-SERVER-MIB", "t11NsNotifyControlGroup"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejectStatsGroup"), ) )
if mibBuilder.loadTexts: t11NsMIBCompliance.setDescription("The compliance statement for entities that\nimplement the Fibre Channel Name Server.")

# Exports

# Module identity
mibBuilder.exportSymbols("T11-FC-NAME-SERVER-MIB", PYSNMP_MODULE_ID=t11FcNameServerMIB)

# Types
mibBuilder.exportSymbols("T11-FC-NAME-SERVER-MIB", T11NsGs4RejectReasonCode=T11NsGs4RejectReasonCode, T11NsRejReasonCodeExpl=T11NsRejReasonCodeExpl)

# Objects
mibBuilder.exportSymbols("T11-FC-NAME-SERVER-MIB", t11FcNameServerMIB=t11FcNameServerMIB, t11NsNotifications=t11NsNotifications, t11NsMIBObjects=t11NsMIBObjects, t11NsStatus=t11NsStatus, t11NsInfoSubsetTable=t11NsInfoSubsetTable, t11NsInfoSubsetEntry=t11NsInfoSubsetEntry, t11NsInfoSubsetIndex=t11NsInfoSubsetIndex, t11NsInfoSubsetSwitchIndex=t11NsInfoSubsetSwitchIndex, t11NsInfoSubsetTableLastChange=t11NsInfoSubsetTableLastChange, t11NsInfoSubsetNumRows=t11NsInfoSubsetNumRows, t11NsInfoSubsetTotalRejects=t11NsInfoSubsetTotalRejects, t11NsInfoSubsetRejReqNotfyEnable=t11NsInfoSubsetRejReqNotfyEnable, t11NsRegTable=t11NsRegTable, t11NsRegEntry=t11NsRegEntry, t11NsRegFabricIndex=t11NsRegFabricIndex, t11NsRegPortIdentifier=t11NsRegPortIdentifier, t11NsRegPortName=t11NsRegPortName, t11NsRegNodeName=t11NsRegNodeName, t11NsRegClassOfSvc=t11NsRegClassOfSvc, t11NsRegNodeIpAddress=t11NsRegNodeIpAddress, t11NsRegProcAssoc=t11NsRegProcAssoc, t11NsRegFc4Type=t11NsRegFc4Type, t11NsRegPortType=t11NsRegPortType, t11NsRegPortIpAddress=t11NsRegPortIpAddress, t11NsRegFabricPortName=t11NsRegFabricPortName, t11NsRegHardAddress=t11NsRegHardAddress, t11NsRegSymbolicPortName=t11NsRegSymbolicPortName, t11NsRegSymbolicNodeName=t11NsRegSymbolicNodeName, t11NsRegFc4Features=t11NsRegFc4Features, t11NsRegFc4DescriptorTable=t11NsRegFc4DescriptorTable, t11NsRegFc4DescriptorEntry=t11NsRegFc4DescriptorEntry, t11NsRegFc4TypeValue=t11NsRegFc4TypeValue, t11NsRegFc4Descriptor=t11NsRegFc4Descriptor, t11NsRejectTable=t11NsRejectTable, t11NsRejectEntry=t11NsRejectEntry, t11NsRejectCtCommandString=t11NsRejectCtCommandString, t11NsRejectReasonCode=t11NsRejectReasonCode, t11NsRejReasonCodeExp=t11NsRejReasonCodeExp, t11NsRejReasonVendorCode=t11NsRejReasonVendorCode, t11NsStatistics=t11NsStatistics, t11NsStatsTable=t11NsStatsTable, t11NsStatsEntry=t11NsStatsEntry, t11NsInGetReqs=t11NsInGetReqs, t11NsOutGetReqs=t11NsOutGetReqs, t11NsInRegReqs=t11NsInRegReqs, t11NsInDeRegReqs=t11NsInDeRegReqs, t11NsInRscns=t11NsInRscns, t11NsOutRscns=t11NsOutRscns, t11NsRejects=t11NsRejects, t11NsDatabaseFull=t11NsDatabaseFull, t11NsMIBConformance=t11NsMIBConformance, t11NsMIBCompliances=t11NsMIBCompliances, t11NsMIBGroups=t11NsMIBGroups)

# Notifications
mibBuilder.exportSymbols("T11-FC-NAME-SERVER-MIB", t11NsRejectRegNotify=t11NsRejectRegNotify)

# Groups
mibBuilder.exportSymbols("T11-FC-NAME-SERVER-MIB", t11NsDBGroup=t11NsDBGroup, t11NsRequestStatsGroup=t11NsRequestStatsGroup, t11NsRscnStatsGroup=t11NsRscnStatsGroup, t11NsRejectStatsGroup=t11NsRejectStatsGroup, t11NsNotifyControlGroup=t11NsNotifyControlGroup, t11NsNotifyGroup=t11NsNotifyGroup)

# Compliances
mibBuilder.exportSymbols("T11-FC-NAME-SERVER-MIB", t11NsMIBCompliance=t11NsMIBCompliance)
