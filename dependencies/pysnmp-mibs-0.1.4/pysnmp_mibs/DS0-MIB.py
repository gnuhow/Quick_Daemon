# PySNMP SMI module. Autogenerated from smidump -f python DS0-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:38:54 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InterfaceIndex, InterfaceIndexOrZero, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, transmission, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "transmission")
( DisplayString, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue")

# Objects

ds0 = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 81)).setRevisions(("1998-07-16 16:30","1998-05-24 20:10",))
if mibBuilder.loadTexts: ds0.setOrganization("IETF Trunk MIB Working Group")
if mibBuilder.loadTexts: ds0.setContactInfo("        David Fowler\n\nPostal: Newbridge Networks Corporation\n        600 March Road\n        Kanata, Ontario, Canada K2K 2E6\n\n        Tel: +1 613 591 3600\n        Fax: +1 613 599 3619\n\nE-mail: davef@newbridge.com")
if mibBuilder.loadTexts: ds0.setDescription("The MIB module to describe\nDS0 interfaces objects.")
dsx0ConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 81, 1))
if mibBuilder.loadTexts: dsx0ConfigTable.setDescription("The DS0 Configuration table.")
dsx0ConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 81, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dsx0ConfigEntry.setDescription("An entry in the DS0 Configuration table.  There\nis an entry in this table for each DS0 interface.")
dsx0Ds0ChannelNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 81, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx0Ds0ChannelNumber.setDescription("This object indicates the channel number of the\nds0 on its DS1/E1.")
dsx0RobbedBitSignalling = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 81, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx0RobbedBitSignalling.setDescription("This object indicates if Robbed Bit Signalling is\nturned on or off for a given ds0.  This only\napplies to DS0s on a DS1 link.  For E1 links the\nvalue is always off (false).")
dsx0CircuitIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 81, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx0CircuitIdentifier.setDescription("This object contains the transmission vendor's\ncircuit identifier, for the purpose of\nfacilitating troubleshooting.")
dsx0IdleCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 81, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx0IdleCode.setDescription("This object contains the code transmitted in the\nABCD bits when the ds0 is not connected and\ndsx0TransmitCodesEnable is enabled.  The object is\na bitmap and the various bit positions are:\n      1     D bit\n      2     C bit\n      4     B bit\n      8     A bit")
dsx0SeizedCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 81, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx0SeizedCode.setDescription("This object contains the code transmitted in the\nABCD bits when the ds0 is connected and\ndsx0TransmitCodesEnable is enabled.  The object is\na bitmap and the various bit positions are:\n      1     D bit\n      2     C bit\n      4     B bit\n      8     A bit")
dsx0ReceivedCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 81, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx0ReceivedCode.setDescription("This object contains the code being received in\nthe ABCD bits.  The object is a bitmap and the\nvarious bit positions are:\n      1     D bit\n      2     C bit\n      4     B bit\n      8     A bit")
dsx0TransmitCodesEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 81, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx0TransmitCodesEnable.setDescription("This object determines if the idle and seized\ncodes are transmitted. If the value of this object\nis true then the codes are transmitted.")
dsx0Ds0BundleMappedIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 81, 1, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx0Ds0BundleMappedIfIndex.setDescription("This object indicates the ifIndex value assigned\nby the agent for the ds0Bundle(82) ifEntry to\nwhich the given ds0(81) ifEntry may belong.\n\nIf the given ds0(81) ifEntry does not belong to\nany ds0Bundle(82) ifEntry, then this object has a\nvalue of zero.\n\nWhile this object provides information that can\nalso be found in the ifStackTable, it provides\nthis same information with a single table lookup,\nrather than by walking the ifStackTable to find\nthe possibly non-existent ds0Bundle(82) ifEntry\nthat may be stacked above the given ds0(81)\nifTable entry.")
ds0Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 81, 2))
ds0Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 81, 2, 1))
ds0Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 81, 2, 2))
dsx0ChanMappingTable = MibTable((1, 3, 6, 1, 2, 1, 10, 81, 3))
if mibBuilder.loadTexts: dsx0ChanMappingTable.setDescription("The DS0 Channel Mapping table.  This table maps a\nDS0 channel number on a particular DS1/E1 into an\nifIndex.")
dsx0ChanMappingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 81, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DS0-MIB", "dsx0Ds0ChannelNumber"))
if mibBuilder.loadTexts: dsx0ChanMappingEntry.setDescription("An entry in the DS0 Channel Mapping table.  There\nis an entry in this table corresponding to each\nds0 ifEntry within any interface that is\nchannelized to the individual ds0 ifEntry level.\n\nThis table is intended to facilitate mapping from\nchannelized interface / channel number to DS0\nifEntry.  (e.g. mapping (DS1 ifIndex, DS0 Channel\nNumber) -> ifIndex)\n\nWhile this table provides information that can\nalso be found in the ifStackTable and\ndsx0ConfigTable, it provides this same information\nwith a single table lookup, rather than by walking\nthe ifStackTable to find the various constituent\nds0 ifTable entries, and testing various\ndsx0ConfigTable entries to check for the entry\nwith the applicable DS0 channel number.")
dsx0ChanMappedIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 81, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx0ChanMappedIfIndex.setDescription("This object indicates the ifIndex value assigned\nby the agent for the individual ds0 ifEntry that\ncorresponds to the given DS0 channel number\n(specified by the INDEX element\ndsx0Ds0ChannelNumber) of the given channelized\ninterface (specified by INDEX element ifIndex).")

# Augmentions

# Groups

ds0ConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 81, 2, 1, 1)).setObjects(*(("DS0-MIB", "dsx0CircuitIdentifier"), ("DS0-MIB", "dsx0SeizedCode"), ("DS0-MIB", "dsx0Ds0ChannelNumber"), ("DS0-MIB", "dsx0Ds0BundleMappedIfIndex"), ("DS0-MIB", "dsx0TransmitCodesEnable"), ("DS0-MIB", "dsx0ChanMappedIfIndex"), ("DS0-MIB", "dsx0RobbedBitSignalling"), ("DS0-MIB", "dsx0IdleCode"), ("DS0-MIB", "dsx0ReceivedCode"), ) )
if mibBuilder.loadTexts: ds0ConfigGroup.setDescription("A collection of objects providing configuration\ninformation applicable to all DS0 interfaces.")

# Compliances

ds0Compliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 81, 2, 2, 1)).setObjects(*(("DS0-MIB", "ds0ConfigGroup"), ) )
if mibBuilder.loadTexts: ds0Compliance.setDescription("The compliance statement for DS0 interfaces.")

# Exports

# Module identity
mibBuilder.exportSymbols("DS0-MIB", PYSNMP_MODULE_ID=ds0)

# Objects
mibBuilder.exportSymbols("DS0-MIB", ds0=ds0, dsx0ConfigTable=dsx0ConfigTable, dsx0ConfigEntry=dsx0ConfigEntry, dsx0Ds0ChannelNumber=dsx0Ds0ChannelNumber, dsx0RobbedBitSignalling=dsx0RobbedBitSignalling, dsx0CircuitIdentifier=dsx0CircuitIdentifier, dsx0IdleCode=dsx0IdleCode, dsx0SeizedCode=dsx0SeizedCode, dsx0ReceivedCode=dsx0ReceivedCode, dsx0TransmitCodesEnable=dsx0TransmitCodesEnable, dsx0Ds0BundleMappedIfIndex=dsx0Ds0BundleMappedIfIndex, ds0Conformance=ds0Conformance, ds0Groups=ds0Groups, ds0Compliances=ds0Compliances, dsx0ChanMappingTable=dsx0ChanMappingTable, dsx0ChanMappingEntry=dsx0ChanMappingEntry, dsx0ChanMappedIfIndex=dsx0ChanMappedIfIndex)

# Groups
mibBuilder.exportSymbols("DS0-MIB", ds0ConfigGroup=ds0ConfigGroup)

# Compliances
mibBuilder.exportSymbols("DS0-MIB", ds0Compliance=ds0Compliance)
