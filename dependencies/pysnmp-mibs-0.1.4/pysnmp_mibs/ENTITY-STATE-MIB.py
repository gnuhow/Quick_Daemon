# PySNMP SMI module. Autogenerated from smidump -f python ENTITY-STATE-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:38:56 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( entPhysicalIndex, ) = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
( EntityAdminState, EntityAlarmStatus, EntityOperState, EntityStandbyStatus, EntityUsageState, ) = mibBuilder.importSymbols("ENTITY-STATE-TC-MIB", "EntityAdminState", "EntityAlarmStatus", "EntityOperState", "EntityStandbyStatus", "EntityUsageState")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "mib-2")
( DateAndTime, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime")

# Objects

entityStateMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 131)).setRevisions(("2005-11-22 00:00",))
if mibBuilder.loadTexts: entityStateMIB.setOrganization("IETF Entity MIB Working Group")
if mibBuilder.loadTexts: entityStateMIB.setContactInfo(" General Discussion: entmib@ietf.org\nTo Subscribe:\nhttp://www.ietf.org/mailman/listinfo/entmib\n\nhttp://www.ietf.org/html.charters/entmib-charter.html\n\nSharon Chisholm\nNortel Networks\nPO Box 3511 Station C\nOttawa, Ont.  K1Y 4H7\nCanada\nschishol@nortel.com\n\nDavid T. Perkins\n548 Qualbrook Ct\nSan Jose, CA 95110\nUSA\nPhone: 408 394-8702\ndperkins@snmpinfo.com")
if mibBuilder.loadTexts: entityStateMIB.setDescription("This MIB defines a state extension to the Entity MIB.\n\nCopyright (C) The Internet Society 2005.  This version\nof this MIB module is part of RFC 4268; see the RFC\nitself for full legal notices.")
entStateNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 131, 0))
entStateObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 131, 1))
entStateTable = MibTable((1, 3, 6, 1, 2, 1, 131, 1, 1))
if mibBuilder.loadTexts: entStateTable.setDescription("A table of information about state/status of entities.\nThis is a sparse augment of the entPhysicalTable.  Entries\nappear in this table for values of\nentPhysicalClass [RFC4133] that in this implementation\nare able to report any of the state or status stored in\nthis table.")
entStateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 131, 1, 1, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: entStateEntry.setDescription("State information about this physical entity.")
entStateLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 131, 1, 1, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entStateLastChanged.setDescription("The value of this object is the date and\ntime when the value of any of entStateAdmin,\nentStateOper, entStateUsage, entStateAlarm,\nor entStateStandby changed for this entity.\n\nIf there has been no change since\nthe last re-initialization of the local system,\nthis object contains the date and time of\nlocal system initialization.  If there has been\nno change since the entity was added to the\nlocal system, this object contains the date and\ntime of the insertion.")
entStateAdmin = MibTableColumn((1, 3, 6, 1, 2, 1, 131, 1, 1, 1, 2), EntityAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entStateAdmin.setDescription("The administrative state for this entity.\n\n\n\nThis object refers to an entities administrative\npermission to service both other entities within\nits containment hierarchy as well other users of\nits services defined by means outside the scope\nof this MIB.\n\nSetting this object to 'notSupported' will result\nin an 'inconsistentValue' error.  For entities that\ndo not support administrative state, all set\noperations will result in an 'inconsistentValue'\nerror.\n\nSome physical entities exhibit only a subset of the\nremaining administrative state values.  Some entities\ncannot be locked, and hence this object exhibits only\nthe 'unlocked' state.  Other entities cannot be shutdown\ngracefully, and hence this object does not exhibit the\n'shuttingDown' state.  A value of 'inconsistentValue'\nwill be returned if attempts are made to set this\nobject to values not supported by its administrative\nmodel.")
entStateOper = MibTableColumn((1, 3, 6, 1, 2, 1, 131, 1, 1, 1, 3), EntityOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entStateOper.setDescription("The operational state for this entity.\n\nNote that unlike the state model used within the\nInterfaces MIB [RFC2863], this object does not follow\nthe administrative state.  An administrative state of\ndown does not predict an operational state\nof disabled.\n\nA value of 'testing' means that entity currently being\ntested and cannot therefore report whether it is\noperational or not.\n\nA value of 'disabled' means that an entity is totally\ninoperable and unable to provide service both to entities\nwithin its containment hierarchy, or to other receivers\nof its service as defined in ways outside the scope of\nthis MIB.\n\nA value of 'enabled' means that an entity is fully or\npartially operable and able to provide service both to\n\n\nentities within its containment hierarchy, or to other\nreceivers of its service as defined in ways outside the\nscope of this MIB.\n\nNote that some implementations may not be able to\naccurately report entStateOper while the\nentStateAdmin object has a value other than 'unlocked'.\nIn these cases, this object MUST have a value\nof 'unknown'.")
entStateUsage = MibTableColumn((1, 3, 6, 1, 2, 1, 131, 1, 1, 1, 4), EntityUsageState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entStateUsage.setDescription("The usage state for this entity.\n\nThis object refers to an entity's ability to service more\nphysical entities in a containment hierarchy.  A value\nof 'idle' means this entity is able to contain other\nentities but that no other entity is currently\ncontained within this entity.\n\nA value of 'active' means that at least one entity is\ncontained within this entity, but that it could handle\nmore.  A value of 'busy' means that the entity is unable\nto handle any additional entities being contained in it.\n\nSome entities will exhibit only a subset of the\nusage state values.  Entities that are unable to ever\nservice any entities within a containment hierarchy will\nalways have a usage state of 'busy'.  Some entities will\nonly ever be able to support one entity within its\ncontainment hierarchy and will therefore only exhibit\nvalues of 'idle' and 'busy'.")
entStateAlarm = MibTableColumn((1, 3, 6, 1, 2, 1, 131, 1, 1, 1, 5), EntityAlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entStateAlarm.setDescription("The alarm status for this entity.  It does not include\nthe alarms raised on child components within its\ncontainment hierarchy.\n\nA value of 'unknown' means that this entity is\n\n\n\nunable to report alarm state.  Note that this differs\nfrom 'indeterminate', which means that alarm state\nis supported and there are alarms against this entity,\nbut the severity of some of the alarms is not known.\n\nIf no bits are set, then this entity supports reporting\nof alarms, but there are currently no active alarms\nagainst this entity.")
entStateStandby = MibTableColumn((1, 3, 6, 1, 2, 1, 131, 1, 1, 1, 6), EntityStandbyStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entStateStandby.setDescription("The standby status for this entity.\n\nSome entities will exhibit only a subset of the\nremaining standby state values.  If this entity\ncannot operate in a standby role, the value of this\nobject will always be 'providingService'.")
entStateConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 131, 2))
entStateCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 131, 2, 1))
entStateGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 131, 2, 2))

# Augmentions

# Notifications

entStateOperEnabled = NotificationType((1, 3, 6, 1, 2, 1, 131, 0, 1)).setObjects(*(("ENTITY-STATE-MIB", "entStateAdmin"), ("ENTITY-STATE-MIB", "entStateAlarm"), ) )
if mibBuilder.loadTexts: entStateOperEnabled.setDescription("An entStateOperEnabled notification signifies that the\nSNMP entity, acting in an agent role, has detected that\nthe entStateOper object for one of its entities has\ntransitioned into the 'enabled' state.\n\nThe entity this notification refers can be identified by\nextracting the entPhysicalIndex from one of the\nvariable bindings.  The entStateAdmin and entStateAlarm\nvarbinds may be examined to find out additional\ninformation on the administrative state at the time of\nthe operation state change as well as to find out whether\nthere were any known alarms against the entity at that\ntime that may explain why the physical entity has become\noperationally disabled.")
entStateOperDisabled = NotificationType((1, 3, 6, 1, 2, 1, 131, 0, 2)).setObjects(*(("ENTITY-STATE-MIB", "entStateAdmin"), ("ENTITY-STATE-MIB", "entStateAlarm"), ) )
if mibBuilder.loadTexts: entStateOperDisabled.setDescription("An entStateOperDisabled notification signifies that the\nSNMP entity, acting in an agent role, has detected that\nthe entStateOper object for one of its entities has\ntransitioned into the 'disabled' state.\n\nThe entity this notification refers can be identified by\nextracting the entPhysicalIndex from one of the\nvariable bindings.  The entStateAdmin and entStateAlarm\nvarbinds may be examined to find out additional\ninformation on the administrative state at the time of\nthe operation state change as well as to find out whether\nthere were any known alarms against the entity at that\ntime that may affect the physical entity's\nability to stay operationally enabled.")

# Groups

entStateGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 131, 2, 2, 1)).setObjects(*(("ENTITY-STATE-MIB", "entStateOper"), ("ENTITY-STATE-MIB", "entStateAdmin"), ("ENTITY-STATE-MIB", "entStateAlarm"), ("ENTITY-STATE-MIB", "entStateUsage"), ("ENTITY-STATE-MIB", "entStateLastChanged"), ("ENTITY-STATE-MIB", "entStateStandby"), ) )
if mibBuilder.loadTexts: entStateGroup.setDescription("Standard Entity State group.")
entStateNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 131, 2, 2, 2)).setObjects(*(("ENTITY-STATE-MIB", "entStateOperDisabled"), ("ENTITY-STATE-MIB", "entStateOperEnabled"), ) )
if mibBuilder.loadTexts: entStateNotificationsGroup.setDescription("Standard Entity State Notification group.")

# Compliances

entStateCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 131, 2, 1, 1)).setObjects(*(("ENTITY-STATE-MIB", "entStateNotificationsGroup"), ("ENTITY-STATE-MIB", "entStateGroup"), ) )
if mibBuilder.loadTexts: entStateCompliance.setDescription("The compliance statement for systems supporting\nthe Entity State MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("ENTITY-STATE-MIB", PYSNMP_MODULE_ID=entityStateMIB)

# Objects
mibBuilder.exportSymbols("ENTITY-STATE-MIB", entityStateMIB=entityStateMIB, entStateNotifications=entStateNotifications, entStateObjects=entStateObjects, entStateTable=entStateTable, entStateEntry=entStateEntry, entStateLastChanged=entStateLastChanged, entStateAdmin=entStateAdmin, entStateOper=entStateOper, entStateUsage=entStateUsage, entStateAlarm=entStateAlarm, entStateStandby=entStateStandby, entStateConformance=entStateConformance, entStateCompliances=entStateCompliances, entStateGroups=entStateGroups)

# Notifications
mibBuilder.exportSymbols("ENTITY-STATE-MIB", entStateOperEnabled=entStateOperEnabled, entStateOperDisabled=entStateOperDisabled)

# Groups
mibBuilder.exportSymbols("ENTITY-STATE-MIB", entStateGroup=entStateGroup, entStateNotificationsGroup=entStateNotificationsGroup)

# Compliances
mibBuilder.exportSymbols("ENTITY-STATE-MIB", entStateCompliance=entStateCompliance)
