# PySNMP SMI module. Autogenerated from smidump -f python IANA-MAU-MIB
# by libsmi2pysnmp-0.1.3 at Mon Apr  2 20:39:07 2012,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( Bits, Integer32, ModuleIdentity, MibIdentifier, ObjectIdentity, TimeTicks, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "TimeTicks", "mib-2")
( TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention")

# Types

class IANAifJackType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(9,15,11,3,7,8,12,4,2,1,13,6,5,10,14,)
    namedValues = NamedValues(("other", 1), ("fiberST", 10), ("telco", 11), ("mtrj", 12), ("hssdc", 13), ("fiberLC", 14), ("cx4", 15), ("rj45", 2), ("rj45S", 3), ("db9", 4), ("bnc", 5), ("fAUI", 6), ("mAUI", 7), ("fiberSC", 8), ("fiberMIC", 9), )
    
class IANAifMauAutoNegCapBits(Bits):
    namedValues = NamedValues(("bOther", 0), ("b10baseT", 1), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), )
    
class IANAifMauMediaAvailable(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(9,3,12,13,20,6,2,17,1,14,10,7,5,4,16,11,15,8,18,19,)
    namedValues = NamedValues(("other", 1), ("offline", 10), ("autoNegError", 11), ("pmdLinkFault", 12), ("wisFrameLoss", 13), ("wisSignalLoss", 14), ("pcsLinkFault", 15), ("excessiveBER", 16), ("dxsLinkFault", 17), ("pxsLinkFault", 18), ("availableReduced", 19), ("unknown", 2), ("ready", 20), ("available", 3), ("notAvailable", 4), ("remoteFault", 5), ("invalidSignal", 6), ("remoteJabber", 7), ("remoteLinkLoss", 8), ("remoteTest", 9), )
    
class IANAifMauTypeListBits(Bits):
    namedValues = NamedValues(("bOther", 0), ("bAUI", 1), ("b10baseTHD", 10), ("b10baseTFD", 11), ("b10baseFLHD", 12), ("b10baseFLFD", 13), ("b100baseT4", 14), ("b100baseTXHD", 15), ("b100baseTXFD", 16), ("b100baseFXHD", 17), ("b100baseFXFD", 18), ("b100baseT2HD", 19), ("b10base5", 2), ("b100baseT2FD", 20), ("b1000baseXHD", 21), ("b1000baseXFD", 22), ("b1000baseLXHD", 23), ("b1000baseLXFD", 24), ("b1000baseSXHD", 25), ("b1000baseSXFD", 26), ("b1000baseCXHD", 27), ("b1000baseCXFD", 28), ("b1000baseTHD", 29), ("bFoirl", 3), ("b1000baseTFD", 30), ("b10GbaseX", 31), ("b10GbaseLX4", 32), ("b10GbaseR", 33), ("b10GbaseER", 34), ("b10GbaseLR", 35), ("b10GbaseSR", 36), ("b10GbaseW", 37), ("b10GbaseEW", 38), ("b10GbaseLW", 39), ("b10base2", 4), ("b10GbaseSW", 40), ("b10GbaseCX4", 41), ("b2BaseTL", 42), ("b10PassTS", 43), ("b100BaseBX10D", 44), ("b100BaseBX10U", 45), ("b100BaseLX10", 46), ("b1000BaseBX10D", 47), ("b1000BaseBX10U", 48), ("b1000BaseLX10", 49), ("b10baseT", 5), ("b1000BasePX10D", 50), ("b1000BasePX10U", 51), ("b1000BasePX20D", 52), ("b1000BasePX20U", 53), ("b10baseFP", 6), ("b10baseFB", 7), ("b10baseFL", 8), ("b10broad36", 9), )
    

# Objects

dot3MauType = MibIdentifier((1, 3, 6, 1, 2, 1, 26, 4))
dot3MauTypeAUI = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 1))
if mibBuilder.loadTexts: dot3MauTypeAUI.setDescription("no internal MAU, view from AUI")
dot3MauType10Base5 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 2))
if mibBuilder.loadTexts: dot3MauType10Base5.setDescription("thick coax MAU")
dot3MauTypeFoirl = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 3))
if mibBuilder.loadTexts: dot3MauTypeFoirl.setDescription("FOIRL MAU")
dot3MauType10Base2 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 4))
if mibBuilder.loadTexts: dot3MauType10Base2.setDescription("thin coax MAU")
dot3MauType10BaseT = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 5))
if mibBuilder.loadTexts: dot3MauType10BaseT.setDescription("UTP MAU.\nNote that it is strongly recommended that\nagents return either dot3MauType10BaseTHD or\ndot3MauType10BaseTFD if the duplex mode is\nknown.  However, management applications should\nbe prepared to receive this MAU type value from\nolder agent implementations.")
dot3MauType10BaseFP = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 6))
if mibBuilder.loadTexts: dot3MauType10BaseFP.setDescription("passive fiber MAU")
dot3MauType10BaseFB = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 7))
if mibBuilder.loadTexts: dot3MauType10BaseFB.setDescription("sync fiber MAU")
dot3MauType10BaseFL = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 8))
if mibBuilder.loadTexts: dot3MauType10BaseFL.setDescription("async fiber MAU.\nNote that it is strongly recommended that\nagents return either dot3MauType10BaseFLHD or\ndot3MauType10BaseFLFD if the duplex mode is\nknown.  However, management applications should\nbe prepared to receive this MAU type value from\nolder agent implementations.")
dot3MauType10Broad36 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 9))
if mibBuilder.loadTexts: dot3MauType10Broad36.setDescription("broadband DTE MAU.\nNote that 10BROAD36 MAUs can be attached to\ninterfaces but not to repeaters.")
dot3MauType10BaseTHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 10))
if mibBuilder.loadTexts: dot3MauType10BaseTHD.setDescription("UTP MAU, half duplex mode")
dot3MauType10BaseTFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 11))
if mibBuilder.loadTexts: dot3MauType10BaseTFD.setDescription("UTP MAU, full duplex mode")
dot3MauType10BaseFLHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 12))
if mibBuilder.loadTexts: dot3MauType10BaseFLHD.setDescription("async fiber MAU, half duplex mode")
dot3MauType10BaseFLFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 13))
if mibBuilder.loadTexts: dot3MauType10BaseFLFD.setDescription("async fiber MAU, full duplex mode")
dot3MauType100BaseT4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 14))
if mibBuilder.loadTexts: dot3MauType100BaseT4.setDescription("4 pair category 3 UTP")
dot3MauType100BaseTXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 15))
if mibBuilder.loadTexts: dot3MauType100BaseTXHD.setDescription("2 pair category 5 UTP, half duplex mode")
dot3MauType100BaseTXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 16))
if mibBuilder.loadTexts: dot3MauType100BaseTXFD.setDescription("2 pair category 5 UTP, full duplex mode")
dot3MauType100BaseFXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 17))
if mibBuilder.loadTexts: dot3MauType100BaseFXHD.setDescription("X fiber over PMT, half duplex mode")
dot3MauType100BaseFXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 18))
if mibBuilder.loadTexts: dot3MauType100BaseFXFD.setDescription("X fiber over PMT, full duplex mode")
dot3MauType100BaseT2HD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 19))
if mibBuilder.loadTexts: dot3MauType100BaseT2HD.setDescription("2 pair category 3 UTP, half duplex mode")
dot3MauType100BaseT2FD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 20))
if mibBuilder.loadTexts: dot3MauType100BaseT2FD.setDescription("2 pair category 3 UTP, full duplex mode")
dot3MauType1000BaseXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 21))
if mibBuilder.loadTexts: dot3MauType1000BaseXHD.setDescription("PCS/PMA, unknown PMD, half duplex mode")
dot3MauType1000BaseXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 22))
if mibBuilder.loadTexts: dot3MauType1000BaseXFD.setDescription("PCS/PMA, unknown PMD, full duplex mode")
dot3MauType1000BaseLXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 23))
if mibBuilder.loadTexts: dot3MauType1000BaseLXHD.setDescription("Fiber over long-wavelength laser, half duplex\nmode")
dot3MauType1000BaseLXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 24))
if mibBuilder.loadTexts: dot3MauType1000BaseLXFD.setDescription("Fiber over long-wavelength laser, full duplex\nmode")
dot3MauType1000BaseSXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 25))
if mibBuilder.loadTexts: dot3MauType1000BaseSXHD.setDescription("Fiber over short-wavelength laser, half\nduplex mode")
dot3MauType1000BaseSXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 26))
if mibBuilder.loadTexts: dot3MauType1000BaseSXFD.setDescription("Fiber over short-wavelength laser, full\nduplex mode")
dot3MauType1000BaseCXHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 27))
if mibBuilder.loadTexts: dot3MauType1000BaseCXHD.setDescription("Copper over 150-Ohm balanced cable, half\nduplex mode")
dot3MauType1000BaseCXFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 28))
if mibBuilder.loadTexts: dot3MauType1000BaseCXFD.setDescription("Copper over 150-Ohm balanced cable, full\n\nduplex mode")
dot3MauType1000BaseTHD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 29))
if mibBuilder.loadTexts: dot3MauType1000BaseTHD.setDescription("Four-pair Category 5 UTP, half duplex mode")
dot3MauType1000BaseTFD = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 30))
if mibBuilder.loadTexts: dot3MauType1000BaseTFD.setDescription("Four-pair Category 5 UTP, full duplex mode")
dot3MauType10GigBaseX = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 31))
if mibBuilder.loadTexts: dot3MauType10GigBaseX.setDescription("X PCS/PMA, unknown PMD.")
dot3MauType10GigBaseLX4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 32))
if mibBuilder.loadTexts: dot3MauType10GigBaseLX4.setDescription("X fiber over WWDM optics")
dot3MauType10GigBaseR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 33))
if mibBuilder.loadTexts: dot3MauType10GigBaseR.setDescription("R PCS/PMA, unknown PMD.")
dot3MauType10GigBaseER = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 34))
if mibBuilder.loadTexts: dot3MauType10GigBaseER.setDescription("R fiber over 1550 nm optics")
dot3MauType10GigBaseLR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 35))
if mibBuilder.loadTexts: dot3MauType10GigBaseLR.setDescription("R fiber over 1310 nm optics")
dot3MauType10GigBaseSR = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 36))
if mibBuilder.loadTexts: dot3MauType10GigBaseSR.setDescription("R fiber over 850 nm optics")
dot3MauType10GigBaseW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 37))
if mibBuilder.loadTexts: dot3MauType10GigBaseW.setDescription("W PCS/PMA, unknown PMD.")
dot3MauType10GigBaseEW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 38))
if mibBuilder.loadTexts: dot3MauType10GigBaseEW.setDescription("W fiber over 1550 nm optics")
dot3MauType10GigBaseLW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 39))
if mibBuilder.loadTexts: dot3MauType10GigBaseLW.setDescription("W fiber over 1310 nm optics")
dot3MauType10GigBaseSW = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 40))
if mibBuilder.loadTexts: dot3MauType10GigBaseSW.setDescription("W fiber over 850 nm optics")
dot3MauType10GigBaseCX4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 41))
if mibBuilder.loadTexts: dot3MauType10GigBaseCX4.setDescription("X copper over 8 pair 100-Ohm balanced cable")
dot3MauType2BaseTL = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 42))
if mibBuilder.loadTexts: dot3MauType2BaseTL.setDescription("Voice grade UTP copper, up to 2700m, optional PAF")
dot3MauType10PassTS = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 43))
if mibBuilder.loadTexts: dot3MauType10PassTS.setDescription("Voice grade UTP copper, up to 750m, optional PAF")
dot3MauType100BaseBX10D = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 44))
if mibBuilder.loadTexts: dot3MauType100BaseBX10D.setDescription("One single-mode fiber OLT, long wavelength, 10km")
dot3MauType100BaseBX10U = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 45))
if mibBuilder.loadTexts: dot3MauType100BaseBX10U.setDescription("One single-mode fiber ONU, long wavelength, 10km")
dot3MauType100BaseLX10 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 46))
if mibBuilder.loadTexts: dot3MauType100BaseLX10.setDescription("Two single-mode fibers, long wavelength, 10km")
dot3MauType1000BaseBX10D = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 47))
if mibBuilder.loadTexts: dot3MauType1000BaseBX10D.setDescription("One single-mode fiber OLT, long wavelength, 10km")
dot3MauType1000BaseBX10U = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 48))
if mibBuilder.loadTexts: dot3MauType1000BaseBX10U.setDescription("One single-mode fiber ONU, long wavelength, 10km")
dot3MauType1000BaseLX10 = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 49))
if mibBuilder.loadTexts: dot3MauType1000BaseLX10.setDescription("Two sigle-mode fiber, long wavelength, 10km")
dot3MauType1000BasePX10D = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 50))
if mibBuilder.loadTexts: dot3MauType1000BasePX10D.setDescription("One single-mode fiber EPON OLT, 10km")
dot3MauType1000BasePX10U = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 51))
if mibBuilder.loadTexts: dot3MauType1000BasePX10U.setDescription("One single-mode fiber EPON ONU, 10km")
dot3MauType1000BasePX20D = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 52))
if mibBuilder.loadTexts: dot3MauType1000BasePX20D.setDescription("One single-mode fiber EPON OLT, 20km")
dot3MauType1000BasePX20U = ObjectIdentity((1, 3, 6, 1, 2, 1, 26, 4, 53))
if mibBuilder.loadTexts: dot3MauType1000BasePX20U.setDescription("One single-mode fiber EPON ONU, 20km")
ianaMauMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 154)).setRevisions(("2007-04-21 00:00",))
if mibBuilder.loadTexts: ianaMauMIB.setOrganization("IANA")
if mibBuilder.loadTexts: ianaMauMIB.setContactInfo("        Internet Assigned Numbers Authority\n\nPostal: ICANN\n        4676 Admiralty Way, Suite 330\n        Marina del Rey, CA 90292\n\n   Tel: +1-310-823-9358\n EMail: iana&iana.org")
if mibBuilder.loadTexts: ianaMauMIB.setDescription("This MIB module defines dot3MauType OBJECT-IDENTITIES and\nIANAifMauListBits, IANAifMauMediaAvailable,\nIANAifMauAutoNegCapBits, and IANAifJackType\n\nTEXTUAL-CONVENTIONs, specifying enumerated values of the\nifMauTypeListBits, ifMauMediaAvailable / rpMauMediaAvailable,\nifMauAutoNegCapabilityBits / ifMauAutoNegCapAdvertisedBits /\nifMauAutoNegCapReceivedBits and ifJackType / rpJackType objects\nrespectively, defined in the MAU-MIB.\n\nIt is intended that each new MAU type, Media Availability\nstate, Auto Negotiation capability and/or Jack type defined by\nthe IEEE 802.3 working group and approved for publication in a\nrevision of IEEE Std 802.3 will be added to this MIB module,\nprovided that it is suitable for being managed by the base\nobjects in the MAU-MIB.  An Expert Review, as defined in\nRFC 2434 [RFC2434], is REQUIRED for such additions.\n\nThe following reference is used throughout this MIB module:\n\n[IEEE802.3] refers to:\n   IEEE Std 802.3, 2005 Edition: 'IEEE Standard for\n   Information technology - Telecommunications and information\n   exchange between systems - Local and metropolitan area\n   networks - Specific requirements -\n   Part 3: Carrier sense multiple access with collision\n   detection (CSMA/CD) access method and physical layer\n   specifications'.\n\nThis reference should be updated as appropriate when new\nMAU types, Media Availability states, Auto Negotiation\ncapabilities, and/or Jack types are added to this MIB module.\n\nCopyright (C) The IETF Trust (2007).\nThe initial version of this MIB module was published in\nRFC 4836; for full legal notices see the RFC itself.\nSupplementary information may be available at:\nhttp://www.ietf.org/copyrights/ianamib.html")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("IANA-MAU-MIB", PYSNMP_MODULE_ID=ianaMauMIB)

# Types
mibBuilder.exportSymbols("IANA-MAU-MIB", IANAifJackType=IANAifJackType, IANAifMauAutoNegCapBits=IANAifMauAutoNegCapBits, IANAifMauMediaAvailable=IANAifMauMediaAvailable, IANAifMauTypeListBits=IANAifMauTypeListBits)

# Objects
mibBuilder.exportSymbols("IANA-MAU-MIB", dot3MauType=dot3MauType, dot3MauTypeAUI=dot3MauTypeAUI, dot3MauType10Base5=dot3MauType10Base5, dot3MauTypeFoirl=dot3MauTypeFoirl, dot3MauType10Base2=dot3MauType10Base2, dot3MauType10BaseT=dot3MauType10BaseT, dot3MauType10BaseFP=dot3MauType10BaseFP, dot3MauType10BaseFB=dot3MauType10BaseFB, dot3MauType10BaseFL=dot3MauType10BaseFL, dot3MauType10Broad36=dot3MauType10Broad36, dot3MauType10BaseTHD=dot3MauType10BaseTHD, dot3MauType10BaseTFD=dot3MauType10BaseTFD, dot3MauType10BaseFLHD=dot3MauType10BaseFLHD, dot3MauType10BaseFLFD=dot3MauType10BaseFLFD, dot3MauType100BaseT4=dot3MauType100BaseT4, dot3MauType100BaseTXHD=dot3MauType100BaseTXHD, dot3MauType100BaseTXFD=dot3MauType100BaseTXFD, dot3MauType100BaseFXHD=dot3MauType100BaseFXHD, dot3MauType100BaseFXFD=dot3MauType100BaseFXFD, dot3MauType100BaseT2HD=dot3MauType100BaseT2HD, dot3MauType100BaseT2FD=dot3MauType100BaseT2FD, dot3MauType1000BaseXHD=dot3MauType1000BaseXHD, dot3MauType1000BaseXFD=dot3MauType1000BaseXFD, dot3MauType1000BaseLXHD=dot3MauType1000BaseLXHD, dot3MauType1000BaseLXFD=dot3MauType1000BaseLXFD, dot3MauType1000BaseSXHD=dot3MauType1000BaseSXHD, dot3MauType1000BaseSXFD=dot3MauType1000BaseSXFD, dot3MauType1000BaseCXHD=dot3MauType1000BaseCXHD, dot3MauType1000BaseCXFD=dot3MauType1000BaseCXFD, dot3MauType1000BaseTHD=dot3MauType1000BaseTHD, dot3MauType1000BaseTFD=dot3MauType1000BaseTFD, dot3MauType10GigBaseX=dot3MauType10GigBaseX, dot3MauType10GigBaseLX4=dot3MauType10GigBaseLX4, dot3MauType10GigBaseR=dot3MauType10GigBaseR, dot3MauType10GigBaseER=dot3MauType10GigBaseER, dot3MauType10GigBaseLR=dot3MauType10GigBaseLR, dot3MauType10GigBaseSR=dot3MauType10GigBaseSR, dot3MauType10GigBaseW=dot3MauType10GigBaseW, dot3MauType10GigBaseEW=dot3MauType10GigBaseEW, dot3MauType10GigBaseLW=dot3MauType10GigBaseLW, dot3MauType10GigBaseSW=dot3MauType10GigBaseSW, dot3MauType10GigBaseCX4=dot3MauType10GigBaseCX4, dot3MauType2BaseTL=dot3MauType2BaseTL, dot3MauType10PassTS=dot3MauType10PassTS, dot3MauType100BaseBX10D=dot3MauType100BaseBX10D, dot3MauType100BaseBX10U=dot3MauType100BaseBX10U, dot3MauType100BaseLX10=dot3MauType100BaseLX10, dot3MauType1000BaseBX10D=dot3MauType1000BaseBX10D, dot3MauType1000BaseBX10U=dot3MauType1000BaseBX10U, dot3MauType1000BaseLX10=dot3MauType1000BaseLX10, dot3MauType1000BasePX10D=dot3MauType1000BasePX10D, dot3MauType1000BasePX10U=dot3MauType1000BasePX10U, dot3MauType1000BasePX20D=dot3MauType1000BasePX20D, dot3MauType1000BasePX20U=dot3MauType1000BasePX20U, ianaMauMIB=ianaMauMIB)

